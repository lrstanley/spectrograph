// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/lrstanley/spectrograph/internal/database/ent/guild"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/database/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// GuildEdge is the edge representation of Guild.
type GuildEdge struct {
	Node   *Guild `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GuildConnection is the connection containing edges to Guild.
type GuildConnection struct {
	Edges      []*GuildEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *GuildConnection) build(nodes []*Guild, pager *guildPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Guild
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Guild {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Guild {
			return nodes[i]
		}
	}
	c.Edges = make([]*GuildEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GuildEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GuildPaginateOption enables pagination customization.
type GuildPaginateOption func(*guildPager) error

// WithGuildOrder configures pagination ordering.
func WithGuildOrder(order *GuildOrder) GuildPaginateOption {
	if order == nil {
		order = DefaultGuildOrder
	}
	o := *order
	return func(pager *guildPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGuildOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGuildFilter configures pagination filter.
func WithGuildFilter(filter func(*GuildQuery) (*GuildQuery, error)) GuildPaginateOption {
	return func(pager *guildPager) error {
		if filter == nil {
			return errors.New("GuildQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type guildPager struct {
	reverse bool
	order   *GuildOrder
	filter  func(*GuildQuery) (*GuildQuery, error)
}

func newGuildPager(opts []GuildPaginateOption, reverse bool) (*guildPager, error) {
	pager := &guildPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGuildOrder
	}
	return pager, nil
}

func (p *guildPager) applyFilter(query *GuildQuery) (*GuildQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *guildPager) toCursor(gu *Guild) Cursor {
	return p.order.Field.toCursor(gu)
}

func (p *guildPager) applyCursors(query *GuildQuery, after, before *Cursor) (*GuildQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultGuildOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *guildPager) applyOrder(query *GuildQuery) *GuildQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultGuildOrder.Field {
		query = query.Order(DefaultGuildOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *guildPager) orderExpr(query *GuildQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGuildOrder.Field {
			b.Comma().Ident(DefaultGuildOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Guild.
func (gu *GuildQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GuildPaginateOption,
) (*GuildConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGuildPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if gu, err = pager.applyFilter(gu); err != nil {
		return nil, err
	}
	conn := &GuildConnection{Edges: []*GuildEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gu.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if gu, err = pager.applyCursors(gu, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		gu.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gu.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	gu = pager.applyOrder(gu)
	nodes, err := gu.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// GuildOrderFieldName orders Guild by name.
	GuildOrderFieldName = &GuildOrderField{
		Value: func(gu *Guild) (ent.Value, error) {
			return gu.Name, nil
		},
		column: guild.FieldName,
		toTerm: guild.ByName,
		toCursor: func(gu *Guild) Cursor {
			return Cursor{
				ID:    gu.ID,
				Value: gu.Name,
			}
		},
	}
	// GuildOrderFieldJoinedAt orders Guild by joined_at.
	GuildOrderFieldJoinedAt = &GuildOrderField{
		Value: func(gu *Guild) (ent.Value, error) {
			return gu.JoinedAt, nil
		},
		column: guild.FieldJoinedAt,
		toTerm: guild.ByJoinedAt,
		toCursor: func(gu *Guild) Cursor {
			return Cursor{
				ID:    gu.ID,
				Value: gu.JoinedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GuildOrderField) String() string {
	var str string
	switch f.column {
	case GuildOrderFieldName.column:
		str = "NAME"
	case GuildOrderFieldJoinedAt.column:
		str = "JOINED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GuildOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GuildOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GuildOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *GuildOrderFieldName
	case "JOINED_AT":
		*f = *GuildOrderFieldJoinedAt
	default:
		return fmt.Errorf("%s is not a valid GuildOrderField", str)
	}
	return nil
}

// GuildOrderField defines the ordering field of Guild.
type GuildOrderField struct {
	// Value extracts the ordering value from the given Guild.
	Value    func(*Guild) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) guild.OrderOption
	toCursor func(*Guild) Cursor
}

// GuildOrder defines the ordering of Guild.
type GuildOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *GuildOrderField `json:"field"`
}

// DefaultGuildOrder is the default ordering of Guild.
var DefaultGuildOrder = &GuildOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &GuildOrderField{
		Value: func(gu *Guild) (ent.Value, error) {
			return gu.ID, nil
		},
		column: guild.FieldID,
		toTerm: guild.ByID,
		toCursor: func(gu *Guild) Cursor {
			return Cursor{ID: gu.ID}
		},
	},
}

// ToEdge converts Guild into GuildEdge.
func (gu *Guild) ToEdge(order *GuildOrder) *GuildEdge {
	if order == nil {
		order = DefaultGuildOrder
	}
	return &GuildEdge{
		Node:   gu,
		Cursor: order.Field.toCursor(gu),
	}
}

// GuildAdminConfigEdge is the edge representation of GuildAdminConfig.
type GuildAdminConfigEdge struct {
	Node   *GuildAdminConfig `json:"node"`
	Cursor Cursor            `json:"cursor"`
}

// GuildAdminConfigConnection is the connection containing edges to GuildAdminConfig.
type GuildAdminConfigConnection struct {
	Edges      []*GuildAdminConfigEdge `json:"edges"`
	PageInfo   PageInfo                `json:"pageInfo"`
	TotalCount int                     `json:"totalCount"`
}

func (c *GuildAdminConfigConnection) build(nodes []*GuildAdminConfig, pager *guildadminconfigPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GuildAdminConfig
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GuildAdminConfig {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GuildAdminConfig {
			return nodes[i]
		}
	}
	c.Edges = make([]*GuildAdminConfigEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GuildAdminConfigEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GuildAdminConfigPaginateOption enables pagination customization.
type GuildAdminConfigPaginateOption func(*guildadminconfigPager) error

// WithGuildAdminConfigOrder configures pagination ordering.
func WithGuildAdminConfigOrder(order *GuildAdminConfigOrder) GuildAdminConfigPaginateOption {
	if order == nil {
		order = DefaultGuildAdminConfigOrder
	}
	o := *order
	return func(pager *guildadminconfigPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGuildAdminConfigOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGuildAdminConfigFilter configures pagination filter.
func WithGuildAdminConfigFilter(filter func(*GuildAdminConfigQuery) (*GuildAdminConfigQuery, error)) GuildAdminConfigPaginateOption {
	return func(pager *guildadminconfigPager) error {
		if filter == nil {
			return errors.New("GuildAdminConfigQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type guildadminconfigPager struct {
	reverse bool
	order   *GuildAdminConfigOrder
	filter  func(*GuildAdminConfigQuery) (*GuildAdminConfigQuery, error)
}

func newGuildAdminConfigPager(opts []GuildAdminConfigPaginateOption, reverse bool) (*guildadminconfigPager, error) {
	pager := &guildadminconfigPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGuildAdminConfigOrder
	}
	return pager, nil
}

func (p *guildadminconfigPager) applyFilter(query *GuildAdminConfigQuery) (*GuildAdminConfigQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *guildadminconfigPager) toCursor(gac *GuildAdminConfig) Cursor {
	return p.order.Field.toCursor(gac)
}

func (p *guildadminconfigPager) applyCursors(query *GuildAdminConfigQuery, after, before *Cursor) (*GuildAdminConfigQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultGuildAdminConfigOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *guildadminconfigPager) applyOrder(query *GuildAdminConfigQuery) *GuildAdminConfigQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultGuildAdminConfigOrder.Field {
		query = query.Order(DefaultGuildAdminConfigOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *guildadminconfigPager) orderExpr(query *GuildAdminConfigQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGuildAdminConfigOrder.Field {
			b.Comma().Ident(DefaultGuildAdminConfigOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GuildAdminConfig.
func (gac *GuildAdminConfigQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GuildAdminConfigPaginateOption,
) (*GuildAdminConfigConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGuildAdminConfigPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if gac, err = pager.applyFilter(gac); err != nil {
		return nil, err
	}
	conn := &GuildAdminConfigConnection{Edges: []*GuildAdminConfigEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gac.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if gac, err = pager.applyCursors(gac, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		gac.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gac.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	gac = pager.applyOrder(gac)
	nodes, err := gac.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GuildAdminConfigOrderField defines the ordering field of GuildAdminConfig.
type GuildAdminConfigOrderField struct {
	// Value extracts the ordering value from the given GuildAdminConfig.
	Value    func(*GuildAdminConfig) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) guildadminconfig.OrderOption
	toCursor func(*GuildAdminConfig) Cursor
}

// GuildAdminConfigOrder defines the ordering of GuildAdminConfig.
type GuildAdminConfigOrder struct {
	Direction OrderDirection              `json:"direction"`
	Field     *GuildAdminConfigOrderField `json:"field"`
}

// DefaultGuildAdminConfigOrder is the default ordering of GuildAdminConfig.
var DefaultGuildAdminConfigOrder = &GuildAdminConfigOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &GuildAdminConfigOrderField{
		Value: func(gac *GuildAdminConfig) (ent.Value, error) {
			return gac.ID, nil
		},
		column: guildadminconfig.FieldID,
		toTerm: guildadminconfig.ByID,
		toCursor: func(gac *GuildAdminConfig) Cursor {
			return Cursor{ID: gac.ID}
		},
	},
}

// ToEdge converts GuildAdminConfig into GuildAdminConfigEdge.
func (gac *GuildAdminConfig) ToEdge(order *GuildAdminConfigOrder) *GuildAdminConfigEdge {
	if order == nil {
		order = DefaultGuildAdminConfigOrder
	}
	return &GuildAdminConfigEdge{
		Node:   gac,
		Cursor: order.Field.toCursor(gac),
	}
}

// GuildConfigEdge is the edge representation of GuildConfig.
type GuildConfigEdge struct {
	Node   *GuildConfig `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// GuildConfigConnection is the connection containing edges to GuildConfig.
type GuildConfigConnection struct {
	Edges      []*GuildConfigEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *GuildConfigConnection) build(nodes []*GuildConfig, pager *guildconfigPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GuildConfig
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GuildConfig {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GuildConfig {
			return nodes[i]
		}
	}
	c.Edges = make([]*GuildConfigEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GuildConfigEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GuildConfigPaginateOption enables pagination customization.
type GuildConfigPaginateOption func(*guildconfigPager) error

// WithGuildConfigOrder configures pagination ordering.
func WithGuildConfigOrder(order *GuildConfigOrder) GuildConfigPaginateOption {
	if order == nil {
		order = DefaultGuildConfigOrder
	}
	o := *order
	return func(pager *guildconfigPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGuildConfigOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGuildConfigFilter configures pagination filter.
func WithGuildConfigFilter(filter func(*GuildConfigQuery) (*GuildConfigQuery, error)) GuildConfigPaginateOption {
	return func(pager *guildconfigPager) error {
		if filter == nil {
			return errors.New("GuildConfigQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type guildconfigPager struct {
	reverse bool
	order   *GuildConfigOrder
	filter  func(*GuildConfigQuery) (*GuildConfigQuery, error)
}

func newGuildConfigPager(opts []GuildConfigPaginateOption, reverse bool) (*guildconfigPager, error) {
	pager := &guildconfigPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGuildConfigOrder
	}
	return pager, nil
}

func (p *guildconfigPager) applyFilter(query *GuildConfigQuery) (*GuildConfigQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *guildconfigPager) toCursor(gc *GuildConfig) Cursor {
	return p.order.Field.toCursor(gc)
}

func (p *guildconfigPager) applyCursors(query *GuildConfigQuery, after, before *Cursor) (*GuildConfigQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultGuildConfigOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *guildconfigPager) applyOrder(query *GuildConfigQuery) *GuildConfigQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultGuildConfigOrder.Field {
		query = query.Order(DefaultGuildConfigOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *guildconfigPager) orderExpr(query *GuildConfigQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGuildConfigOrder.Field {
			b.Comma().Ident(DefaultGuildConfigOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GuildConfig.
func (gc *GuildConfigQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GuildConfigPaginateOption,
) (*GuildConfigConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGuildConfigPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if gc, err = pager.applyFilter(gc); err != nil {
		return nil, err
	}
	conn := &GuildConfigConnection{Edges: []*GuildConfigEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gc.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if gc, err = pager.applyCursors(gc, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		gc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gc.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	gc = pager.applyOrder(gc)
	nodes, err := gc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GuildConfigOrderField defines the ordering field of GuildConfig.
type GuildConfigOrderField struct {
	// Value extracts the ordering value from the given GuildConfig.
	Value    func(*GuildConfig) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) guildconfig.OrderOption
	toCursor func(*GuildConfig) Cursor
}

// GuildConfigOrder defines the ordering of GuildConfig.
type GuildConfigOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *GuildConfigOrderField `json:"field"`
}

// DefaultGuildConfigOrder is the default ordering of GuildConfig.
var DefaultGuildConfigOrder = &GuildConfigOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &GuildConfigOrderField{
		Value: func(gc *GuildConfig) (ent.Value, error) {
			return gc.ID, nil
		},
		column: guildconfig.FieldID,
		toTerm: guildconfig.ByID,
		toCursor: func(gc *GuildConfig) Cursor {
			return Cursor{ID: gc.ID}
		},
	},
}

// ToEdge converts GuildConfig into GuildConfigEdge.
func (gc *GuildConfig) ToEdge(order *GuildConfigOrder) *GuildConfigEdge {
	if order == nil {
		order = DefaultGuildConfigOrder
	}
	return &GuildConfigEdge{
		Node:   gc,
		Cursor: order.Field.toCursor(gc),
	}
}

// GuildEventEdge is the edge representation of GuildEvent.
type GuildEventEdge struct {
	Node   *GuildEvent `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// GuildEventConnection is the connection containing edges to GuildEvent.
type GuildEventConnection struct {
	Edges      []*GuildEventEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *GuildEventConnection) build(nodes []*GuildEvent, pager *guildeventPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GuildEvent
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GuildEvent {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GuildEvent {
			return nodes[i]
		}
	}
	c.Edges = make([]*GuildEventEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GuildEventEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GuildEventPaginateOption enables pagination customization.
type GuildEventPaginateOption func(*guildeventPager) error

// WithGuildEventOrder configures pagination ordering.
func WithGuildEventOrder(order *GuildEventOrder) GuildEventPaginateOption {
	if order == nil {
		order = DefaultGuildEventOrder
	}
	o := *order
	return func(pager *guildeventPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGuildEventOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGuildEventFilter configures pagination filter.
func WithGuildEventFilter(filter func(*GuildEventQuery) (*GuildEventQuery, error)) GuildEventPaginateOption {
	return func(pager *guildeventPager) error {
		if filter == nil {
			return errors.New("GuildEventQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type guildeventPager struct {
	reverse bool
	order   *GuildEventOrder
	filter  func(*GuildEventQuery) (*GuildEventQuery, error)
}

func newGuildEventPager(opts []GuildEventPaginateOption, reverse bool) (*guildeventPager, error) {
	pager := &guildeventPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGuildEventOrder
	}
	return pager, nil
}

func (p *guildeventPager) applyFilter(query *GuildEventQuery) (*GuildEventQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *guildeventPager) toCursor(ge *GuildEvent) Cursor {
	return p.order.Field.toCursor(ge)
}

func (p *guildeventPager) applyCursors(query *GuildEventQuery, after, before *Cursor) (*GuildEventQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultGuildEventOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *guildeventPager) applyOrder(query *GuildEventQuery) *GuildEventQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultGuildEventOrder.Field {
		query = query.Order(DefaultGuildEventOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *guildeventPager) orderExpr(query *GuildEventQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGuildEventOrder.Field {
			b.Comma().Ident(DefaultGuildEventOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GuildEvent.
func (ge *GuildEventQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GuildEventPaginateOption,
) (*GuildEventConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGuildEventPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ge, err = pager.applyFilter(ge); err != nil {
		return nil, err
	}
	conn := &GuildEventConnection{Edges: []*GuildEventEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ge.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ge, err = pager.applyCursors(ge, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ge.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ge.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ge = pager.applyOrder(ge)
	nodes, err := ge.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// GuildEventOrderFieldCreateTime orders GuildEvent by create_time.
	GuildEventOrderFieldCreateTime = &GuildEventOrderField{
		Value: func(ge *GuildEvent) (ent.Value, error) {
			return ge.CreateTime, nil
		},
		column: guildevent.FieldCreateTime,
		toTerm: guildevent.ByCreateTime,
		toCursor: func(ge *GuildEvent) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.CreateTime,
			}
		},
	}
	// GuildEventOrderFieldUpdateTime orders GuildEvent by update_time.
	GuildEventOrderFieldUpdateTime = &GuildEventOrderField{
		Value: func(ge *GuildEvent) (ent.Value, error) {
			return ge.UpdateTime, nil
		},
		column: guildevent.FieldUpdateTime,
		toTerm: guildevent.ByUpdateTime,
		toCursor: func(ge *GuildEvent) Cursor {
			return Cursor{
				ID:    ge.ID,
				Value: ge.UpdateTime,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f GuildEventOrderField) String() string {
	var str string
	switch f.column {
	case GuildEventOrderFieldCreateTime.column:
		str = "CREATED_AT"
	case GuildEventOrderFieldUpdateTime.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f GuildEventOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *GuildEventOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("GuildEventOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *GuildEventOrderFieldCreateTime
	case "UPDATED_AT":
		*f = *GuildEventOrderFieldUpdateTime
	default:
		return fmt.Errorf("%s is not a valid GuildEventOrderField", str)
	}
	return nil
}

// GuildEventOrderField defines the ordering field of GuildEvent.
type GuildEventOrderField struct {
	// Value extracts the ordering value from the given GuildEvent.
	Value    func(*GuildEvent) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) guildevent.OrderOption
	toCursor func(*GuildEvent) Cursor
}

// GuildEventOrder defines the ordering of GuildEvent.
type GuildEventOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *GuildEventOrderField `json:"field"`
}

// DefaultGuildEventOrder is the default ordering of GuildEvent.
var DefaultGuildEventOrder = &GuildEventOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &GuildEventOrderField{
		Value: func(ge *GuildEvent) (ent.Value, error) {
			return ge.ID, nil
		},
		column: guildevent.FieldID,
		toTerm: guildevent.ByID,
		toCursor: func(ge *GuildEvent) Cursor {
			return Cursor{ID: ge.ID}
		},
	},
}

// ToEdge converts GuildEvent into GuildEventEdge.
func (ge *GuildEvent) ToEdge(order *GuildEventOrder) *GuildEventEdge {
	if order == nil {
		order = DefaultGuildEventOrder
	}
	return &GuildEventEdge{
		Node:   ge,
		Cursor: order.Field.toCursor(ge),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   *UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultUserOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldUsername orders User by username.
	UserOrderFieldUsername = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Username, nil
		},
		column: user.FieldUsername,
		toTerm: user.ByUsername,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Username,
			}
		},
	}
	// UserOrderFieldDiscriminator orders User by discriminator.
	UserOrderFieldDiscriminator = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Discriminator, nil
		},
		column: user.FieldDiscriminator,
		toTerm: user.ByDiscriminator,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Discriminator,
			}
		},
	}
	// UserOrderFieldEmail orders User by email.
	UserOrderFieldEmail = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Email, nil
		},
		column: user.FieldEmail,
		toTerm: user.ByEmail,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Email,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldUsername.column:
		str = "USERNAME"
	case UserOrderFieldDiscriminator.column:
		str = "DISCRIMINATOR"
	case UserOrderFieldEmail.column:
		str = "EMAIL"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "USERNAME":
		*f = *UserOrderFieldUsername
	case "DISCRIMINATOR":
		*f = *UserOrderFieldDiscriminator
	case "EMAIL":
		*f = *UserOrderFieldEmail
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
