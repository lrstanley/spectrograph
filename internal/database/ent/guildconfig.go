// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lrstanley/spectrograph/internal/database/ent/guild"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildconfig"
)

// GuildConfig is the model entity for the GuildConfig schema.
type GuildConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// True if the guild should be monitored/acted upon.
	Enabled bool `json:"enabled,omitempty"`
	// Default max cloned channels for the guild.
	DefaultMaxClones int `json:"default_max_clones,omitempty"`
	// Regex match for channel names.
	RegexMatch string `json:"regex_match,omitempty"`
	// Contact email for the guild.
	ContactEmail string `json:"contact_email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuildConfigQuery when eager-loading is set.
	Edges              GuildConfigEdges `json:"edges"`
	guild_guild_config *int
	selectValues       sql.SelectValues
}

// GuildConfigEdges holds the relations/edges for other nodes in the graph.
type GuildConfigEdges struct {
	// The guild these settings belong to.
	Guild *Guild `json:"guild,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuildConfigEdges) GuildOrErr() (*Guild, error) {
	if e.loadedTypes[0] {
		if e.Guild == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: guild.Label}
		}
		return e.Guild, nil
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GuildConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guildconfig.FieldEnabled:
			values[i] = new(sql.NullBool)
		case guildconfig.FieldID, guildconfig.FieldDefaultMaxClones:
			values[i] = new(sql.NullInt64)
		case guildconfig.FieldRegexMatch, guildconfig.FieldContactEmail:
			values[i] = new(sql.NullString)
		case guildconfig.FieldCreateTime, guildconfig.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case guildconfig.ForeignKeys[0]: // guild_guild_config
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GuildConfig fields.
func (gc *GuildConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guildconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gc.ID = int(value.Int64)
		case guildconfig.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				gc.CreateTime = value.Time
			}
		case guildconfig.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				gc.UpdateTime = value.Time
			}
		case guildconfig.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				gc.Enabled = value.Bool
			}
		case guildconfig.FieldDefaultMaxClones:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_max_clones", values[i])
			} else if value.Valid {
				gc.DefaultMaxClones = int(value.Int64)
			}
		case guildconfig.FieldRegexMatch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field regex_match", values[i])
			} else if value.Valid {
				gc.RegexMatch = value.String
			}
		case guildconfig.FieldContactEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_email", values[i])
			} else if value.Valid {
				gc.ContactEmail = value.String
			}
		case guildconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field guild_guild_config", value)
			} else if value.Valid {
				gc.guild_guild_config = new(int)
				*gc.guild_guild_config = int(value.Int64)
			}
		default:
			gc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GuildConfig.
// This includes values selected through modifiers, order, etc.
func (gc *GuildConfig) Value(name string) (ent.Value, error) {
	return gc.selectValues.Get(name)
}

// QueryGuild queries the "guild" edge of the GuildConfig entity.
func (gc *GuildConfig) QueryGuild() *GuildQuery {
	return NewGuildConfigClient(gc.config).QueryGuild(gc)
}

// Update returns a builder for updating this GuildConfig.
// Note that you need to call GuildConfig.Unwrap() before calling this method if this GuildConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (gc *GuildConfig) Update() *GuildConfigUpdateOne {
	return NewGuildConfigClient(gc.config).UpdateOne(gc)
}

// Unwrap unwraps the GuildConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gc *GuildConfig) Unwrap() *GuildConfig {
	_tx, ok := gc.config.driver.(*txDriver)
	if !ok {
		panic("ent: GuildConfig is not a transactional entity")
	}
	gc.config.driver = _tx.drv
	return gc
}

// String implements the fmt.Stringer.
func (gc *GuildConfig) String() string {
	var builder strings.Builder
	builder.WriteString("GuildConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gc.ID))
	builder.WriteString("create_time=")
	builder.WriteString(gc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(gc.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", gc.Enabled))
	builder.WriteString(", ")
	builder.WriteString("default_max_clones=")
	builder.WriteString(fmt.Sprintf("%v", gc.DefaultMaxClones))
	builder.WriteString(", ")
	builder.WriteString("regex_match=")
	builder.WriteString(gc.RegexMatch)
	builder.WriteString(", ")
	builder.WriteString("contact_email=")
	builder.WriteString(gc.ContactEmail)
	builder.WriteByte(')')
	return builder.String()
}

// GuildConfigs is a parsable slice of GuildConfig.
type GuildConfigs []*GuildConfig
