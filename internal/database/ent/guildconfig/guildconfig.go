// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package guildconfig

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the guildconfig type in the database.
	Label = "guild_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldDefaultMaxClones holds the string denoting the default_max_clones field in the database.
	FieldDefaultMaxClones = "default_max_clones"
	// FieldRegexMatch holds the string denoting the regex_match field in the database.
	FieldRegexMatch = "regex_match"
	// FieldContactEmail holds the string denoting the contact_email field in the database.
	FieldContactEmail = "contact_email"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// Table holds the table name of the guildconfig in the database.
	Table = "guild_configs"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "guild_configs"
	// GuildInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildInverseTable = "guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "guild_guild_config"
)

// Columns holds all SQL columns for guildconfig fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldEnabled,
	FieldDefaultMaxClones,
	FieldRegexMatch,
	FieldContactEmail,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "guild_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"guild_guild_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/lrstanley/spectrograph/internal/database/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultDefaultMaxClones holds the default value on creation for the "default_max_clones" field.
	DefaultDefaultMaxClones int
	// DefaultMaxClonesValidator is a validator for the "default_max_clones" field. It is called by the builders before save.
	DefaultMaxClonesValidator func(int) error
	// DefaultRegexMatch holds the default value on creation for the "regex_match" field.
	DefaultRegexMatch string
	// RegexMatchValidator is a validator for the "regex_match" field. It is called by the builders before save.
	RegexMatchValidator func(string) error
	// DefaultContactEmail holds the default value on creation for the "contact_email" field.
	DefaultContactEmail string
	// ContactEmailValidator is a validator for the "contact_email" field. It is called by the builders before save.
	ContactEmailValidator func(string) error
)

// OrderOption defines the ordering options for the GuildConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByDefaultMaxClones orders the results by the default_max_clones field.
func ByDefaultMaxClones(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultMaxClones, opts...).ToFunc()
}

// ByRegexMatch orders the results by the regex_match field.
func ByRegexMatch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegexMatch, opts...).ToFunc()
}

// ByContactEmail orders the results by the contact_email field.
func ByContactEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactEmail, opts...).ToFunc()
}

// ByGuildField orders the results by guild field.
func ByGuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildStep(), sql.OrderByField(field, opts...))
	}
}
func newGuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, GuildTable, GuildColumn),
	)
}
