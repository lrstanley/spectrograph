// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/lrstanley/spectrograph/internal/database/ent/guild"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/database/ent/user"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gu *GuildQuery) CollectFields(ctx context.Context, satisfies ...string) (*GuildQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gu, nil
	}
	if err := gu.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gu, nil
}

func (gu *GuildQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(guild.Columns))
		selectedFields = []string{guild.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "guildConfig":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GuildConfigClient{config: gu.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gu.withGuildConfig = query
		case "guildAdminConfig":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GuildAdminConfigClient{config: gu.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gu.withGuildAdminConfig = query
		case "guildEvents":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GuildEventClient{config: gu.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gu.WithNamedGuildEvents(alias, func(wq *GuildEventQuery) {
				*wq = *query
			})
		case "admins":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: gu.config}).Query()
			)
			args := newUserPaginateArgs(fieldArgs(ctx, new(UserWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newUserPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					gu.loadTotal = append(gu.loadTotal, func(ctx context.Context, nodes []*Guild) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"guild_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(guild.AdminsTable)
							s.Join(joinT).On(s.C(user.FieldID), joinT.C(guild.AdminsPrimaryKey[0]))
							s.Where(sql.InValues(joinT.C(guild.AdminsPrimaryKey[1]), ids...))
							s.Select(joinT.C(guild.AdminsPrimaryKey[1]), sql.Count("*"))
							s.GroupBy(joinT.C(guild.AdminsPrimaryKey[1]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				} else {
					gu.loadTotal = append(gu.loadTotal, func(_ context.Context, nodes []*Guild) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Admins)
							if nodes[i].Edges.totalCount[3] == nil {
								nodes[i].Edges.totalCount[3] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[3][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(guild.AdminsPrimaryKey[1], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			gu.WithNamedAdmins(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "createTime":
			if _, ok := fieldSeen[guild.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, guild.FieldCreateTime)
				fieldSeen[guild.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[guild.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, guild.FieldUpdateTime)
				fieldSeen[guild.FieldUpdateTime] = struct{}{}
			}
		case "guildID":
			if _, ok := fieldSeen[guild.FieldGuildID]; !ok {
				selectedFields = append(selectedFields, guild.FieldGuildID)
				fieldSeen[guild.FieldGuildID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[guild.FieldName]; !ok {
				selectedFields = append(selectedFields, guild.FieldName)
				fieldSeen[guild.FieldName] = struct{}{}
			}
		case "features":
			if _, ok := fieldSeen[guild.FieldFeatures]; !ok {
				selectedFields = append(selectedFields, guild.FieldFeatures)
				fieldSeen[guild.FieldFeatures] = struct{}{}
			}
		case "iconHash":
			if _, ok := fieldSeen[guild.FieldIconHash]; !ok {
				selectedFields = append(selectedFields, guild.FieldIconHash)
				fieldSeen[guild.FieldIconHash] = struct{}{}
			}
		case "iconURL":
			if _, ok := fieldSeen[guild.FieldIconURL]; !ok {
				selectedFields = append(selectedFields, guild.FieldIconURL)
				fieldSeen[guild.FieldIconURL] = struct{}{}
			}
		case "joinedAt":
			if _, ok := fieldSeen[guild.FieldJoinedAt]; !ok {
				selectedFields = append(selectedFields, guild.FieldJoinedAt)
				fieldSeen[guild.FieldJoinedAt] = struct{}{}
			}
		case "large":
			if _, ok := fieldSeen[guild.FieldLarge]; !ok {
				selectedFields = append(selectedFields, guild.FieldLarge)
				fieldSeen[guild.FieldLarge] = struct{}{}
			}
		case "memberCount":
			if _, ok := fieldSeen[guild.FieldMemberCount]; !ok {
				selectedFields = append(selectedFields, guild.FieldMemberCount)
				fieldSeen[guild.FieldMemberCount] = struct{}{}
			}
		case "ownerID":
			if _, ok := fieldSeen[guild.FieldOwnerID]; !ok {
				selectedFields = append(selectedFields, guild.FieldOwnerID)
				fieldSeen[guild.FieldOwnerID] = struct{}{}
			}
		case "permissions":
			if _, ok := fieldSeen[guild.FieldPermissions]; !ok {
				selectedFields = append(selectedFields, guild.FieldPermissions)
				fieldSeen[guild.FieldPermissions] = struct{}{}
			}
		case "systemChannelFlags":
			if _, ok := fieldSeen[guild.FieldSystemChannelFlags]; !ok {
				selectedFields = append(selectedFields, guild.FieldSystemChannelFlags)
				fieldSeen[guild.FieldSystemChannelFlags] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gu.Select(selectedFields...)
	}
	return nil
}

type guildPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GuildPaginateOption
}

func newGuildPaginateArgs(rv map[string]interface{}) *guildPaginateArgs {
	args := &guildPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GuildOrder{Field: &GuildOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGuildOrder(order))
			}
		case *GuildOrder:
			if v != nil {
				args.opts = append(args.opts, WithGuildOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GuildWhereInput); ok {
		args.opts = append(args.opts, WithGuildFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gac *GuildAdminConfigQuery) CollectFields(ctx context.Context, satisfies ...string) (*GuildAdminConfigQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gac, nil
	}
	if err := gac.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gac, nil
}

func (gac *GuildAdminConfigQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(guildadminconfig.Columns))
		selectedFields = []string{guildadminconfig.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "guild":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GuildClient{config: gac.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gac.withGuild = query
		case "createTime":
			if _, ok := fieldSeen[guildadminconfig.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, guildadminconfig.FieldCreateTime)
				fieldSeen[guildadminconfig.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[guildadminconfig.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, guildadminconfig.FieldUpdateTime)
				fieldSeen[guildadminconfig.FieldUpdateTime] = struct{}{}
			}
		case "enabled":
			if _, ok := fieldSeen[guildadminconfig.FieldEnabled]; !ok {
				selectedFields = append(selectedFields, guildadminconfig.FieldEnabled)
				fieldSeen[guildadminconfig.FieldEnabled] = struct{}{}
			}
		case "defaultMaxChannels":
			if _, ok := fieldSeen[guildadminconfig.FieldDefaultMaxChannels]; !ok {
				selectedFields = append(selectedFields, guildadminconfig.FieldDefaultMaxChannels)
				fieldSeen[guildadminconfig.FieldDefaultMaxChannels] = struct{}{}
			}
		case "defaultMaxClones":
			if _, ok := fieldSeen[guildadminconfig.FieldDefaultMaxClones]; !ok {
				selectedFields = append(selectedFields, guildadminconfig.FieldDefaultMaxClones)
				fieldSeen[guildadminconfig.FieldDefaultMaxClones] = struct{}{}
			}
		case "comment":
			if _, ok := fieldSeen[guildadminconfig.FieldComment]; !ok {
				selectedFields = append(selectedFields, guildadminconfig.FieldComment)
				fieldSeen[guildadminconfig.FieldComment] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gac.Select(selectedFields...)
	}
	return nil
}

type guildadminconfigPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GuildAdminConfigPaginateOption
}

func newGuildAdminConfigPaginateArgs(rv map[string]interface{}) *guildadminconfigPaginateArgs {
	args := &guildadminconfigPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GuildAdminConfigWhereInput); ok {
		args.opts = append(args.opts, WithGuildAdminConfigFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gc *GuildConfigQuery) CollectFields(ctx context.Context, satisfies ...string) (*GuildConfigQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gc, nil
	}
	if err := gc.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gc, nil
}

func (gc *GuildConfigQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(guildconfig.Columns))
		selectedFields = []string{guildconfig.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "guild":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GuildClient{config: gc.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			gc.withGuild = query
		case "createTime":
			if _, ok := fieldSeen[guildconfig.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, guildconfig.FieldCreateTime)
				fieldSeen[guildconfig.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[guildconfig.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, guildconfig.FieldUpdateTime)
				fieldSeen[guildconfig.FieldUpdateTime] = struct{}{}
			}
		case "enabled":
			if _, ok := fieldSeen[guildconfig.FieldEnabled]; !ok {
				selectedFields = append(selectedFields, guildconfig.FieldEnabled)
				fieldSeen[guildconfig.FieldEnabled] = struct{}{}
			}
		case "defaultMaxClones":
			if _, ok := fieldSeen[guildconfig.FieldDefaultMaxClones]; !ok {
				selectedFields = append(selectedFields, guildconfig.FieldDefaultMaxClones)
				fieldSeen[guildconfig.FieldDefaultMaxClones] = struct{}{}
			}
		case "regexMatch":
			if _, ok := fieldSeen[guildconfig.FieldRegexMatch]; !ok {
				selectedFields = append(selectedFields, guildconfig.FieldRegexMatch)
				fieldSeen[guildconfig.FieldRegexMatch] = struct{}{}
			}
		case "contactEmail":
			if _, ok := fieldSeen[guildconfig.FieldContactEmail]; !ok {
				selectedFields = append(selectedFields, guildconfig.FieldContactEmail)
				fieldSeen[guildconfig.FieldContactEmail] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gc.Select(selectedFields...)
	}
	return nil
}

type guildconfigPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GuildConfigPaginateOption
}

func newGuildConfigPaginateArgs(rv map[string]interface{}) *guildconfigPaginateArgs {
	args := &guildconfigPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GuildConfigWhereInput); ok {
		args.opts = append(args.opts, WithGuildConfigFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ge *GuildEventQuery) CollectFields(ctx context.Context, satisfies ...string) (*GuildEventQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ge, nil
	}
	if err := ge.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ge, nil
}

func (ge *GuildEventQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(guildevent.Columns))
		selectedFields = []string{guildevent.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "guild":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GuildClient{config: ge.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ge.withGuild = query
		case "createTime":
			if _, ok := fieldSeen[guildevent.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, guildevent.FieldCreateTime)
				fieldSeen[guildevent.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[guildevent.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, guildevent.FieldUpdateTime)
				fieldSeen[guildevent.FieldUpdateTime] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[guildevent.FieldType]; !ok {
				selectedFields = append(selectedFields, guildevent.FieldType)
				fieldSeen[guildevent.FieldType] = struct{}{}
			}
		case "message":
			if _, ok := fieldSeen[guildevent.FieldMessage]; !ok {
				selectedFields = append(selectedFields, guildevent.FieldMessage)
				fieldSeen[guildevent.FieldMessage] = struct{}{}
			}
		case "metadata":
			if _, ok := fieldSeen[guildevent.FieldMetadata]; !ok {
				selectedFields = append(selectedFields, guildevent.FieldMetadata)
				fieldSeen[guildevent.FieldMetadata] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ge.Select(selectedFields...)
	}
	return nil
}

type guildeventPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GuildEventPaginateOption
}

func newGuildEventPaginateArgs(rv map[string]interface{}) *guildeventPaginateArgs {
	args := &guildeventPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &GuildEventOrder{Field: &GuildEventOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithGuildEventOrder(order))
			}
		case *GuildEventOrder:
			if v != nil {
				args.opts = append(args.opts, WithGuildEventOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*GuildEventWhereInput); ok {
		args.opts = append(args.opts, WithGuildEventFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "userGuilds":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GuildClient{config: u.config}).Query()
			)
			args := newGuildPaginateArgs(fieldArgs(ctx, new(GuildWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newGuildPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					u.loadTotal = append(u.loadTotal, func(ctx context.Context, nodes []*User) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"user_id"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							joinT := sql.Table(user.UserGuildsTable)
							s.Join(joinT).On(s.C(guild.FieldID), joinT.C(user.UserGuildsPrimaryKey[1]))
							s.Where(sql.InValues(joinT.C(user.UserGuildsPrimaryKey[0]), ids...))
							s.Select(joinT.C(user.UserGuildsPrimaryKey[0]), sql.Count("*"))
							s.GroupBy(joinT.C(user.UserGuildsPrimaryKey[0]))
						})
						if err := query.Select().Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					u.loadTotal = append(u.loadTotal, func(_ context.Context, nodes []*User) error {
						for i := range nodes {
							n := len(nodes[i].Edges.UserGuilds)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, satisfies...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(user.UserGuildsPrimaryKey[0], limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			u.WithNamedUserGuilds(alias, func(wq *GuildQuery) {
				*wq = *query
			})
		case "bannedUsers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedBannedUsers(alias, func(wq *UserQuery) {
				*wq = *query
			})
		case "bannedBy":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.withBannedBy = query
		case "createTime":
			if _, ok := fieldSeen[user.FieldCreateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldCreateTime)
				fieldSeen[user.FieldCreateTime] = struct{}{}
			}
		case "updateTime":
			if _, ok := fieldSeen[user.FieldUpdateTime]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdateTime)
				fieldSeen[user.FieldUpdateTime] = struct{}{}
			}
		case "userID":
			if _, ok := fieldSeen[user.FieldUserID]; !ok {
				selectedFields = append(selectedFields, user.FieldUserID)
				fieldSeen[user.FieldUserID] = struct{}{}
			}
		case "admin":
			if _, ok := fieldSeen[user.FieldAdmin]; !ok {
				selectedFields = append(selectedFields, user.FieldAdmin)
				fieldSeen[user.FieldAdmin] = struct{}{}
			}
		case "banned":
			if _, ok := fieldSeen[user.FieldBanned]; !ok {
				selectedFields = append(selectedFields, user.FieldBanned)
				fieldSeen[user.FieldBanned] = struct{}{}
			}
		case "banReason":
			if _, ok := fieldSeen[user.FieldBanReason]; !ok {
				selectedFields = append(selectedFields, user.FieldBanReason)
				fieldSeen[user.FieldBanReason] = struct{}{}
			}
		case "username":
			if _, ok := fieldSeen[user.FieldUsername]; !ok {
				selectedFields = append(selectedFields, user.FieldUsername)
				fieldSeen[user.FieldUsername] = struct{}{}
			}
		case "discriminator":
			if _, ok := fieldSeen[user.FieldDiscriminator]; !ok {
				selectedFields = append(selectedFields, user.FieldDiscriminator)
				fieldSeen[user.FieldDiscriminator] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "avatarHash":
			if _, ok := fieldSeen[user.FieldAvatarHash]; !ok {
				selectedFields = append(selectedFields, user.FieldAvatarHash)
				fieldSeen[user.FieldAvatarHash] = struct{}{}
			}
		case "avatarURL":
			if _, ok := fieldSeen[user.FieldAvatarURL]; !ok {
				selectedFields = append(selectedFields, user.FieldAvatarURL)
				fieldSeen[user.FieldAvatarURL] = struct{}{}
			}
		case "locale":
			if _, ok := fieldSeen[user.FieldLocale]; !ok {
				selectedFields = append(selectedFields, user.FieldLocale)
				fieldSeen[user.FieldLocale] = struct{}{}
			}
		case "bot":
			if _, ok := fieldSeen[user.FieldBot]; !ok {
				selectedFields = append(selectedFields, user.FieldBot)
				fieldSeen[user.FieldBot] = struct{}{}
			}
		case "system":
			if _, ok := fieldSeen[user.FieldSystem]; !ok {
				selectedFields = append(selectedFields, user.FieldSystem)
				fieldSeen[user.FieldSystem] = struct{}{}
			}
		case "mfaEnabled":
			if _, ok := fieldSeen[user.FieldMfaEnabled]; !ok {
				selectedFields = append(selectedFields, user.FieldMfaEnabled)
				fieldSeen[user.FieldMfaEnabled] = struct{}{}
			}
		case "verified":
			if _, ok := fieldSeen[user.FieldVerified]; !ok {
				selectedFields = append(selectedFields, user.FieldVerified)
				fieldSeen[user.FieldVerified] = struct{}{}
			}
		case "flags":
			if _, ok := fieldSeen[user.FieldFlags]; !ok {
				selectedFields = append(selectedFields, user.FieldFlags)
				fieldSeen[user.FieldFlags] = struct{}{}
			}
		case "premiumType":
			if _, ok := fieldSeen[user.FieldPremiumType]; !ok {
				selectedFields = append(selectedFields, user.FieldPremiumType)
				fieldSeen[user.FieldPremiumType] = struct{}{}
			}
		case "publicFlags":
			if _, ok := fieldSeen[user.FieldPublicFlags]; !ok {
				selectedFields = append(selectedFields, user.FieldPublicFlags)
				fieldSeen[user.FieldPublicFlags] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]interface{}) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]interface{}:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput interface{}, path ...string) map[string]interface{} {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	for _, name := range path {
		var field *graphql.CollectedField
		for _, f := range graphql.CollectFields(oc, fc.Field.Selections, nil) {
			if f.Alias == name {
				field = &f
				break
			}
		}
		if field == nil {
			return nil
		}
		cf, err := fc.Child(ctx, *field)
		if err != nil {
			args := field.ArgumentMap(oc.Variables)
			return unmarshalArgs(ctx, whereInput, args)
		}
		fc = cf
	}
	return fc.Args
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput interface{}, args map[string]interface{}) map[string]interface{} {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}
