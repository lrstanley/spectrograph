// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/spectrograph/internal/database/ent/guild"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/database/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/database/ent/user"
)

// GuildCreate is the builder for creating a Guild entity.
type GuildCreate struct {
	config
	mutation *GuildMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (gc *GuildCreate) SetCreateTime(t time.Time) *GuildCreate {
	gc.mutation.SetCreateTime(t)
	return gc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (gc *GuildCreate) SetNillableCreateTime(t *time.Time) *GuildCreate {
	if t != nil {
		gc.SetCreateTime(*t)
	}
	return gc
}

// SetUpdateTime sets the "update_time" field.
func (gc *GuildCreate) SetUpdateTime(t time.Time) *GuildCreate {
	gc.mutation.SetUpdateTime(t)
	return gc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (gc *GuildCreate) SetNillableUpdateTime(t *time.Time) *GuildCreate {
	if t != nil {
		gc.SetUpdateTime(*t)
	}
	return gc
}

// SetGuildID sets the "guild_id" field.
func (gc *GuildCreate) SetGuildID(s string) *GuildCreate {
	gc.mutation.SetGuildID(s)
	return gc
}

// SetName sets the "name" field.
func (gc *GuildCreate) SetName(s string) *GuildCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetFeatures sets the "features" field.
func (gc *GuildCreate) SetFeatures(s []string) *GuildCreate {
	gc.mutation.SetFeatures(s)
	return gc
}

// SetIconHash sets the "icon_hash" field.
func (gc *GuildCreate) SetIconHash(s string) *GuildCreate {
	gc.mutation.SetIconHash(s)
	return gc
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (gc *GuildCreate) SetNillableIconHash(s *string) *GuildCreate {
	if s != nil {
		gc.SetIconHash(*s)
	}
	return gc
}

// SetIconURL sets the "icon_url" field.
func (gc *GuildCreate) SetIconURL(s string) *GuildCreate {
	gc.mutation.SetIconURL(s)
	return gc
}

// SetJoinedAt sets the "joined_at" field.
func (gc *GuildCreate) SetJoinedAt(t time.Time) *GuildCreate {
	gc.mutation.SetJoinedAt(t)
	return gc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (gc *GuildCreate) SetNillableJoinedAt(t *time.Time) *GuildCreate {
	if t != nil {
		gc.SetJoinedAt(*t)
	}
	return gc
}

// SetLarge sets the "large" field.
func (gc *GuildCreate) SetLarge(b bool) *GuildCreate {
	gc.mutation.SetLarge(b)
	return gc
}

// SetNillableLarge sets the "large" field if the given value is not nil.
func (gc *GuildCreate) SetNillableLarge(b *bool) *GuildCreate {
	if b != nil {
		gc.SetLarge(*b)
	}
	return gc
}

// SetMemberCount sets the "member_count" field.
func (gc *GuildCreate) SetMemberCount(i int) *GuildCreate {
	gc.mutation.SetMemberCount(i)
	return gc
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (gc *GuildCreate) SetNillableMemberCount(i *int) *GuildCreate {
	if i != nil {
		gc.SetMemberCount(*i)
	}
	return gc
}

// SetOwnerID sets the "owner_id" field.
func (gc *GuildCreate) SetOwnerID(s string) *GuildCreate {
	gc.mutation.SetOwnerID(s)
	return gc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (gc *GuildCreate) SetNillableOwnerID(s *string) *GuildCreate {
	if s != nil {
		gc.SetOwnerID(*s)
	}
	return gc
}

// SetPermissions sets the "permissions" field.
func (gc *GuildCreate) SetPermissions(u uint64) *GuildCreate {
	gc.mutation.SetPermissions(u)
	return gc
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (gc *GuildCreate) SetNillablePermissions(u *uint64) *GuildCreate {
	if u != nil {
		gc.SetPermissions(*u)
	}
	return gc
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (gc *GuildCreate) SetSystemChannelFlags(s string) *GuildCreate {
	gc.mutation.SetSystemChannelFlags(s)
	return gc
}

// SetNillableSystemChannelFlags sets the "system_channel_flags" field if the given value is not nil.
func (gc *GuildCreate) SetNillableSystemChannelFlags(s *string) *GuildCreate {
	if s != nil {
		gc.SetSystemChannelFlags(*s)
	}
	return gc
}

// SetGuildConfigID sets the "guild_config" edge to the GuildConfig entity by ID.
func (gc *GuildCreate) SetGuildConfigID(id int) *GuildCreate {
	gc.mutation.SetGuildConfigID(id)
	return gc
}

// SetNillableGuildConfigID sets the "guild_config" edge to the GuildConfig entity by ID if the given value is not nil.
func (gc *GuildCreate) SetNillableGuildConfigID(id *int) *GuildCreate {
	if id != nil {
		gc = gc.SetGuildConfigID(*id)
	}
	return gc
}

// SetGuildConfig sets the "guild_config" edge to the GuildConfig entity.
func (gc *GuildCreate) SetGuildConfig(g *GuildConfig) *GuildCreate {
	return gc.SetGuildConfigID(g.ID)
}

// SetGuildAdminConfigID sets the "guild_admin_config" edge to the GuildAdminConfig entity by ID.
func (gc *GuildCreate) SetGuildAdminConfigID(id int) *GuildCreate {
	gc.mutation.SetGuildAdminConfigID(id)
	return gc
}

// SetNillableGuildAdminConfigID sets the "guild_admin_config" edge to the GuildAdminConfig entity by ID if the given value is not nil.
func (gc *GuildCreate) SetNillableGuildAdminConfigID(id *int) *GuildCreate {
	if id != nil {
		gc = gc.SetGuildAdminConfigID(*id)
	}
	return gc
}

// SetGuildAdminConfig sets the "guild_admin_config" edge to the GuildAdminConfig entity.
func (gc *GuildCreate) SetGuildAdminConfig(g *GuildAdminConfig) *GuildCreate {
	return gc.SetGuildAdminConfigID(g.ID)
}

// AddGuildEventIDs adds the "guild_events" edge to the GuildEvent entity by IDs.
func (gc *GuildCreate) AddGuildEventIDs(ids ...int) *GuildCreate {
	gc.mutation.AddGuildEventIDs(ids...)
	return gc
}

// AddGuildEvents adds the "guild_events" edges to the GuildEvent entity.
func (gc *GuildCreate) AddGuildEvents(g ...*GuildEvent) *GuildCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gc.AddGuildEventIDs(ids...)
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (gc *GuildCreate) AddAdminIDs(ids ...int) *GuildCreate {
	gc.mutation.AddAdminIDs(ids...)
	return gc
}

// AddAdmins adds the "admins" edges to the User entity.
func (gc *GuildCreate) AddAdmins(u ...*User) *GuildCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddAdminIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (gc *GuildCreate) Mutation() *GuildMutation {
	return gc.mutation
}

// Save creates the Guild in the database.
func (gc *GuildCreate) Save(ctx context.Context) (*Guild, error) {
	if err := gc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Guild, GuildMutation](ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuildCreate) SaveX(ctx context.Context) *Guild {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GuildCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GuildCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GuildCreate) defaults() error {
	if _, ok := gc.mutation.CreateTime(); !ok {
		if guild.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized guild.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := guild.DefaultCreateTime()
		gc.mutation.SetCreateTime(v)
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		if guild.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guild.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guild.DefaultUpdateTime()
		gc.mutation.SetUpdateTime(v)
	}
	if _, ok := gc.mutation.Features(); !ok {
		v := guild.DefaultFeatures
		gc.mutation.SetFeatures(v)
	}
	if _, ok := gc.mutation.Large(); !ok {
		v := guild.DefaultLarge
		gc.mutation.SetLarge(v)
	}
	if _, ok := gc.mutation.MemberCount(); !ok {
		v := guild.DefaultMemberCount
		gc.mutation.SetMemberCount(v)
	}
	if _, ok := gc.mutation.Permissions(); !ok {
		v := guild.DefaultPermissions
		gc.mutation.SetPermissions(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gc *GuildCreate) check() error {
	if _, ok := gc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Guild.create_time"`)}
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Guild.update_time"`)}
	}
	if _, ok := gc.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild_id", err: errors.New(`ent: missing required field "Guild.guild_id"`)}
	}
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Guild.name"`)}
	}
	if v, ok := gc.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if v, ok := gc.mutation.IconHash(); ok {
		if err := guild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_hash": %w`, err)}
		}
	}
	if _, ok := gc.mutation.IconURL(); !ok {
		return &ValidationError{Name: "icon_url", err: errors.New(`ent: missing required field "Guild.icon_url"`)}
	}
	if v, ok := gc.mutation.IconURL(); ok {
		if err := guild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_url": %w`, err)}
		}
	}
	if v, ok := gc.mutation.SystemChannelFlags(); ok {
		if err := guild.SystemChannelFlagsValidator(v); err != nil {
			return &ValidationError{Name: "system_channel_flags", err: fmt.Errorf(`ent: validator failed for field "Guild.system_channel_flags": %w`, err)}
		}
	}
	return nil
}

func (gc *GuildCreate) sqlSave(ctx context.Context) (*Guild, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GuildCreate) createSpec() (*Guild, *sqlgraph.CreateSpec) {
	var (
		_node = &Guild{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(guild.Table, sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt))
	)
	_spec.OnConflict = gc.conflict
	if value, ok := gc.mutation.CreateTime(); ok {
		_spec.SetField(guild.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := gc.mutation.UpdateTime(); ok {
		_spec.SetField(guild.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := gc.mutation.GuildID(); ok {
		_spec.SetField(guild.FieldGuildID, field.TypeString, value)
		_node.GuildID = value
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(guild.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.Features(); ok {
		_spec.SetField(guild.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if value, ok := gc.mutation.IconHash(); ok {
		_spec.SetField(guild.FieldIconHash, field.TypeString, value)
		_node.IconHash = value
	}
	if value, ok := gc.mutation.IconURL(); ok {
		_spec.SetField(guild.FieldIconURL, field.TypeString, value)
		_node.IconURL = value
	}
	if value, ok := gc.mutation.JoinedAt(); ok {
		_spec.SetField(guild.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = &value
	}
	if value, ok := gc.mutation.Large(); ok {
		_spec.SetField(guild.FieldLarge, field.TypeBool, value)
		_node.Large = value
	}
	if value, ok := gc.mutation.MemberCount(); ok {
		_spec.SetField(guild.FieldMemberCount, field.TypeInt, value)
		_node.MemberCount = value
	}
	if value, ok := gc.mutation.OwnerID(); ok {
		_spec.SetField(guild.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := gc.mutation.Permissions(); ok {
		_spec.SetField(guild.FieldPermissions, field.TypeUint64, value)
		_node.Permissions = value
	}
	if value, ok := gc.mutation.SystemChannelFlags(); ok {
		_spec.SetField(guild.FieldSystemChannelFlags, field.TypeString, value)
		_node.SystemChannelFlags = value
	}
	if nodes := gc.mutation.GuildConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildConfigTable,
			Columns: []string{guild.GuildConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GuildAdminConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildAdminConfigTable,
			Columns: []string{guild.GuildAdminConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildadminconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GuildEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildEventsTable,
			Columns: []string{guild.GuildEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.AdminsTable,
			Columns: guild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Guild.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GuildUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (gc *GuildCreate) OnConflict(opts ...sql.ConflictOption) *GuildUpsertOne {
	gc.conflict = opts
	return &GuildUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Guild.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GuildCreate) OnConflictColumns(columns ...string) *GuildUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GuildUpsertOne{
		create: gc,
	}
}

type (
	// GuildUpsertOne is the builder for "upsert"-ing
	//  one Guild node.
	GuildUpsertOne struct {
		create *GuildCreate
	}

	// GuildUpsert is the "OnConflict" setter.
	GuildUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *GuildUpsert) SetUpdateTime(v time.Time) *GuildUpsert {
	u.Set(guild.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *GuildUpsert) UpdateUpdateTime() *GuildUpsert {
	u.SetExcluded(guild.FieldUpdateTime)
	return u
}

// SetName sets the "name" field.
func (u *GuildUpsert) SetName(v string) *GuildUpsert {
	u.Set(guild.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuildUpsert) UpdateName() *GuildUpsert {
	u.SetExcluded(guild.FieldName)
	return u
}

// SetFeatures sets the "features" field.
func (u *GuildUpsert) SetFeatures(v []string) *GuildUpsert {
	u.Set(guild.FieldFeatures, v)
	return u
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *GuildUpsert) UpdateFeatures() *GuildUpsert {
	u.SetExcluded(guild.FieldFeatures)
	return u
}

// ClearFeatures clears the value of the "features" field.
func (u *GuildUpsert) ClearFeatures() *GuildUpsert {
	u.SetNull(guild.FieldFeatures)
	return u
}

// SetIconHash sets the "icon_hash" field.
func (u *GuildUpsert) SetIconHash(v string) *GuildUpsert {
	u.Set(guild.FieldIconHash, v)
	return u
}

// UpdateIconHash sets the "icon_hash" field to the value that was provided on create.
func (u *GuildUpsert) UpdateIconHash() *GuildUpsert {
	u.SetExcluded(guild.FieldIconHash)
	return u
}

// ClearIconHash clears the value of the "icon_hash" field.
func (u *GuildUpsert) ClearIconHash() *GuildUpsert {
	u.SetNull(guild.FieldIconHash)
	return u
}

// SetIconURL sets the "icon_url" field.
func (u *GuildUpsert) SetIconURL(v string) *GuildUpsert {
	u.Set(guild.FieldIconURL, v)
	return u
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *GuildUpsert) UpdateIconURL() *GuildUpsert {
	u.SetExcluded(guild.FieldIconURL)
	return u
}

// SetJoinedAt sets the "joined_at" field.
func (u *GuildUpsert) SetJoinedAt(v time.Time) *GuildUpsert {
	u.Set(guild.FieldJoinedAt, v)
	return u
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *GuildUpsert) UpdateJoinedAt() *GuildUpsert {
	u.SetExcluded(guild.FieldJoinedAt)
	return u
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (u *GuildUpsert) ClearJoinedAt() *GuildUpsert {
	u.SetNull(guild.FieldJoinedAt)
	return u
}

// SetLarge sets the "large" field.
func (u *GuildUpsert) SetLarge(v bool) *GuildUpsert {
	u.Set(guild.FieldLarge, v)
	return u
}

// UpdateLarge sets the "large" field to the value that was provided on create.
func (u *GuildUpsert) UpdateLarge() *GuildUpsert {
	u.SetExcluded(guild.FieldLarge)
	return u
}

// ClearLarge clears the value of the "large" field.
func (u *GuildUpsert) ClearLarge() *GuildUpsert {
	u.SetNull(guild.FieldLarge)
	return u
}

// SetMemberCount sets the "member_count" field.
func (u *GuildUpsert) SetMemberCount(v int) *GuildUpsert {
	u.Set(guild.FieldMemberCount, v)
	return u
}

// UpdateMemberCount sets the "member_count" field to the value that was provided on create.
func (u *GuildUpsert) UpdateMemberCount() *GuildUpsert {
	u.SetExcluded(guild.FieldMemberCount)
	return u
}

// AddMemberCount adds v to the "member_count" field.
func (u *GuildUpsert) AddMemberCount(v int) *GuildUpsert {
	u.Add(guild.FieldMemberCount, v)
	return u
}

// ClearMemberCount clears the value of the "member_count" field.
func (u *GuildUpsert) ClearMemberCount() *GuildUpsert {
	u.SetNull(guild.FieldMemberCount)
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *GuildUpsert) SetOwnerID(v string) *GuildUpsert {
	u.Set(guild.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *GuildUpsert) UpdateOwnerID() *GuildUpsert {
	u.SetExcluded(guild.FieldOwnerID)
	return u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *GuildUpsert) ClearOwnerID() *GuildUpsert {
	u.SetNull(guild.FieldOwnerID)
	return u
}

// SetPermissions sets the "permissions" field.
func (u *GuildUpsert) SetPermissions(v uint64) *GuildUpsert {
	u.Set(guild.FieldPermissions, v)
	return u
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *GuildUpsert) UpdatePermissions() *GuildUpsert {
	u.SetExcluded(guild.FieldPermissions)
	return u
}

// AddPermissions adds v to the "permissions" field.
func (u *GuildUpsert) AddPermissions(v uint64) *GuildUpsert {
	u.Add(guild.FieldPermissions, v)
	return u
}

// ClearPermissions clears the value of the "permissions" field.
func (u *GuildUpsert) ClearPermissions() *GuildUpsert {
	u.SetNull(guild.FieldPermissions)
	return u
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (u *GuildUpsert) SetSystemChannelFlags(v string) *GuildUpsert {
	u.Set(guild.FieldSystemChannelFlags, v)
	return u
}

// UpdateSystemChannelFlags sets the "system_channel_flags" field to the value that was provided on create.
func (u *GuildUpsert) UpdateSystemChannelFlags() *GuildUpsert {
	u.SetExcluded(guild.FieldSystemChannelFlags)
	return u
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (u *GuildUpsert) ClearSystemChannelFlags() *GuildUpsert {
	u.SetNull(guild.FieldSystemChannelFlags)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Guild.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GuildUpsertOne) UpdateNewValues() *GuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(guild.FieldCreateTime)
		}
		if _, exists := u.create.mutation.GuildID(); exists {
			s.SetIgnore(guild.FieldGuildID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Guild.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GuildUpsertOne) Ignore() *GuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GuildUpsertOne) DoNothing() *GuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GuildCreate.OnConflict
// documentation for more info.
func (u *GuildUpsertOne) Update(set func(*GuildUpsert)) *GuildUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GuildUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *GuildUpsertOne) SetUpdateTime(v time.Time) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateUpdateTime() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *GuildUpsertOne) SetName(v string) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateName() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateName()
	})
}

// SetFeatures sets the "features" field.
func (u *GuildUpsertOne) SetFeatures(v []string) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetFeatures(v)
	})
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateFeatures() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateFeatures()
	})
}

// ClearFeatures clears the value of the "features" field.
func (u *GuildUpsertOne) ClearFeatures() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearFeatures()
	})
}

// SetIconHash sets the "icon_hash" field.
func (u *GuildUpsertOne) SetIconHash(v string) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetIconHash(v)
	})
}

// UpdateIconHash sets the "icon_hash" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateIconHash() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateIconHash()
	})
}

// ClearIconHash clears the value of the "icon_hash" field.
func (u *GuildUpsertOne) ClearIconHash() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearIconHash()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *GuildUpsertOne) SetIconURL(v string) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateIconURL() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateIconURL()
	})
}

// SetJoinedAt sets the "joined_at" field.
func (u *GuildUpsertOne) SetJoinedAt(v time.Time) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetJoinedAt(v)
	})
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateJoinedAt() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateJoinedAt()
	})
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (u *GuildUpsertOne) ClearJoinedAt() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearJoinedAt()
	})
}

// SetLarge sets the "large" field.
func (u *GuildUpsertOne) SetLarge(v bool) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetLarge(v)
	})
}

// UpdateLarge sets the "large" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateLarge() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateLarge()
	})
}

// ClearLarge clears the value of the "large" field.
func (u *GuildUpsertOne) ClearLarge() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearLarge()
	})
}

// SetMemberCount sets the "member_count" field.
func (u *GuildUpsertOne) SetMemberCount(v int) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetMemberCount(v)
	})
}

// AddMemberCount adds v to the "member_count" field.
func (u *GuildUpsertOne) AddMemberCount(v int) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.AddMemberCount(v)
	})
}

// UpdateMemberCount sets the "member_count" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateMemberCount() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateMemberCount()
	})
}

// ClearMemberCount clears the value of the "member_count" field.
func (u *GuildUpsertOne) ClearMemberCount() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearMemberCount()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *GuildUpsertOne) SetOwnerID(v string) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateOwnerID() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *GuildUpsertOne) ClearOwnerID() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearOwnerID()
	})
}

// SetPermissions sets the "permissions" field.
func (u *GuildUpsertOne) SetPermissions(v uint64) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetPermissions(v)
	})
}

// AddPermissions adds v to the "permissions" field.
func (u *GuildUpsertOne) AddPermissions(v uint64) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.AddPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdatePermissions() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *GuildUpsertOne) ClearPermissions() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearPermissions()
	})
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (u *GuildUpsertOne) SetSystemChannelFlags(v string) *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.SetSystemChannelFlags(v)
	})
}

// UpdateSystemChannelFlags sets the "system_channel_flags" field to the value that was provided on create.
func (u *GuildUpsertOne) UpdateSystemChannelFlags() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateSystemChannelFlags()
	})
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (u *GuildUpsertOne) ClearSystemChannelFlags() *GuildUpsertOne {
	return u.Update(func(s *GuildUpsert) {
		s.ClearSystemChannelFlags()
	})
}

// Exec executes the query.
func (u *GuildUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GuildCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GuildUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GuildUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GuildUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GuildCreateBulk is the builder for creating many Guild entities in bulk.
type GuildCreateBulk struct {
	config
	builders []*GuildCreate
	conflict []sql.ConflictOption
}

// Save creates the Guild entities in the database.
func (gcb *GuildCreateBulk) Save(ctx context.Context) ([]*Guild, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Guild, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuildMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GuildCreateBulk) SaveX(ctx context.Context) []*Guild {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GuildCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GuildCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Guild.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GuildUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (gcb *GuildCreateBulk) OnConflict(opts ...sql.ConflictOption) *GuildUpsertBulk {
	gcb.conflict = opts
	return &GuildUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Guild.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GuildCreateBulk) OnConflictColumns(columns ...string) *GuildUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GuildUpsertBulk{
		create: gcb,
	}
}

// GuildUpsertBulk is the builder for "upsert"-ing
// a bulk of Guild nodes.
type GuildUpsertBulk struct {
	create *GuildCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Guild.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GuildUpsertBulk) UpdateNewValues() *GuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(guild.FieldCreateTime)
			}
			if _, exists := b.mutation.GuildID(); exists {
				s.SetIgnore(guild.FieldGuildID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Guild.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GuildUpsertBulk) Ignore() *GuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GuildUpsertBulk) DoNothing() *GuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GuildCreateBulk.OnConflict
// documentation for more info.
func (u *GuildUpsertBulk) Update(set func(*GuildUpsert)) *GuildUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GuildUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *GuildUpsertBulk) SetUpdateTime(v time.Time) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateUpdateTime() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetName sets the "name" field.
func (u *GuildUpsertBulk) SetName(v string) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateName() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateName()
	})
}

// SetFeatures sets the "features" field.
func (u *GuildUpsertBulk) SetFeatures(v []string) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetFeatures(v)
	})
}

// UpdateFeatures sets the "features" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateFeatures() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateFeatures()
	})
}

// ClearFeatures clears the value of the "features" field.
func (u *GuildUpsertBulk) ClearFeatures() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearFeatures()
	})
}

// SetIconHash sets the "icon_hash" field.
func (u *GuildUpsertBulk) SetIconHash(v string) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetIconHash(v)
	})
}

// UpdateIconHash sets the "icon_hash" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateIconHash() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateIconHash()
	})
}

// ClearIconHash clears the value of the "icon_hash" field.
func (u *GuildUpsertBulk) ClearIconHash() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearIconHash()
	})
}

// SetIconURL sets the "icon_url" field.
func (u *GuildUpsertBulk) SetIconURL(v string) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetIconURL(v)
	})
}

// UpdateIconURL sets the "icon_url" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateIconURL() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateIconURL()
	})
}

// SetJoinedAt sets the "joined_at" field.
func (u *GuildUpsertBulk) SetJoinedAt(v time.Time) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetJoinedAt(v)
	})
}

// UpdateJoinedAt sets the "joined_at" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateJoinedAt() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateJoinedAt()
	})
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (u *GuildUpsertBulk) ClearJoinedAt() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearJoinedAt()
	})
}

// SetLarge sets the "large" field.
func (u *GuildUpsertBulk) SetLarge(v bool) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetLarge(v)
	})
}

// UpdateLarge sets the "large" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateLarge() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateLarge()
	})
}

// ClearLarge clears the value of the "large" field.
func (u *GuildUpsertBulk) ClearLarge() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearLarge()
	})
}

// SetMemberCount sets the "member_count" field.
func (u *GuildUpsertBulk) SetMemberCount(v int) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetMemberCount(v)
	})
}

// AddMemberCount adds v to the "member_count" field.
func (u *GuildUpsertBulk) AddMemberCount(v int) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.AddMemberCount(v)
	})
}

// UpdateMemberCount sets the "member_count" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateMemberCount() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateMemberCount()
	})
}

// ClearMemberCount clears the value of the "member_count" field.
func (u *GuildUpsertBulk) ClearMemberCount() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearMemberCount()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *GuildUpsertBulk) SetOwnerID(v string) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateOwnerID() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *GuildUpsertBulk) ClearOwnerID() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearOwnerID()
	})
}

// SetPermissions sets the "permissions" field.
func (u *GuildUpsertBulk) SetPermissions(v uint64) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetPermissions(v)
	})
}

// AddPermissions adds v to the "permissions" field.
func (u *GuildUpsertBulk) AddPermissions(v uint64) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.AddPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdatePermissions() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *GuildUpsertBulk) ClearPermissions() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearPermissions()
	})
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (u *GuildUpsertBulk) SetSystemChannelFlags(v string) *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.SetSystemChannelFlags(v)
	})
}

// UpdateSystemChannelFlags sets the "system_channel_flags" field to the value that was provided on create.
func (u *GuildUpsertBulk) UpdateSystemChannelFlags() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.UpdateSystemChannelFlags()
	})
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (u *GuildUpsertBulk) ClearSystemChannelFlags() *GuildUpsertBulk {
	return u.Update(func(s *GuildUpsert) {
		s.ClearSystemChannelFlags()
	})
}

// Exec executes the query.
func (u *GuildUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GuildCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GuildCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GuildUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
