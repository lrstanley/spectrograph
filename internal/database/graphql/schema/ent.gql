directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Guild implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """Guild id."""
  guildID: String!
  """Guild name (2-100 chars, excl. trailing/leading spaces)."""
  name: String!
  """Enabled guild features."""
  features: [String!]
  """Icon hash."""
  iconHash: String
  iconURL: String!
  """When the bot joined the guild."""
  joinedAt: Time
  """True if the guild is considered large (according to Discord standards)."""
  large: Boolean
  """Total number of members in the guild."""
  memberCount: Int
  """Discord snowflake ID of the user that owns the guild."""
  ownerID: String
  """Permissions of the bot on this guild (excludes overrides)."""
  permissions: Uint64
  """System channel flags."""
  systemChannelFlags: String
  guildConfig: GuildConfig
  guildAdminConfig: GuildAdminConfig
  guildEvents: [GuildEvent!]
  admins(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type GuildAdminConfig implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """True if the guild should be monitored/acted upon (overrides user-defined settings)."""
  enabled: Boolean
  """Default max channels for the guild (overrides user-defined settings)."""
  defaultMaxChannels: Int
  """Default max clones for the guild (overrides user-defined settings)."""
  defaultMaxClones: Int
  """Admin comment for the guild."""
  comment: String
  guild: Guild!
}
"""A connection to a list of items."""
type GuildAdminConfigConnection {
  """A list of edges."""
  edges: [GuildAdminConfigEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GuildAdminConfigEdge {
  """The item at the end of the edge."""
  node: GuildAdminConfig
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
GuildAdminConfigWhereInput is used for filtering GuildAdminConfig objects.
Input was generated by ent.
"""
input GuildAdminConfigWhereInput {
  not: GuildAdminConfigWhereInput
  and: [GuildAdminConfigWhereInput!]
  or: [GuildAdminConfigWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  enabledIsNil: Boolean
  enabledNotNil: Boolean
  """default_max_channels field predicates"""
  defaultMaxChannels: Int
  defaultMaxChannelsNEQ: Int
  defaultMaxChannelsIn: [Int!]
  defaultMaxChannelsNotIn: [Int!]
  defaultMaxChannelsGT: Int
  defaultMaxChannelsGTE: Int
  defaultMaxChannelsLT: Int
  defaultMaxChannelsLTE: Int
  defaultMaxChannelsIsNil: Boolean
  defaultMaxChannelsNotNil: Boolean
  """default_max_clones field predicates"""
  defaultMaxClones: Int
  defaultMaxClonesNEQ: Int
  defaultMaxClonesIn: [Int!]
  defaultMaxClonesNotIn: [Int!]
  defaultMaxClonesGT: Int
  defaultMaxClonesGTE: Int
  defaultMaxClonesLT: Int
  defaultMaxClonesLTE: Int
  defaultMaxClonesIsNil: Boolean
  defaultMaxClonesNotNil: Boolean
  """comment field predicates"""
  comment: String
  commentNEQ: String
  commentIn: [String!]
  commentNotIn: [String!]
  commentGT: String
  commentGTE: String
  commentLT: String
  commentLTE: String
  commentContains: String
  commentHasPrefix: String
  commentHasSuffix: String
  commentIsNil: Boolean
  commentNotNil: Boolean
  commentEqualFold: String
  commentContainsFold: String
  """guild edge predicates"""
  hasGuild: Boolean
  hasGuildWith: [GuildWhereInput!]
}
type GuildConfig implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """True if the guild should be monitored/acted upon."""
  enabled: Boolean
  """Default max cloned channels for the guild."""
  defaultMaxClones: Int
  """Regex match for channel names."""
  regexMatch: String
  """Contact email for the guild."""
  contactEmail: String
  guild: Guild!
}
"""A connection to a list of items."""
type GuildConfigConnection {
  """A list of edges."""
  edges: [GuildConfigEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GuildConfigEdge {
  """The item at the end of the edge."""
  node: GuildConfig
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
GuildConfigWhereInput is used for filtering GuildConfig objects.
Input was generated by ent.
"""
input GuildConfigWhereInput {
  not: GuildConfigWhereInput
  and: [GuildConfigWhereInput!]
  or: [GuildConfigWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  enabledIsNil: Boolean
  enabledNotNil: Boolean
  """default_max_clones field predicates"""
  defaultMaxClones: Int
  defaultMaxClonesNEQ: Int
  defaultMaxClonesIn: [Int!]
  defaultMaxClonesNotIn: [Int!]
  defaultMaxClonesGT: Int
  defaultMaxClonesGTE: Int
  defaultMaxClonesLT: Int
  defaultMaxClonesLTE: Int
  defaultMaxClonesIsNil: Boolean
  defaultMaxClonesNotNil: Boolean
  """regex_match field predicates"""
  regexMatch: String
  regexMatchNEQ: String
  regexMatchIn: [String!]
  regexMatchNotIn: [String!]
  regexMatchGT: String
  regexMatchGTE: String
  regexMatchLT: String
  regexMatchLTE: String
  regexMatchContains: String
  regexMatchHasPrefix: String
  regexMatchHasSuffix: String
  regexMatchIsNil: Boolean
  regexMatchNotNil: Boolean
  regexMatchEqualFold: String
  regexMatchContainsFold: String
  """contact_email field predicates"""
  contactEmail: String
  contactEmailNEQ: String
  contactEmailIn: [String!]
  contactEmailNotIn: [String!]
  contactEmailGT: String
  contactEmailGTE: String
  contactEmailLT: String
  contactEmailLTE: String
  contactEmailContains: String
  contactEmailHasPrefix: String
  contactEmailHasSuffix: String
  contactEmailIsNil: Boolean
  contactEmailNotNil: Boolean
  contactEmailEqualFold: String
  contactEmailContainsFold: String
  """guild edge predicates"""
  hasGuild: Boolean
  hasGuildWith: [GuildWhereInput!]
}
"""A connection to a list of items."""
type GuildConnection {
  """A list of edges."""
  edges: [GuildEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GuildEdge {
  """The item at the end of the edge."""
  node: Guild
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type GuildEvent implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """The type of event that occurred."""
  type: GuildEventType!
  """The message associated with the event."""
  message: String!
  """Additional metadata associated with the event."""
  metadata: Map
  guild: Guild!
}
"""A connection to a list of items."""
type GuildEventConnection {
  """A list of edges."""
  edges: [GuildEventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GuildEventEdge {
  """The item at the end of the edge."""
  node: GuildEvent
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for GuildEvent connections"""
input GuildEventOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GuildEvents."""
  field: GuildEventOrderField!
}
"""Properties by which GuildEvent connections can be ordered."""
enum GuildEventOrderField {
  CREATED_AT
  UPDATED_AT
}
"""GuildEventType is enum for the field type"""
enum GuildEventType @goModel(model: "github.com/lrstanley/spectrograph/internal/ent/guildevent.Type") {
  INFO
  WARNING
  ERROR
  DEBUG
}
"""
GuildEventWhereInput is used for filtering GuildEvent objects.
Input was generated by ent.
"""
input GuildEventWhereInput {
  not: GuildEventWhereInput
  and: [GuildEventWhereInput!]
  or: [GuildEventWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """type field predicates"""
  type: GuildEventType
  typeNEQ: GuildEventType
  typeIn: [GuildEventType!]
  typeNotIn: [GuildEventType!]
  """message field predicates"""
  message: String
  messageNEQ: String
  messageIn: [String!]
  messageNotIn: [String!]
  messageGT: String
  messageGTE: String
  messageLT: String
  messageLTE: String
  messageContains: String
  messageHasPrefix: String
  messageHasSuffix: String
  messageEqualFold: String
  messageContainsFold: String
  """guild edge predicates"""
  hasGuild: Boolean
  hasGuildWith: [GuildWhereInput!]
}
"""Ordering options for Guild connections"""
input GuildOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Guilds."""
  field: GuildOrderField!
}
"""Properties by which Guild connections can be ordered."""
enum GuildOrderField {
  NAME
  JOINED_AT
}
"""
GuildWhereInput is used for filtering Guild objects.
Input was generated by ent.
"""
input GuildWhereInput {
  not: GuildWhereInput
  and: [GuildWhereInput!]
  or: [GuildWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """guild_id field predicates"""
  guildID: String
  guildIDNEQ: String
  guildIDIn: [String!]
  guildIDNotIn: [String!]
  guildIDGT: String
  guildIDGTE: String
  guildIDLT: String
  guildIDLTE: String
  guildIDContains: String
  guildIDHasPrefix: String
  guildIDHasSuffix: String
  guildIDEqualFold: String
  guildIDContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """icon_hash field predicates"""
  iconHash: String
  iconHashNEQ: String
  iconHashIn: [String!]
  iconHashNotIn: [String!]
  iconHashGT: String
  iconHashGTE: String
  iconHashLT: String
  iconHashLTE: String
  iconHashContains: String
  iconHashHasPrefix: String
  iconHashHasSuffix: String
  iconHashIsNil: Boolean
  iconHashNotNil: Boolean
  iconHashEqualFold: String
  iconHashContainsFold: String
  """icon_url field predicates"""
  iconURL: String
  iconURLNEQ: String
  iconURLIn: [String!]
  iconURLNotIn: [String!]
  iconURLGT: String
  iconURLGTE: String
  iconURLLT: String
  iconURLLTE: String
  iconURLContains: String
  iconURLHasPrefix: String
  iconURLHasSuffix: String
  iconURLEqualFold: String
  iconURLContainsFold: String
  """joined_at field predicates"""
  joinedAt: Time
  joinedAtNEQ: Time
  joinedAtIn: [Time!]
  joinedAtNotIn: [Time!]
  joinedAtGT: Time
  joinedAtGTE: Time
  joinedAtLT: Time
  joinedAtLTE: Time
  joinedAtIsNil: Boolean
  joinedAtNotNil: Boolean
  """large field predicates"""
  large: Boolean
  largeNEQ: Boolean
  largeIsNil: Boolean
  largeNotNil: Boolean
  """member_count field predicates"""
  memberCount: Int
  memberCountNEQ: Int
  memberCountIn: [Int!]
  memberCountNotIn: [Int!]
  memberCountGT: Int
  memberCountGTE: Int
  memberCountLT: Int
  memberCountLTE: Int
  memberCountIsNil: Boolean
  memberCountNotNil: Boolean
  """owner_id field predicates"""
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIsNil: Boolean
  ownerIDNotNil: Boolean
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """permissions field predicates"""
  permissions: Uint64
  permissionsNEQ: Uint64
  permissionsIn: [Uint64!]
  permissionsNotIn: [Uint64!]
  permissionsGT: Uint64
  permissionsGTE: Uint64
  permissionsLT: Uint64
  permissionsLTE: Uint64
  permissionsIsNil: Boolean
  permissionsNotNil: Boolean
  """system_channel_flags field predicates"""
  systemChannelFlags: String
  systemChannelFlagsNEQ: String
  systemChannelFlagsIn: [String!]
  systemChannelFlagsNotIn: [String!]
  systemChannelFlagsGT: String
  systemChannelFlagsGTE: String
  systemChannelFlagsLT: String
  systemChannelFlagsLTE: String
  systemChannelFlagsContains: String
  systemChannelFlagsHasPrefix: String
  systemChannelFlagsHasSuffix: String
  systemChannelFlagsIsNil: Boolean
  systemChannelFlagsNotNil: Boolean
  systemChannelFlagsEqualFold: String
  systemChannelFlagsContainsFold: String
  """guild_config edge predicates"""
  hasGuildConfig: Boolean
  hasGuildConfigWith: [GuildConfigWhereInput!]
  """guild_admin_config edge predicates"""
  hasGuildAdminConfig: Boolean
  hasGuildAdminConfigWith: [GuildAdminConfigWhereInput!]
  """guild_events edge predicates"""
  hasGuildEvents: Boolean
  hasGuildEventsWith: [GuildEventWhereInput!]
  """admins edge predicates"""
  hasAdmins: Boolean
  hasAdminsWith: [UserWhereInput!]
}
"""The builtin Map type"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/lrstanley/spectrograph/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  guilds(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Guilds returned from the connection."""
    orderBy: GuildOrder

    """Filtering options for Guilds returned from the connection."""
    where: GuildWhereInput
  ): GuildConnection!
  guildadminconfigs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for GuildAdminConfigs returned from the connection."""
    where: GuildAdminConfigWhereInput
  ): GuildAdminConfigConnection!
  guildconfigs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for GuildConfigs returned from the connection."""
    where: GuildConfigWhereInput
  ): GuildConfigConnection!
  guildevents(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for GuildEvents returned from the connection."""
    orderBy: GuildEventOrder

    """Filtering options for GuildEvents returned from the connection."""
    where: GuildEventWhereInput
  ): GuildEventConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
"""The builtin Time type"""
scalar Time
"""The builtin Uint64 type"""
scalar Uint64
"""
UpdateGuildAdminConfigInput is used for update GuildAdminConfig object.
Input was generated by ent.
"""
input UpdateGuildAdminConfigInput {
  updateTime: Time
  clearEnabled: Boolean
  """True if the guild should be monitored/acted upon (overrides user-defined settings)."""
  enabled: Boolean
  clearDefaultMaxChannels: Boolean
  """Default max channels for the guild (overrides user-defined settings)."""
  defaultMaxChannels: Int
  clearDefaultMaxClones: Boolean
  """Default max clones for the guild (overrides user-defined settings)."""
  defaultMaxClones: Int
  clearComment: Boolean
  """Admin comment for the guild."""
  comment: String
}
"""
UpdateGuildConfigInput is used for update GuildConfig object.
Input was generated by ent.
"""
input UpdateGuildConfigInput {
  updateTime: Time
  clearEnabled: Boolean
  """True if the guild should be monitored/acted upon."""
  enabled: Boolean
  clearDefaultMaxClones: Boolean
  """Default max cloned channels for the guild."""
  defaultMaxClones: Int
  clearRegexMatch: Boolean
  """Regex match for channel names."""
  regexMatch: String
  clearContactEmail: Boolean
  """Contact email for the guild."""
  contactEmail: String
}
type User implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  userID: String!
  """Whether or not the user is a spectrograph admin."""
  admin: Boolean
  """Whether or not the user is banned from using the service."""
  banned: Boolean
  """Reason for the user being banned (if any)."""
  banReason: String
  """The users username, not unique across the platform."""
  username: String!
  """The users 4-digit discord-tag."""
  discriminator: String!
  """The users email address."""
  email: String!
  """The users avatar hash."""
  avatarHash: String
  """The users avatar URL (generated if no avatar present)."""
  avatarURL: String!
  """The users chosen language option."""
  locale: String
  """Whether the user belongs to an OAuth2 application."""
  bot: Boolean
  """Whether the user is an Official Discord System user (part of the urgent message system)."""
  system: Boolean
  """Whether the user has two factor enabled on their account."""
  mfaEnabled: Boolean
  """Whether the email on this account has been verified."""
  verified: Boolean
  """The flags on a users account."""
  flags: Uint64
  """The type of Nitro subscription on a users account."""
  premiumType: Int
  """The public flags on a users account."""
  publicFlags: Uint64
  userGuilds(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Guilds returned from the connection."""
    orderBy: GuildOrder

    """Filtering options for Guilds returned from the connection."""
    where: GuildWhereInput
  ): GuildConnection!
  bannedUsers: [User!]
  bannedBy: User
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  USERNAME
  DISCRIMINATOR
  EMAIL
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """user_id field predicates"""
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDEqualFold: String
  userIDContainsFold: String
  """admin field predicates"""
  admin: Boolean
  adminNEQ: Boolean
  adminIsNil: Boolean
  adminNotNil: Boolean
  """banned field predicates"""
  banned: Boolean
  bannedNEQ: Boolean
  bannedIsNil: Boolean
  bannedNotNil: Boolean
  """ban_reason field predicates"""
  banReason: String
  banReasonNEQ: String
  banReasonIn: [String!]
  banReasonNotIn: [String!]
  banReasonGT: String
  banReasonGTE: String
  banReasonLT: String
  banReasonLTE: String
  banReasonContains: String
  banReasonHasPrefix: String
  banReasonHasSuffix: String
  banReasonIsNil: Boolean
  banReasonNotNil: Boolean
  banReasonEqualFold: String
  banReasonContainsFold: String
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """discriminator field predicates"""
  discriminator: String
  discriminatorNEQ: String
  discriminatorIn: [String!]
  discriminatorNotIn: [String!]
  discriminatorGT: String
  discriminatorGTE: String
  discriminatorLT: String
  discriminatorLTE: String
  discriminatorContains: String
  discriminatorHasPrefix: String
  discriminatorHasSuffix: String
  discriminatorEqualFold: String
  discriminatorContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """avatar_hash field predicates"""
  avatarHash: String
  avatarHashNEQ: String
  avatarHashIn: [String!]
  avatarHashNotIn: [String!]
  avatarHashGT: String
  avatarHashGTE: String
  avatarHashLT: String
  avatarHashLTE: String
  avatarHashContains: String
  avatarHashHasPrefix: String
  avatarHashHasSuffix: String
  avatarHashIsNil: Boolean
  avatarHashNotNil: Boolean
  avatarHashEqualFold: String
  avatarHashContainsFold: String
  """avatar_url field predicates"""
  avatarURL: String
  avatarURLNEQ: String
  avatarURLIn: [String!]
  avatarURLNotIn: [String!]
  avatarURLGT: String
  avatarURLGTE: String
  avatarURLLT: String
  avatarURLLTE: String
  avatarURLContains: String
  avatarURLHasPrefix: String
  avatarURLHasSuffix: String
  avatarURLEqualFold: String
  avatarURLContainsFold: String
  """locale field predicates"""
  locale: String
  localeNEQ: String
  localeIn: [String!]
  localeNotIn: [String!]
  localeGT: String
  localeGTE: String
  localeLT: String
  localeLTE: String
  localeContains: String
  localeHasPrefix: String
  localeHasSuffix: String
  localeIsNil: Boolean
  localeNotNil: Boolean
  localeEqualFold: String
  localeContainsFold: String
  """bot field predicates"""
  bot: Boolean
  botNEQ: Boolean
  botIsNil: Boolean
  botNotNil: Boolean
  """system field predicates"""
  system: Boolean
  systemNEQ: Boolean
  systemIsNil: Boolean
  systemNotNil: Boolean
  """mfa_enabled field predicates"""
  mfaEnabled: Boolean
  mfaEnabledNEQ: Boolean
  mfaEnabledIsNil: Boolean
  mfaEnabledNotNil: Boolean
  """verified field predicates"""
  verified: Boolean
  verifiedNEQ: Boolean
  verifiedIsNil: Boolean
  verifiedNotNil: Boolean
  """flags field predicates"""
  flags: Uint64
  flagsNEQ: Uint64
  flagsIn: [Uint64!]
  flagsNotIn: [Uint64!]
  flagsGT: Uint64
  flagsGTE: Uint64
  flagsLT: Uint64
  flagsLTE: Uint64
  flagsIsNil: Boolean
  flagsNotNil: Boolean
  """premium_type field predicates"""
  premiumType: Int
  premiumTypeNEQ: Int
  premiumTypeIn: [Int!]
  premiumTypeNotIn: [Int!]
  premiumTypeGT: Int
  premiumTypeGTE: Int
  premiumTypeLT: Int
  premiumTypeLTE: Int
  premiumTypeIsNil: Boolean
  premiumTypeNotNil: Boolean
  """public_flags field predicates"""
  publicFlags: Uint64
  publicFlagsNEQ: Uint64
  publicFlagsIn: [Uint64!]
  publicFlagsNotIn: [Uint64!]
  publicFlagsGT: Uint64
  publicFlagsGTE: Uint64
  publicFlagsLT: Uint64
  publicFlagsLTE: Uint64
  publicFlagsIsNil: Boolean
  publicFlagsNotNil: Boolean
  """user_guilds edge predicates"""
  hasUserGuilds: Boolean
  hasUserGuildsWith: [GuildWhereInput!]
  """banned_users edge predicates"""
  hasBannedUsers: Boolean
  hasBannedUsersWith: [UserWhereInput!]
  """banned_by edge predicates"""
  hasBannedBy: Boolean
  hasBannedByWith: [UserWhereInput!]
}
