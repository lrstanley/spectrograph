// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/spectrograph/internal/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
)

// GuildEventUpdate is the builder for updating GuildEvent entities.
type GuildEventUpdate struct {
	config
	hooks    []Hook
	mutation *GuildEventMutation
}

// Where appends a list predicates to the GuildEventUpdate builder.
func (geu *GuildEventUpdate) Where(ps ...predicate.GuildEvent) *GuildEventUpdate {
	geu.mutation.Where(ps...)
	return geu
}

// SetUpdateTime sets the "update_time" field.
func (geu *GuildEventUpdate) SetUpdateTime(t time.Time) *GuildEventUpdate {
	geu.mutation.SetUpdateTime(t)
	return geu
}

// SetType sets the "type" field.
func (geu *GuildEventUpdate) SetType(gu guildevent.Type) *GuildEventUpdate {
	geu.mutation.SetType(gu)
	return geu
}

// SetMessage sets the "message" field.
func (geu *GuildEventUpdate) SetMessage(s string) *GuildEventUpdate {
	geu.mutation.SetMessage(s)
	return geu
}

// SetMetadata sets the "metadata" field.
func (geu *GuildEventUpdate) SetMetadata(m map[string]interface{}) *GuildEventUpdate {
	geu.mutation.SetMetadata(m)
	return geu
}

// ClearMetadata clears the value of the "metadata" field.
func (geu *GuildEventUpdate) ClearMetadata() *GuildEventUpdate {
	geu.mutation.ClearMetadata()
	return geu
}

// Mutation returns the GuildEventMutation object of the builder.
func (geu *GuildEventUpdate) Mutation() *GuildEventMutation {
	return geu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (geu *GuildEventUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := geu.defaults(); err != nil {
		return 0, err
	}
	if len(geu.hooks) == 0 {
		if err = geu.check(); err != nil {
			return 0, err
		}
		affected, err = geu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = geu.check(); err != nil {
				return 0, err
			}
			geu.mutation = mutation
			affected, err = geu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(geu.hooks) - 1; i >= 0; i-- {
			if geu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = geu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, geu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (geu *GuildEventUpdate) SaveX(ctx context.Context) int {
	affected, err := geu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (geu *GuildEventUpdate) Exec(ctx context.Context) error {
	_, err := geu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geu *GuildEventUpdate) ExecX(ctx context.Context) {
	if err := geu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geu *GuildEventUpdate) defaults() error {
	if _, ok := geu.mutation.UpdateTime(); !ok {
		if guildevent.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guildevent.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guildevent.UpdateDefaultUpdateTime()
		geu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (geu *GuildEventUpdate) check() error {
	if v, ok := geu.mutation.GetType(); ok {
		if err := guildevent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "GuildEvent.type": %w`, err)}
		}
	}
	if _, ok := geu.mutation.GuildID(); geu.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GuildEvent.guild"`)
	}
	return nil
}

func (geu *GuildEventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guildevent.Table,
			Columns: guildevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guildevent.FieldID,
			},
		},
	}
	if ps := geu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guildevent.FieldUpdateTime,
		})
	}
	if value, ok := geu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: guildevent.FieldType,
		})
	}
	if value, ok := geu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildevent.FieldMessage,
		})
	}
	if value, ok := geu.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guildevent.FieldMetadata,
		})
	}
	if geu.mutation.MetadataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: guildevent.FieldMetadata,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, geu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GuildEventUpdateOne is the builder for updating a single GuildEvent entity.
type GuildEventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuildEventMutation
}

// SetUpdateTime sets the "update_time" field.
func (geuo *GuildEventUpdateOne) SetUpdateTime(t time.Time) *GuildEventUpdateOne {
	geuo.mutation.SetUpdateTime(t)
	return geuo
}

// SetType sets the "type" field.
func (geuo *GuildEventUpdateOne) SetType(gu guildevent.Type) *GuildEventUpdateOne {
	geuo.mutation.SetType(gu)
	return geuo
}

// SetMessage sets the "message" field.
func (geuo *GuildEventUpdateOne) SetMessage(s string) *GuildEventUpdateOne {
	geuo.mutation.SetMessage(s)
	return geuo
}

// SetMetadata sets the "metadata" field.
func (geuo *GuildEventUpdateOne) SetMetadata(m map[string]interface{}) *GuildEventUpdateOne {
	geuo.mutation.SetMetadata(m)
	return geuo
}

// ClearMetadata clears the value of the "metadata" field.
func (geuo *GuildEventUpdateOne) ClearMetadata() *GuildEventUpdateOne {
	geuo.mutation.ClearMetadata()
	return geuo
}

// Mutation returns the GuildEventMutation object of the builder.
func (geuo *GuildEventUpdateOne) Mutation() *GuildEventMutation {
	return geuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (geuo *GuildEventUpdateOne) Select(field string, fields ...string) *GuildEventUpdateOne {
	geuo.fields = append([]string{field}, fields...)
	return geuo
}

// Save executes the query and returns the updated GuildEvent entity.
func (geuo *GuildEventUpdateOne) Save(ctx context.Context) (*GuildEvent, error) {
	var (
		err  error
		node *GuildEvent
	)
	if err := geuo.defaults(); err != nil {
		return nil, err
	}
	if len(geuo.hooks) == 0 {
		if err = geuo.check(); err != nil {
			return nil, err
		}
		node, err = geuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildEventMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = geuo.check(); err != nil {
				return nil, err
			}
			geuo.mutation = mutation
			node, err = geuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(geuo.hooks) - 1; i >= 0; i-- {
			if geuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = geuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, geuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GuildEvent)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GuildEventMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (geuo *GuildEventUpdateOne) SaveX(ctx context.Context) *GuildEvent {
	node, err := geuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (geuo *GuildEventUpdateOne) Exec(ctx context.Context) error {
	_, err := geuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geuo *GuildEventUpdateOne) ExecX(ctx context.Context) {
	if err := geuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geuo *GuildEventUpdateOne) defaults() error {
	if _, ok := geuo.mutation.UpdateTime(); !ok {
		if guildevent.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guildevent.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guildevent.UpdateDefaultUpdateTime()
		geuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (geuo *GuildEventUpdateOne) check() error {
	if v, ok := geuo.mutation.GetType(); ok {
		if err := guildevent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "GuildEvent.type": %w`, err)}
		}
	}
	if _, ok := geuo.mutation.GuildID(); geuo.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GuildEvent.guild"`)
	}
	return nil
}

func (geuo *GuildEventUpdateOne) sqlSave(ctx context.Context) (_node *GuildEvent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guildevent.Table,
			Columns: guildevent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guildevent.FieldID,
			},
		},
	}
	id, ok := geuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GuildEvent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := geuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guildevent.FieldID)
		for _, f := range fields {
			if !guildevent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guildevent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := geuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guildevent.FieldUpdateTime,
		})
	}
	if value, ok := geuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: guildevent.FieldType,
		})
	}
	if value, ok := geuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildevent.FieldMessage,
		})
	}
	if value, ok := geuo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guildevent.FieldMetadata,
		})
	}
	if geuo.mutation.MetadataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: guildevent.FieldMetadata,
		})
	}
	_node = &GuildEvent{config: geuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, geuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildevent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
