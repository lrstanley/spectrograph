// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/spectrograph/internal/ent/guild"
	"github.com/lrstanley/spectrograph/internal/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
	"github.com/lrstanley/spectrograph/internal/ent/user"
)

// GuildUpdate is the builder for updating Guild entities.
type GuildUpdate struct {
	config
	hooks    []Hook
	mutation *GuildMutation
}

// Where appends a list predicates to the GuildUpdate builder.
func (gu *GuildUpdate) Where(ps ...predicate.Guild) *GuildUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdateTime sets the "update_time" field.
func (gu *GuildUpdate) SetUpdateTime(t time.Time) *GuildUpdate {
	gu.mutation.SetUpdateTime(t)
	return gu
}

// SetName sets the "name" field.
func (gu *GuildUpdate) SetName(s string) *GuildUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetFeatures sets the "features" field.
func (gu *GuildUpdate) SetFeatures(s []string) *GuildUpdate {
	gu.mutation.SetFeatures(s)
	return gu
}

// AppendFeatures appends s to the "features" field.
func (gu *GuildUpdate) AppendFeatures(s []string) *GuildUpdate {
	gu.mutation.AppendFeatures(s)
	return gu
}

// ClearFeatures clears the value of the "features" field.
func (gu *GuildUpdate) ClearFeatures() *GuildUpdate {
	gu.mutation.ClearFeatures()
	return gu
}

// SetIconHash sets the "icon_hash" field.
func (gu *GuildUpdate) SetIconHash(s string) *GuildUpdate {
	gu.mutation.SetIconHash(s)
	return gu
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableIconHash(s *string) *GuildUpdate {
	if s != nil {
		gu.SetIconHash(*s)
	}
	return gu
}

// ClearIconHash clears the value of the "icon_hash" field.
func (gu *GuildUpdate) ClearIconHash() *GuildUpdate {
	gu.mutation.ClearIconHash()
	return gu
}

// SetIconURL sets the "icon_url" field.
func (gu *GuildUpdate) SetIconURL(s string) *GuildUpdate {
	gu.mutation.SetIconURL(s)
	return gu
}

// SetJoinedAt sets the "joined_at" field.
func (gu *GuildUpdate) SetJoinedAt(t time.Time) *GuildUpdate {
	gu.mutation.SetJoinedAt(t)
	return gu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableJoinedAt(t *time.Time) *GuildUpdate {
	if t != nil {
		gu.SetJoinedAt(*t)
	}
	return gu
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (gu *GuildUpdate) ClearJoinedAt() *GuildUpdate {
	gu.mutation.ClearJoinedAt()
	return gu
}

// SetLarge sets the "large" field.
func (gu *GuildUpdate) SetLarge(b bool) *GuildUpdate {
	gu.mutation.SetLarge(b)
	return gu
}

// SetNillableLarge sets the "large" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableLarge(b *bool) *GuildUpdate {
	if b != nil {
		gu.SetLarge(*b)
	}
	return gu
}

// ClearLarge clears the value of the "large" field.
func (gu *GuildUpdate) ClearLarge() *GuildUpdate {
	gu.mutation.ClearLarge()
	return gu
}

// SetMemberCount sets the "member_count" field.
func (gu *GuildUpdate) SetMemberCount(i int) *GuildUpdate {
	gu.mutation.ResetMemberCount()
	gu.mutation.SetMemberCount(i)
	return gu
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableMemberCount(i *int) *GuildUpdate {
	if i != nil {
		gu.SetMemberCount(*i)
	}
	return gu
}

// AddMemberCount adds i to the "member_count" field.
func (gu *GuildUpdate) AddMemberCount(i int) *GuildUpdate {
	gu.mutation.AddMemberCount(i)
	return gu
}

// ClearMemberCount clears the value of the "member_count" field.
func (gu *GuildUpdate) ClearMemberCount() *GuildUpdate {
	gu.mutation.ClearMemberCount()
	return gu
}

// SetOwnerID sets the "owner_id" field.
func (gu *GuildUpdate) SetOwnerID(s string) *GuildUpdate {
	gu.mutation.SetOwnerID(s)
	return gu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableOwnerID(s *string) *GuildUpdate {
	if s != nil {
		gu.SetOwnerID(*s)
	}
	return gu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (gu *GuildUpdate) ClearOwnerID() *GuildUpdate {
	gu.mutation.ClearOwnerID()
	return gu
}

// SetPermissions sets the "permissions" field.
func (gu *GuildUpdate) SetPermissions(u uint64) *GuildUpdate {
	gu.mutation.ResetPermissions()
	gu.mutation.SetPermissions(u)
	return gu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (gu *GuildUpdate) SetNillablePermissions(u *uint64) *GuildUpdate {
	if u != nil {
		gu.SetPermissions(*u)
	}
	return gu
}

// AddPermissions adds u to the "permissions" field.
func (gu *GuildUpdate) AddPermissions(u int64) *GuildUpdate {
	gu.mutation.AddPermissions(u)
	return gu
}

// ClearPermissions clears the value of the "permissions" field.
func (gu *GuildUpdate) ClearPermissions() *GuildUpdate {
	gu.mutation.ClearPermissions()
	return gu
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (gu *GuildUpdate) SetSystemChannelFlags(s string) *GuildUpdate {
	gu.mutation.SetSystemChannelFlags(s)
	return gu
}

// SetNillableSystemChannelFlags sets the "system_channel_flags" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableSystemChannelFlags(s *string) *GuildUpdate {
	if s != nil {
		gu.SetSystemChannelFlags(*s)
	}
	return gu
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (gu *GuildUpdate) ClearSystemChannelFlags() *GuildUpdate {
	gu.mutation.ClearSystemChannelFlags()
	return gu
}

// SetGuildConfigID sets the "guild_config" edge to the GuildConfig entity by ID.
func (gu *GuildUpdate) SetGuildConfigID(id int) *GuildUpdate {
	gu.mutation.SetGuildConfigID(id)
	return gu
}

// SetNillableGuildConfigID sets the "guild_config" edge to the GuildConfig entity by ID if the given value is not nil.
func (gu *GuildUpdate) SetNillableGuildConfigID(id *int) *GuildUpdate {
	if id != nil {
		gu = gu.SetGuildConfigID(*id)
	}
	return gu
}

// SetGuildConfig sets the "guild_config" edge to the GuildConfig entity.
func (gu *GuildUpdate) SetGuildConfig(g *GuildConfig) *GuildUpdate {
	return gu.SetGuildConfigID(g.ID)
}

// SetGuildAdminConfigID sets the "guild_admin_config" edge to the GuildAdminConfig entity by ID.
func (gu *GuildUpdate) SetGuildAdminConfigID(id int) *GuildUpdate {
	gu.mutation.SetGuildAdminConfigID(id)
	return gu
}

// SetNillableGuildAdminConfigID sets the "guild_admin_config" edge to the GuildAdminConfig entity by ID if the given value is not nil.
func (gu *GuildUpdate) SetNillableGuildAdminConfigID(id *int) *GuildUpdate {
	if id != nil {
		gu = gu.SetGuildAdminConfigID(*id)
	}
	return gu
}

// SetGuildAdminConfig sets the "guild_admin_config" edge to the GuildAdminConfig entity.
func (gu *GuildUpdate) SetGuildAdminConfig(g *GuildAdminConfig) *GuildUpdate {
	return gu.SetGuildAdminConfigID(g.ID)
}

// AddGuildEventIDs adds the "guild_events" edge to the GuildEvent entity by IDs.
func (gu *GuildUpdate) AddGuildEventIDs(ids ...int) *GuildUpdate {
	gu.mutation.AddGuildEventIDs(ids...)
	return gu
}

// AddGuildEvents adds the "guild_events" edges to the GuildEvent entity.
func (gu *GuildUpdate) AddGuildEvents(g ...*GuildEvent) *GuildUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddGuildEventIDs(ids...)
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (gu *GuildUpdate) AddAdminIDs(ids ...int) *GuildUpdate {
	gu.mutation.AddAdminIDs(ids...)
	return gu
}

// AddAdmins adds the "admins" edges to the User entity.
func (gu *GuildUpdate) AddAdmins(u ...*User) *GuildUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddAdminIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (gu *GuildUpdate) Mutation() *GuildMutation {
	return gu.mutation
}

// ClearGuildConfig clears the "guild_config" edge to the GuildConfig entity.
func (gu *GuildUpdate) ClearGuildConfig() *GuildUpdate {
	gu.mutation.ClearGuildConfig()
	return gu
}

// ClearGuildAdminConfig clears the "guild_admin_config" edge to the GuildAdminConfig entity.
func (gu *GuildUpdate) ClearGuildAdminConfig() *GuildUpdate {
	gu.mutation.ClearGuildAdminConfig()
	return gu
}

// ClearGuildEvents clears all "guild_events" edges to the GuildEvent entity.
func (gu *GuildUpdate) ClearGuildEvents() *GuildUpdate {
	gu.mutation.ClearGuildEvents()
	return gu
}

// RemoveGuildEventIDs removes the "guild_events" edge to GuildEvent entities by IDs.
func (gu *GuildUpdate) RemoveGuildEventIDs(ids ...int) *GuildUpdate {
	gu.mutation.RemoveGuildEventIDs(ids...)
	return gu
}

// RemoveGuildEvents removes "guild_events" edges to GuildEvent entities.
func (gu *GuildUpdate) RemoveGuildEvents(g ...*GuildEvent) *GuildUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveGuildEventIDs(ids...)
}

// ClearAdmins clears all "admins" edges to the User entity.
func (gu *GuildUpdate) ClearAdmins() *GuildUpdate {
	gu.mutation.ClearAdmins()
	return gu
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (gu *GuildUpdate) RemoveAdminIDs(ids ...int) *GuildUpdate {
	gu.mutation.RemoveAdminIDs(ids...)
	return gu
}

// RemoveAdmins removes "admins" edges to User entities.
func (gu *GuildUpdate) RemoveAdmins(u ...*User) *GuildUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveAdminIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuildUpdate) Save(ctx context.Context) (int, error) {
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, GuildMutation](ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuildUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuildUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuildUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GuildUpdate) defaults() error {
	if _, ok := gu.mutation.UpdateTime(); !ok {
		if guild.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guild.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guild.UpdateDefaultUpdateTime()
		gu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gu *GuildUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if v, ok := gu.mutation.IconHash(); ok {
		if err := guild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_hash": %w`, err)}
		}
	}
	if v, ok := gu.mutation.IconURL(); ok {
		if err := guild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_url": %w`, err)}
		}
	}
	if v, ok := gu.mutation.SystemChannelFlags(); ok {
		if err := guild.SystemChannelFlagsValidator(v); err != nil {
			return &ValidationError{Name: "system_channel_flags", err: fmt.Errorf(`ent: validator failed for field "Guild.system_channel_flags": %w`, err)}
		}
	}
	return nil
}

func (gu *GuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guild.Table, guild.Columns, sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdateTime(); ok {
		_spec.SetField(guild.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(guild.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Features(); ok {
		_spec.SetField(guild.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, guild.FieldFeatures, value)
		})
	}
	if gu.mutation.FeaturesCleared() {
		_spec.ClearField(guild.FieldFeatures, field.TypeJSON)
	}
	if value, ok := gu.mutation.IconHash(); ok {
		_spec.SetField(guild.FieldIconHash, field.TypeString, value)
	}
	if gu.mutation.IconHashCleared() {
		_spec.ClearField(guild.FieldIconHash, field.TypeString)
	}
	if value, ok := gu.mutation.IconURL(); ok {
		_spec.SetField(guild.FieldIconURL, field.TypeString, value)
	}
	if value, ok := gu.mutation.JoinedAt(); ok {
		_spec.SetField(guild.FieldJoinedAt, field.TypeTime, value)
	}
	if gu.mutation.JoinedAtCleared() {
		_spec.ClearField(guild.FieldJoinedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.Large(); ok {
		_spec.SetField(guild.FieldLarge, field.TypeBool, value)
	}
	if gu.mutation.LargeCleared() {
		_spec.ClearField(guild.FieldLarge, field.TypeBool)
	}
	if value, ok := gu.mutation.MemberCount(); ok {
		_spec.SetField(guild.FieldMemberCount, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedMemberCount(); ok {
		_spec.AddField(guild.FieldMemberCount, field.TypeInt, value)
	}
	if gu.mutation.MemberCountCleared() {
		_spec.ClearField(guild.FieldMemberCount, field.TypeInt)
	}
	if value, ok := gu.mutation.OwnerID(); ok {
		_spec.SetField(guild.FieldOwnerID, field.TypeString, value)
	}
	if gu.mutation.OwnerIDCleared() {
		_spec.ClearField(guild.FieldOwnerID, field.TypeString)
	}
	if value, ok := gu.mutation.Permissions(); ok {
		_spec.SetField(guild.FieldPermissions, field.TypeUint64, value)
	}
	if value, ok := gu.mutation.AddedPermissions(); ok {
		_spec.AddField(guild.FieldPermissions, field.TypeUint64, value)
	}
	if gu.mutation.PermissionsCleared() {
		_spec.ClearField(guild.FieldPermissions, field.TypeUint64)
	}
	if value, ok := gu.mutation.SystemChannelFlags(); ok {
		_spec.SetField(guild.FieldSystemChannelFlags, field.TypeString, value)
	}
	if gu.mutation.SystemChannelFlagsCleared() {
		_spec.ClearField(guild.FieldSystemChannelFlags, field.TypeString)
	}
	if gu.mutation.GuildConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildConfigTable,
			Columns: []string{guild.GuildConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GuildConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildConfigTable,
			Columns: []string{guild.GuildConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GuildAdminConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildAdminConfigTable,
			Columns: []string{guild.GuildAdminConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildadminconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GuildAdminConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildAdminConfigTable,
			Columns: []string{guild.GuildAdminConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildadminconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GuildEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildEventsTable,
			Columns: []string{guild.GuildEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGuildEventsIDs(); len(nodes) > 0 && !gu.mutation.GuildEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildEventsTable,
			Columns: []string{guild.GuildEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GuildEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildEventsTable,
			Columns: []string{guild.GuildEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.AdminsTable,
			Columns: guild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !gu.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.AdminsTable,
			Columns: guild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.AdminsTable,
			Columns: guild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GuildUpdateOne is the builder for updating a single Guild entity.
type GuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuildMutation
}

// SetUpdateTime sets the "update_time" field.
func (guo *GuildUpdateOne) SetUpdateTime(t time.Time) *GuildUpdateOne {
	guo.mutation.SetUpdateTime(t)
	return guo
}

// SetName sets the "name" field.
func (guo *GuildUpdateOne) SetName(s string) *GuildUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetFeatures sets the "features" field.
func (guo *GuildUpdateOne) SetFeatures(s []string) *GuildUpdateOne {
	guo.mutation.SetFeatures(s)
	return guo
}

// AppendFeatures appends s to the "features" field.
func (guo *GuildUpdateOne) AppendFeatures(s []string) *GuildUpdateOne {
	guo.mutation.AppendFeatures(s)
	return guo
}

// ClearFeatures clears the value of the "features" field.
func (guo *GuildUpdateOne) ClearFeatures() *GuildUpdateOne {
	guo.mutation.ClearFeatures()
	return guo
}

// SetIconHash sets the "icon_hash" field.
func (guo *GuildUpdateOne) SetIconHash(s string) *GuildUpdateOne {
	guo.mutation.SetIconHash(s)
	return guo
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableIconHash(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetIconHash(*s)
	}
	return guo
}

// ClearIconHash clears the value of the "icon_hash" field.
func (guo *GuildUpdateOne) ClearIconHash() *GuildUpdateOne {
	guo.mutation.ClearIconHash()
	return guo
}

// SetIconURL sets the "icon_url" field.
func (guo *GuildUpdateOne) SetIconURL(s string) *GuildUpdateOne {
	guo.mutation.SetIconURL(s)
	return guo
}

// SetJoinedAt sets the "joined_at" field.
func (guo *GuildUpdateOne) SetJoinedAt(t time.Time) *GuildUpdateOne {
	guo.mutation.SetJoinedAt(t)
	return guo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableJoinedAt(t *time.Time) *GuildUpdateOne {
	if t != nil {
		guo.SetJoinedAt(*t)
	}
	return guo
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (guo *GuildUpdateOne) ClearJoinedAt() *GuildUpdateOne {
	guo.mutation.ClearJoinedAt()
	return guo
}

// SetLarge sets the "large" field.
func (guo *GuildUpdateOne) SetLarge(b bool) *GuildUpdateOne {
	guo.mutation.SetLarge(b)
	return guo
}

// SetNillableLarge sets the "large" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableLarge(b *bool) *GuildUpdateOne {
	if b != nil {
		guo.SetLarge(*b)
	}
	return guo
}

// ClearLarge clears the value of the "large" field.
func (guo *GuildUpdateOne) ClearLarge() *GuildUpdateOne {
	guo.mutation.ClearLarge()
	return guo
}

// SetMemberCount sets the "member_count" field.
func (guo *GuildUpdateOne) SetMemberCount(i int) *GuildUpdateOne {
	guo.mutation.ResetMemberCount()
	guo.mutation.SetMemberCount(i)
	return guo
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableMemberCount(i *int) *GuildUpdateOne {
	if i != nil {
		guo.SetMemberCount(*i)
	}
	return guo
}

// AddMemberCount adds i to the "member_count" field.
func (guo *GuildUpdateOne) AddMemberCount(i int) *GuildUpdateOne {
	guo.mutation.AddMemberCount(i)
	return guo
}

// ClearMemberCount clears the value of the "member_count" field.
func (guo *GuildUpdateOne) ClearMemberCount() *GuildUpdateOne {
	guo.mutation.ClearMemberCount()
	return guo
}

// SetOwnerID sets the "owner_id" field.
func (guo *GuildUpdateOne) SetOwnerID(s string) *GuildUpdateOne {
	guo.mutation.SetOwnerID(s)
	return guo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableOwnerID(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetOwnerID(*s)
	}
	return guo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (guo *GuildUpdateOne) ClearOwnerID() *GuildUpdateOne {
	guo.mutation.ClearOwnerID()
	return guo
}

// SetPermissions sets the "permissions" field.
func (guo *GuildUpdateOne) SetPermissions(u uint64) *GuildUpdateOne {
	guo.mutation.ResetPermissions()
	guo.mutation.SetPermissions(u)
	return guo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillablePermissions(u *uint64) *GuildUpdateOne {
	if u != nil {
		guo.SetPermissions(*u)
	}
	return guo
}

// AddPermissions adds u to the "permissions" field.
func (guo *GuildUpdateOne) AddPermissions(u int64) *GuildUpdateOne {
	guo.mutation.AddPermissions(u)
	return guo
}

// ClearPermissions clears the value of the "permissions" field.
func (guo *GuildUpdateOne) ClearPermissions() *GuildUpdateOne {
	guo.mutation.ClearPermissions()
	return guo
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (guo *GuildUpdateOne) SetSystemChannelFlags(s string) *GuildUpdateOne {
	guo.mutation.SetSystemChannelFlags(s)
	return guo
}

// SetNillableSystemChannelFlags sets the "system_channel_flags" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableSystemChannelFlags(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetSystemChannelFlags(*s)
	}
	return guo
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (guo *GuildUpdateOne) ClearSystemChannelFlags() *GuildUpdateOne {
	guo.mutation.ClearSystemChannelFlags()
	return guo
}

// SetGuildConfigID sets the "guild_config" edge to the GuildConfig entity by ID.
func (guo *GuildUpdateOne) SetGuildConfigID(id int) *GuildUpdateOne {
	guo.mutation.SetGuildConfigID(id)
	return guo
}

// SetNillableGuildConfigID sets the "guild_config" edge to the GuildConfig entity by ID if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableGuildConfigID(id *int) *GuildUpdateOne {
	if id != nil {
		guo = guo.SetGuildConfigID(*id)
	}
	return guo
}

// SetGuildConfig sets the "guild_config" edge to the GuildConfig entity.
func (guo *GuildUpdateOne) SetGuildConfig(g *GuildConfig) *GuildUpdateOne {
	return guo.SetGuildConfigID(g.ID)
}

// SetGuildAdminConfigID sets the "guild_admin_config" edge to the GuildAdminConfig entity by ID.
func (guo *GuildUpdateOne) SetGuildAdminConfigID(id int) *GuildUpdateOne {
	guo.mutation.SetGuildAdminConfigID(id)
	return guo
}

// SetNillableGuildAdminConfigID sets the "guild_admin_config" edge to the GuildAdminConfig entity by ID if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableGuildAdminConfigID(id *int) *GuildUpdateOne {
	if id != nil {
		guo = guo.SetGuildAdminConfigID(*id)
	}
	return guo
}

// SetGuildAdminConfig sets the "guild_admin_config" edge to the GuildAdminConfig entity.
func (guo *GuildUpdateOne) SetGuildAdminConfig(g *GuildAdminConfig) *GuildUpdateOne {
	return guo.SetGuildAdminConfigID(g.ID)
}

// AddGuildEventIDs adds the "guild_events" edge to the GuildEvent entity by IDs.
func (guo *GuildUpdateOne) AddGuildEventIDs(ids ...int) *GuildUpdateOne {
	guo.mutation.AddGuildEventIDs(ids...)
	return guo
}

// AddGuildEvents adds the "guild_events" edges to the GuildEvent entity.
func (guo *GuildUpdateOne) AddGuildEvents(g ...*GuildEvent) *GuildUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddGuildEventIDs(ids...)
}

// AddAdminIDs adds the "admins" edge to the User entity by IDs.
func (guo *GuildUpdateOne) AddAdminIDs(ids ...int) *GuildUpdateOne {
	guo.mutation.AddAdminIDs(ids...)
	return guo
}

// AddAdmins adds the "admins" edges to the User entity.
func (guo *GuildUpdateOne) AddAdmins(u ...*User) *GuildUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddAdminIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (guo *GuildUpdateOne) Mutation() *GuildMutation {
	return guo.mutation
}

// ClearGuildConfig clears the "guild_config" edge to the GuildConfig entity.
func (guo *GuildUpdateOne) ClearGuildConfig() *GuildUpdateOne {
	guo.mutation.ClearGuildConfig()
	return guo
}

// ClearGuildAdminConfig clears the "guild_admin_config" edge to the GuildAdminConfig entity.
func (guo *GuildUpdateOne) ClearGuildAdminConfig() *GuildUpdateOne {
	guo.mutation.ClearGuildAdminConfig()
	return guo
}

// ClearGuildEvents clears all "guild_events" edges to the GuildEvent entity.
func (guo *GuildUpdateOne) ClearGuildEvents() *GuildUpdateOne {
	guo.mutation.ClearGuildEvents()
	return guo
}

// RemoveGuildEventIDs removes the "guild_events" edge to GuildEvent entities by IDs.
func (guo *GuildUpdateOne) RemoveGuildEventIDs(ids ...int) *GuildUpdateOne {
	guo.mutation.RemoveGuildEventIDs(ids...)
	return guo
}

// RemoveGuildEvents removes "guild_events" edges to GuildEvent entities.
func (guo *GuildUpdateOne) RemoveGuildEvents(g ...*GuildEvent) *GuildUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveGuildEventIDs(ids...)
}

// ClearAdmins clears all "admins" edges to the User entity.
func (guo *GuildUpdateOne) ClearAdmins() *GuildUpdateOne {
	guo.mutation.ClearAdmins()
	return guo
}

// RemoveAdminIDs removes the "admins" edge to User entities by IDs.
func (guo *GuildUpdateOne) RemoveAdminIDs(ids ...int) *GuildUpdateOne {
	guo.mutation.RemoveAdminIDs(ids...)
	return guo
}

// RemoveAdmins removes "admins" edges to User entities.
func (guo *GuildUpdateOne) RemoveAdmins(u ...*User) *GuildUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveAdminIDs(ids...)
}

// Where appends a list predicates to the GuildUpdate builder.
func (guo *GuildUpdateOne) Where(ps ...predicate.Guild) *GuildUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GuildUpdateOne) Select(field string, fields ...string) *GuildUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Guild entity.
func (guo *GuildUpdateOne) Save(ctx context.Context) (*Guild, error) {
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Guild, GuildMutation](ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuildUpdateOne) SaveX(ctx context.Context) *Guild {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuildUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuildUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GuildUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdateTime(); !ok {
		if guild.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guild.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guild.UpdateDefaultUpdateTime()
		guo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (guo *GuildUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if v, ok := guo.mutation.IconHash(); ok {
		if err := guild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_hash": %w`, err)}
		}
	}
	if v, ok := guo.mutation.IconURL(); ok {
		if err := guild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_url": %w`, err)}
		}
	}
	if v, ok := guo.mutation.SystemChannelFlags(); ok {
		if err := guild.SystemChannelFlagsValidator(v); err != nil {
			return &ValidationError{Name: "system_channel_flags", err: fmt.Errorf(`ent: validator failed for field "Guild.system_channel_flags": %w`, err)}
		}
	}
	return nil
}

func (guo *GuildUpdateOne) sqlSave(ctx context.Context) (_node *Guild, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guild.Table, guild.Columns, sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guild.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guild.FieldID)
		for _, f := range fields {
			if !guild.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guild.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdateTime(); ok {
		_spec.SetField(guild.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(guild.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Features(); ok {
		_spec.SetField(guild.FieldFeatures, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedFeatures(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, guild.FieldFeatures, value)
		})
	}
	if guo.mutation.FeaturesCleared() {
		_spec.ClearField(guild.FieldFeatures, field.TypeJSON)
	}
	if value, ok := guo.mutation.IconHash(); ok {
		_spec.SetField(guild.FieldIconHash, field.TypeString, value)
	}
	if guo.mutation.IconHashCleared() {
		_spec.ClearField(guild.FieldIconHash, field.TypeString)
	}
	if value, ok := guo.mutation.IconURL(); ok {
		_spec.SetField(guild.FieldIconURL, field.TypeString, value)
	}
	if value, ok := guo.mutation.JoinedAt(); ok {
		_spec.SetField(guild.FieldJoinedAt, field.TypeTime, value)
	}
	if guo.mutation.JoinedAtCleared() {
		_spec.ClearField(guild.FieldJoinedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.Large(); ok {
		_spec.SetField(guild.FieldLarge, field.TypeBool, value)
	}
	if guo.mutation.LargeCleared() {
		_spec.ClearField(guild.FieldLarge, field.TypeBool)
	}
	if value, ok := guo.mutation.MemberCount(); ok {
		_spec.SetField(guild.FieldMemberCount, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedMemberCount(); ok {
		_spec.AddField(guild.FieldMemberCount, field.TypeInt, value)
	}
	if guo.mutation.MemberCountCleared() {
		_spec.ClearField(guild.FieldMemberCount, field.TypeInt)
	}
	if value, ok := guo.mutation.OwnerID(); ok {
		_spec.SetField(guild.FieldOwnerID, field.TypeString, value)
	}
	if guo.mutation.OwnerIDCleared() {
		_spec.ClearField(guild.FieldOwnerID, field.TypeString)
	}
	if value, ok := guo.mutation.Permissions(); ok {
		_spec.SetField(guild.FieldPermissions, field.TypeUint64, value)
	}
	if value, ok := guo.mutation.AddedPermissions(); ok {
		_spec.AddField(guild.FieldPermissions, field.TypeUint64, value)
	}
	if guo.mutation.PermissionsCleared() {
		_spec.ClearField(guild.FieldPermissions, field.TypeUint64)
	}
	if value, ok := guo.mutation.SystemChannelFlags(); ok {
		_spec.SetField(guild.FieldSystemChannelFlags, field.TypeString, value)
	}
	if guo.mutation.SystemChannelFlagsCleared() {
		_spec.ClearField(guild.FieldSystemChannelFlags, field.TypeString)
	}
	if guo.mutation.GuildConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildConfigTable,
			Columns: []string{guild.GuildConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GuildConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildConfigTable,
			Columns: []string{guild.GuildConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GuildAdminConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildAdminConfigTable,
			Columns: []string{guild.GuildAdminConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildadminconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GuildAdminConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildAdminConfigTable,
			Columns: []string{guild.GuildAdminConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildadminconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GuildEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildEventsTable,
			Columns: []string{guild.GuildEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildevent.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGuildEventsIDs(); len(nodes) > 0 && !guo.mutation.GuildEventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildEventsTable,
			Columns: []string{guild.GuildEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GuildEventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildEventsTable,
			Columns: []string{guild.GuildEventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guildevent.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.AdminsTable,
			Columns: guild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedAdminsIDs(); len(nodes) > 0 && !guo.mutation.AdminsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.AdminsTable,
			Columns: guild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   guild.AdminsTable,
			Columns: guild.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guild{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
