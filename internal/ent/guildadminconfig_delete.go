// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/spectrograph/internal/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
)

// GuildAdminConfigDelete is the builder for deleting a GuildAdminConfig entity.
type GuildAdminConfigDelete struct {
	config
	hooks    []Hook
	mutation *GuildAdminConfigMutation
}

// Where appends a list predicates to the GuildAdminConfigDelete builder.
func (gacd *GuildAdminConfigDelete) Where(ps ...predicate.GuildAdminConfig) *GuildAdminConfigDelete {
	gacd.mutation.Where(ps...)
	return gacd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gacd *GuildAdminConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, GuildAdminConfigMutation](ctx, gacd.sqlExec, gacd.mutation, gacd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gacd *GuildAdminConfigDelete) ExecX(ctx context.Context) int {
	n, err := gacd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gacd *GuildAdminConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(guildadminconfig.Table, sqlgraph.NewFieldSpec(guildadminconfig.FieldID, field.TypeInt))
	if ps := gacd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gacd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gacd.mutation.done = true
	return affected, err
}

// GuildAdminConfigDeleteOne is the builder for deleting a single GuildAdminConfig entity.
type GuildAdminConfigDeleteOne struct {
	gacd *GuildAdminConfigDelete
}

// Where appends a list predicates to the GuildAdminConfigDelete builder.
func (gacdo *GuildAdminConfigDeleteOne) Where(ps ...predicate.GuildAdminConfig) *GuildAdminConfigDeleteOne {
	gacdo.gacd.mutation.Where(ps...)
	return gacdo
}

// Exec executes the deletion query.
func (gacdo *GuildAdminConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := gacdo.gacd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{guildadminconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gacdo *GuildAdminConfigDeleteOne) ExecX(ctx context.Context) {
	if err := gacdo.Exec(ctx); err != nil {
		panic(err)
	}
}
