// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/lrstanley/spectrograph/internal/ent/guild"
	"github.com/lrstanley/spectrograph/internal/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
	"github.com/lrstanley/spectrograph/internal/ent/user"
)

// GuildWhereInput represents a where input for filtering Guild queries.
type GuildWhereInput struct {
	Predicates []predicate.Guild  `json:"-"`
	Not        *GuildWhereInput   `json:"not,omitempty"`
	Or         []*GuildWhereInput `json:"or,omitempty"`
	And        []*GuildWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "guild_id" field predicates.
	GuildID             *string  `json:"guildID,omitempty"`
	GuildIDNEQ          *string  `json:"guildIDNEQ,omitempty"`
	GuildIDIn           []string `json:"guildIDIn,omitempty"`
	GuildIDNotIn        []string `json:"guildIDNotIn,omitempty"`
	GuildIDGT           *string  `json:"guildIDGT,omitempty"`
	GuildIDGTE          *string  `json:"guildIDGTE,omitempty"`
	GuildIDLT           *string  `json:"guildIDLT,omitempty"`
	GuildIDLTE          *string  `json:"guildIDLTE,omitempty"`
	GuildIDContains     *string  `json:"guildIDContains,omitempty"`
	GuildIDHasPrefix    *string  `json:"guildIDHasPrefix,omitempty"`
	GuildIDHasSuffix    *string  `json:"guildIDHasSuffix,omitempty"`
	GuildIDEqualFold    *string  `json:"guildIDEqualFold,omitempty"`
	GuildIDContainsFold *string  `json:"guildIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "icon_hash" field predicates.
	IconHash             *string  `json:"iconHash,omitempty"`
	IconHashNEQ          *string  `json:"iconHashNEQ,omitempty"`
	IconHashIn           []string `json:"iconHashIn,omitempty"`
	IconHashNotIn        []string `json:"iconHashNotIn,omitempty"`
	IconHashGT           *string  `json:"iconHashGT,omitempty"`
	IconHashGTE          *string  `json:"iconHashGTE,omitempty"`
	IconHashLT           *string  `json:"iconHashLT,omitempty"`
	IconHashLTE          *string  `json:"iconHashLTE,omitempty"`
	IconHashContains     *string  `json:"iconHashContains,omitempty"`
	IconHashHasPrefix    *string  `json:"iconHashHasPrefix,omitempty"`
	IconHashHasSuffix    *string  `json:"iconHashHasSuffix,omitempty"`
	IconHashIsNil        bool     `json:"iconHashIsNil,omitempty"`
	IconHashNotNil       bool     `json:"iconHashNotNil,omitempty"`
	IconHashEqualFold    *string  `json:"iconHashEqualFold,omitempty"`
	IconHashContainsFold *string  `json:"iconHashContainsFold,omitempty"`

	// "icon_url" field predicates.
	IconURL             *string  `json:"iconURL,omitempty"`
	IconURLNEQ          *string  `json:"iconURLNEQ,omitempty"`
	IconURLIn           []string `json:"iconURLIn,omitempty"`
	IconURLNotIn        []string `json:"iconURLNotIn,omitempty"`
	IconURLGT           *string  `json:"iconURLGT,omitempty"`
	IconURLGTE          *string  `json:"iconURLGTE,omitempty"`
	IconURLLT           *string  `json:"iconURLLT,omitempty"`
	IconURLLTE          *string  `json:"iconURLLTE,omitempty"`
	IconURLContains     *string  `json:"iconURLContains,omitempty"`
	IconURLHasPrefix    *string  `json:"iconURLHasPrefix,omitempty"`
	IconURLHasSuffix    *string  `json:"iconURLHasSuffix,omitempty"`
	IconURLEqualFold    *string  `json:"iconURLEqualFold,omitempty"`
	IconURLContainsFold *string  `json:"iconURLContainsFold,omitempty"`

	// "joined_at" field predicates.
	JoinedAt       *time.Time  `json:"joinedAt,omitempty"`
	JoinedAtNEQ    *time.Time  `json:"joinedAtNEQ,omitempty"`
	JoinedAtIn     []time.Time `json:"joinedAtIn,omitempty"`
	JoinedAtNotIn  []time.Time `json:"joinedAtNotIn,omitempty"`
	JoinedAtGT     *time.Time  `json:"joinedAtGT,omitempty"`
	JoinedAtGTE    *time.Time  `json:"joinedAtGTE,omitempty"`
	JoinedAtLT     *time.Time  `json:"joinedAtLT,omitempty"`
	JoinedAtLTE    *time.Time  `json:"joinedAtLTE,omitempty"`
	JoinedAtIsNil  bool        `json:"joinedAtIsNil,omitempty"`
	JoinedAtNotNil bool        `json:"joinedAtNotNil,omitempty"`

	// "large" field predicates.
	Large       *bool `json:"large,omitempty"`
	LargeNEQ    *bool `json:"largeNEQ,omitempty"`
	LargeIsNil  bool  `json:"largeIsNil,omitempty"`
	LargeNotNil bool  `json:"largeNotNil,omitempty"`

	// "member_count" field predicates.
	MemberCount       *int  `json:"memberCount,omitempty"`
	MemberCountNEQ    *int  `json:"memberCountNEQ,omitempty"`
	MemberCountIn     []int `json:"memberCountIn,omitempty"`
	MemberCountNotIn  []int `json:"memberCountNotIn,omitempty"`
	MemberCountGT     *int  `json:"memberCountGT,omitempty"`
	MemberCountGTE    *int  `json:"memberCountGTE,omitempty"`
	MemberCountLT     *int  `json:"memberCountLT,omitempty"`
	MemberCountLTE    *int  `json:"memberCountLTE,omitempty"`
	MemberCountIsNil  bool  `json:"memberCountIsNil,omitempty"`
	MemberCountNotNil bool  `json:"memberCountNotNil,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDIsNil        bool     `json:"ownerIDIsNil,omitempty"`
	OwnerIDNotNil       bool     `json:"ownerIDNotNil,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "permissions" field predicates.
	Permissions       *uint64  `json:"permissions,omitempty"`
	PermissionsNEQ    *uint64  `json:"permissionsNEQ,omitempty"`
	PermissionsIn     []uint64 `json:"permissionsIn,omitempty"`
	PermissionsNotIn  []uint64 `json:"permissionsNotIn,omitempty"`
	PermissionsGT     *uint64  `json:"permissionsGT,omitempty"`
	PermissionsGTE    *uint64  `json:"permissionsGTE,omitempty"`
	PermissionsLT     *uint64  `json:"permissionsLT,omitempty"`
	PermissionsLTE    *uint64  `json:"permissionsLTE,omitempty"`
	PermissionsIsNil  bool     `json:"permissionsIsNil,omitempty"`
	PermissionsNotNil bool     `json:"permissionsNotNil,omitempty"`

	// "system_channel_flags" field predicates.
	SystemChannelFlags             *string  `json:"systemChannelFlags,omitempty"`
	SystemChannelFlagsNEQ          *string  `json:"systemChannelFlagsNEQ,omitempty"`
	SystemChannelFlagsIn           []string `json:"systemChannelFlagsIn,omitempty"`
	SystemChannelFlagsNotIn        []string `json:"systemChannelFlagsNotIn,omitempty"`
	SystemChannelFlagsGT           *string  `json:"systemChannelFlagsGT,omitempty"`
	SystemChannelFlagsGTE          *string  `json:"systemChannelFlagsGTE,omitempty"`
	SystemChannelFlagsLT           *string  `json:"systemChannelFlagsLT,omitempty"`
	SystemChannelFlagsLTE          *string  `json:"systemChannelFlagsLTE,omitempty"`
	SystemChannelFlagsContains     *string  `json:"systemChannelFlagsContains,omitempty"`
	SystemChannelFlagsHasPrefix    *string  `json:"systemChannelFlagsHasPrefix,omitempty"`
	SystemChannelFlagsHasSuffix    *string  `json:"systemChannelFlagsHasSuffix,omitempty"`
	SystemChannelFlagsIsNil        bool     `json:"systemChannelFlagsIsNil,omitempty"`
	SystemChannelFlagsNotNil       bool     `json:"systemChannelFlagsNotNil,omitempty"`
	SystemChannelFlagsEqualFold    *string  `json:"systemChannelFlagsEqualFold,omitempty"`
	SystemChannelFlagsContainsFold *string  `json:"systemChannelFlagsContainsFold,omitempty"`

	// "guild_config" edge predicates.
	HasGuildConfig     *bool                    `json:"hasGuildConfig,omitempty"`
	HasGuildConfigWith []*GuildConfigWhereInput `json:"hasGuildConfigWith,omitempty"`

	// "guild_admin_config" edge predicates.
	HasGuildAdminConfig     *bool                         `json:"hasGuildAdminConfig,omitempty"`
	HasGuildAdminConfigWith []*GuildAdminConfigWhereInput `json:"hasGuildAdminConfigWith,omitempty"`

	// "guild_events" edge predicates.
	HasGuildEvents     *bool                   `json:"hasGuildEvents,omitempty"`
	HasGuildEventsWith []*GuildEventWhereInput `json:"hasGuildEventsWith,omitempty"`

	// "admins" edge predicates.
	HasAdmins     *bool             `json:"hasAdmins,omitempty"`
	HasAdminsWith []*UserWhereInput `json:"hasAdminsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GuildWhereInput) AddPredicates(predicates ...predicate.Guild) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GuildWhereInput filter on the GuildQuery builder.
func (i *GuildWhereInput) Filter(q *GuildQuery) (*GuildQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGuildWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGuildWhereInput is returned in case the GuildWhereInput is empty.
var ErrEmptyGuildWhereInput = errors.New("ent: empty predicate GuildWhereInput")

// P returns a predicate for filtering guilds.
// An error is returned if the input is empty or invalid.
func (i *GuildWhereInput) P() (predicate.Guild, error) {
	var predicates []predicate.Guild
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, guild.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Guild, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, guild.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Guild, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, guild.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, guild.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, guild.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, guild.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, guild.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, guild.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, guild.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, guild.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, guild.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, guild.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, guild.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, guild.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, guild.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, guild.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, guild.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, guild.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, guild.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, guild.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, guild.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, guild.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, guild.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, guild.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, guild.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, guild.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, guild.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.GuildID != nil {
		predicates = append(predicates, guild.GuildIDEQ(*i.GuildID))
	}
	if i.GuildIDNEQ != nil {
		predicates = append(predicates, guild.GuildIDNEQ(*i.GuildIDNEQ))
	}
	if len(i.GuildIDIn) > 0 {
		predicates = append(predicates, guild.GuildIDIn(i.GuildIDIn...))
	}
	if len(i.GuildIDNotIn) > 0 {
		predicates = append(predicates, guild.GuildIDNotIn(i.GuildIDNotIn...))
	}
	if i.GuildIDGT != nil {
		predicates = append(predicates, guild.GuildIDGT(*i.GuildIDGT))
	}
	if i.GuildIDGTE != nil {
		predicates = append(predicates, guild.GuildIDGTE(*i.GuildIDGTE))
	}
	if i.GuildIDLT != nil {
		predicates = append(predicates, guild.GuildIDLT(*i.GuildIDLT))
	}
	if i.GuildIDLTE != nil {
		predicates = append(predicates, guild.GuildIDLTE(*i.GuildIDLTE))
	}
	if i.GuildIDContains != nil {
		predicates = append(predicates, guild.GuildIDContains(*i.GuildIDContains))
	}
	if i.GuildIDHasPrefix != nil {
		predicates = append(predicates, guild.GuildIDHasPrefix(*i.GuildIDHasPrefix))
	}
	if i.GuildIDHasSuffix != nil {
		predicates = append(predicates, guild.GuildIDHasSuffix(*i.GuildIDHasSuffix))
	}
	if i.GuildIDEqualFold != nil {
		predicates = append(predicates, guild.GuildIDEqualFold(*i.GuildIDEqualFold))
	}
	if i.GuildIDContainsFold != nil {
		predicates = append(predicates, guild.GuildIDContainsFold(*i.GuildIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, guild.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, guild.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, guild.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, guild.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, guild.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, guild.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, guild.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, guild.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, guild.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, guild.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, guild.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, guild.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, guild.NameContainsFold(*i.NameContainsFold))
	}
	if i.IconHash != nil {
		predicates = append(predicates, guild.IconHashEQ(*i.IconHash))
	}
	if i.IconHashNEQ != nil {
		predicates = append(predicates, guild.IconHashNEQ(*i.IconHashNEQ))
	}
	if len(i.IconHashIn) > 0 {
		predicates = append(predicates, guild.IconHashIn(i.IconHashIn...))
	}
	if len(i.IconHashNotIn) > 0 {
		predicates = append(predicates, guild.IconHashNotIn(i.IconHashNotIn...))
	}
	if i.IconHashGT != nil {
		predicates = append(predicates, guild.IconHashGT(*i.IconHashGT))
	}
	if i.IconHashGTE != nil {
		predicates = append(predicates, guild.IconHashGTE(*i.IconHashGTE))
	}
	if i.IconHashLT != nil {
		predicates = append(predicates, guild.IconHashLT(*i.IconHashLT))
	}
	if i.IconHashLTE != nil {
		predicates = append(predicates, guild.IconHashLTE(*i.IconHashLTE))
	}
	if i.IconHashContains != nil {
		predicates = append(predicates, guild.IconHashContains(*i.IconHashContains))
	}
	if i.IconHashHasPrefix != nil {
		predicates = append(predicates, guild.IconHashHasPrefix(*i.IconHashHasPrefix))
	}
	if i.IconHashHasSuffix != nil {
		predicates = append(predicates, guild.IconHashHasSuffix(*i.IconHashHasSuffix))
	}
	if i.IconHashIsNil {
		predicates = append(predicates, guild.IconHashIsNil())
	}
	if i.IconHashNotNil {
		predicates = append(predicates, guild.IconHashNotNil())
	}
	if i.IconHashEqualFold != nil {
		predicates = append(predicates, guild.IconHashEqualFold(*i.IconHashEqualFold))
	}
	if i.IconHashContainsFold != nil {
		predicates = append(predicates, guild.IconHashContainsFold(*i.IconHashContainsFold))
	}
	if i.IconURL != nil {
		predicates = append(predicates, guild.IconURLEQ(*i.IconURL))
	}
	if i.IconURLNEQ != nil {
		predicates = append(predicates, guild.IconURLNEQ(*i.IconURLNEQ))
	}
	if len(i.IconURLIn) > 0 {
		predicates = append(predicates, guild.IconURLIn(i.IconURLIn...))
	}
	if len(i.IconURLNotIn) > 0 {
		predicates = append(predicates, guild.IconURLNotIn(i.IconURLNotIn...))
	}
	if i.IconURLGT != nil {
		predicates = append(predicates, guild.IconURLGT(*i.IconURLGT))
	}
	if i.IconURLGTE != nil {
		predicates = append(predicates, guild.IconURLGTE(*i.IconURLGTE))
	}
	if i.IconURLLT != nil {
		predicates = append(predicates, guild.IconURLLT(*i.IconURLLT))
	}
	if i.IconURLLTE != nil {
		predicates = append(predicates, guild.IconURLLTE(*i.IconURLLTE))
	}
	if i.IconURLContains != nil {
		predicates = append(predicates, guild.IconURLContains(*i.IconURLContains))
	}
	if i.IconURLHasPrefix != nil {
		predicates = append(predicates, guild.IconURLHasPrefix(*i.IconURLHasPrefix))
	}
	if i.IconURLHasSuffix != nil {
		predicates = append(predicates, guild.IconURLHasSuffix(*i.IconURLHasSuffix))
	}
	if i.IconURLEqualFold != nil {
		predicates = append(predicates, guild.IconURLEqualFold(*i.IconURLEqualFold))
	}
	if i.IconURLContainsFold != nil {
		predicates = append(predicates, guild.IconURLContainsFold(*i.IconURLContainsFold))
	}
	if i.JoinedAt != nil {
		predicates = append(predicates, guild.JoinedAtEQ(*i.JoinedAt))
	}
	if i.JoinedAtNEQ != nil {
		predicates = append(predicates, guild.JoinedAtNEQ(*i.JoinedAtNEQ))
	}
	if len(i.JoinedAtIn) > 0 {
		predicates = append(predicates, guild.JoinedAtIn(i.JoinedAtIn...))
	}
	if len(i.JoinedAtNotIn) > 0 {
		predicates = append(predicates, guild.JoinedAtNotIn(i.JoinedAtNotIn...))
	}
	if i.JoinedAtGT != nil {
		predicates = append(predicates, guild.JoinedAtGT(*i.JoinedAtGT))
	}
	if i.JoinedAtGTE != nil {
		predicates = append(predicates, guild.JoinedAtGTE(*i.JoinedAtGTE))
	}
	if i.JoinedAtLT != nil {
		predicates = append(predicates, guild.JoinedAtLT(*i.JoinedAtLT))
	}
	if i.JoinedAtLTE != nil {
		predicates = append(predicates, guild.JoinedAtLTE(*i.JoinedAtLTE))
	}
	if i.JoinedAtIsNil {
		predicates = append(predicates, guild.JoinedAtIsNil())
	}
	if i.JoinedAtNotNil {
		predicates = append(predicates, guild.JoinedAtNotNil())
	}
	if i.Large != nil {
		predicates = append(predicates, guild.LargeEQ(*i.Large))
	}
	if i.LargeNEQ != nil {
		predicates = append(predicates, guild.LargeNEQ(*i.LargeNEQ))
	}
	if i.LargeIsNil {
		predicates = append(predicates, guild.LargeIsNil())
	}
	if i.LargeNotNil {
		predicates = append(predicates, guild.LargeNotNil())
	}
	if i.MemberCount != nil {
		predicates = append(predicates, guild.MemberCountEQ(*i.MemberCount))
	}
	if i.MemberCountNEQ != nil {
		predicates = append(predicates, guild.MemberCountNEQ(*i.MemberCountNEQ))
	}
	if len(i.MemberCountIn) > 0 {
		predicates = append(predicates, guild.MemberCountIn(i.MemberCountIn...))
	}
	if len(i.MemberCountNotIn) > 0 {
		predicates = append(predicates, guild.MemberCountNotIn(i.MemberCountNotIn...))
	}
	if i.MemberCountGT != nil {
		predicates = append(predicates, guild.MemberCountGT(*i.MemberCountGT))
	}
	if i.MemberCountGTE != nil {
		predicates = append(predicates, guild.MemberCountGTE(*i.MemberCountGTE))
	}
	if i.MemberCountLT != nil {
		predicates = append(predicates, guild.MemberCountLT(*i.MemberCountLT))
	}
	if i.MemberCountLTE != nil {
		predicates = append(predicates, guild.MemberCountLTE(*i.MemberCountLTE))
	}
	if i.MemberCountIsNil {
		predicates = append(predicates, guild.MemberCountIsNil())
	}
	if i.MemberCountNotNil {
		predicates = append(predicates, guild.MemberCountNotNil())
	}
	if i.OwnerID != nil {
		predicates = append(predicates, guild.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, guild.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, guild.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, guild.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, guild.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, guild.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, guild.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, guild.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, guild.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, guild.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, guild.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDIsNil {
		predicates = append(predicates, guild.OwnerIDIsNil())
	}
	if i.OwnerIDNotNil {
		predicates = append(predicates, guild.OwnerIDNotNil())
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, guild.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, guild.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Permissions != nil {
		predicates = append(predicates, guild.PermissionsEQ(*i.Permissions))
	}
	if i.PermissionsNEQ != nil {
		predicates = append(predicates, guild.PermissionsNEQ(*i.PermissionsNEQ))
	}
	if len(i.PermissionsIn) > 0 {
		predicates = append(predicates, guild.PermissionsIn(i.PermissionsIn...))
	}
	if len(i.PermissionsNotIn) > 0 {
		predicates = append(predicates, guild.PermissionsNotIn(i.PermissionsNotIn...))
	}
	if i.PermissionsGT != nil {
		predicates = append(predicates, guild.PermissionsGT(*i.PermissionsGT))
	}
	if i.PermissionsGTE != nil {
		predicates = append(predicates, guild.PermissionsGTE(*i.PermissionsGTE))
	}
	if i.PermissionsLT != nil {
		predicates = append(predicates, guild.PermissionsLT(*i.PermissionsLT))
	}
	if i.PermissionsLTE != nil {
		predicates = append(predicates, guild.PermissionsLTE(*i.PermissionsLTE))
	}
	if i.PermissionsIsNil {
		predicates = append(predicates, guild.PermissionsIsNil())
	}
	if i.PermissionsNotNil {
		predicates = append(predicates, guild.PermissionsNotNil())
	}
	if i.SystemChannelFlags != nil {
		predicates = append(predicates, guild.SystemChannelFlagsEQ(*i.SystemChannelFlags))
	}
	if i.SystemChannelFlagsNEQ != nil {
		predicates = append(predicates, guild.SystemChannelFlagsNEQ(*i.SystemChannelFlagsNEQ))
	}
	if len(i.SystemChannelFlagsIn) > 0 {
		predicates = append(predicates, guild.SystemChannelFlagsIn(i.SystemChannelFlagsIn...))
	}
	if len(i.SystemChannelFlagsNotIn) > 0 {
		predicates = append(predicates, guild.SystemChannelFlagsNotIn(i.SystemChannelFlagsNotIn...))
	}
	if i.SystemChannelFlagsGT != nil {
		predicates = append(predicates, guild.SystemChannelFlagsGT(*i.SystemChannelFlagsGT))
	}
	if i.SystemChannelFlagsGTE != nil {
		predicates = append(predicates, guild.SystemChannelFlagsGTE(*i.SystemChannelFlagsGTE))
	}
	if i.SystemChannelFlagsLT != nil {
		predicates = append(predicates, guild.SystemChannelFlagsLT(*i.SystemChannelFlagsLT))
	}
	if i.SystemChannelFlagsLTE != nil {
		predicates = append(predicates, guild.SystemChannelFlagsLTE(*i.SystemChannelFlagsLTE))
	}
	if i.SystemChannelFlagsContains != nil {
		predicates = append(predicates, guild.SystemChannelFlagsContains(*i.SystemChannelFlagsContains))
	}
	if i.SystemChannelFlagsHasPrefix != nil {
		predicates = append(predicates, guild.SystemChannelFlagsHasPrefix(*i.SystemChannelFlagsHasPrefix))
	}
	if i.SystemChannelFlagsHasSuffix != nil {
		predicates = append(predicates, guild.SystemChannelFlagsHasSuffix(*i.SystemChannelFlagsHasSuffix))
	}
	if i.SystemChannelFlagsIsNil {
		predicates = append(predicates, guild.SystemChannelFlagsIsNil())
	}
	if i.SystemChannelFlagsNotNil {
		predicates = append(predicates, guild.SystemChannelFlagsNotNil())
	}
	if i.SystemChannelFlagsEqualFold != nil {
		predicates = append(predicates, guild.SystemChannelFlagsEqualFold(*i.SystemChannelFlagsEqualFold))
	}
	if i.SystemChannelFlagsContainsFold != nil {
		predicates = append(predicates, guild.SystemChannelFlagsContainsFold(*i.SystemChannelFlagsContainsFold))
	}

	if i.HasGuildConfig != nil {
		p := guild.HasGuildConfig()
		if !*i.HasGuildConfig {
			p = guild.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildConfigWith) > 0 {
		with := make([]predicate.GuildConfig, 0, len(i.HasGuildConfigWith))
		for _, w := range i.HasGuildConfigWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildConfigWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guild.HasGuildConfigWith(with...))
	}
	if i.HasGuildAdminConfig != nil {
		p := guild.HasGuildAdminConfig()
		if !*i.HasGuildAdminConfig {
			p = guild.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildAdminConfigWith) > 0 {
		with := make([]predicate.GuildAdminConfig, 0, len(i.HasGuildAdminConfigWith))
		for _, w := range i.HasGuildAdminConfigWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildAdminConfigWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guild.HasGuildAdminConfigWith(with...))
	}
	if i.HasGuildEvents != nil {
		p := guild.HasGuildEvents()
		if !*i.HasGuildEvents {
			p = guild.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildEventsWith) > 0 {
		with := make([]predicate.GuildEvent, 0, len(i.HasGuildEventsWith))
		for _, w := range i.HasGuildEventsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildEventsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guild.HasGuildEventsWith(with...))
	}
	if i.HasAdmins != nil {
		p := guild.HasAdmins()
		if !*i.HasAdmins {
			p = guild.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAdminsWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasAdminsWith))
		for _, w := range i.HasAdminsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAdminsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guild.HasAdminsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGuildWhereInput
	case 1:
		return predicates[0], nil
	default:
		return guild.And(predicates...), nil
	}
}

// GuildAdminConfigWhereInput represents a where input for filtering GuildAdminConfig queries.
type GuildAdminConfigWhereInput struct {
	Predicates []predicate.GuildAdminConfig  `json:"-"`
	Not        *GuildAdminConfigWhereInput   `json:"not,omitempty"`
	Or         []*GuildAdminConfigWhereInput `json:"or,omitempty"`
	And        []*GuildAdminConfigWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "enabled" field predicates.
	Enabled       *bool `json:"enabled,omitempty"`
	EnabledNEQ    *bool `json:"enabledNEQ,omitempty"`
	EnabledIsNil  bool  `json:"enabledIsNil,omitempty"`
	EnabledNotNil bool  `json:"enabledNotNil,omitempty"`

	// "default_max_channels" field predicates.
	DefaultMaxChannels       *int  `json:"defaultMaxChannels,omitempty"`
	DefaultMaxChannelsNEQ    *int  `json:"defaultMaxChannelsNEQ,omitempty"`
	DefaultMaxChannelsIn     []int `json:"defaultMaxChannelsIn,omitempty"`
	DefaultMaxChannelsNotIn  []int `json:"defaultMaxChannelsNotIn,omitempty"`
	DefaultMaxChannelsGT     *int  `json:"defaultMaxChannelsGT,omitempty"`
	DefaultMaxChannelsGTE    *int  `json:"defaultMaxChannelsGTE,omitempty"`
	DefaultMaxChannelsLT     *int  `json:"defaultMaxChannelsLT,omitempty"`
	DefaultMaxChannelsLTE    *int  `json:"defaultMaxChannelsLTE,omitempty"`
	DefaultMaxChannelsIsNil  bool  `json:"defaultMaxChannelsIsNil,omitempty"`
	DefaultMaxChannelsNotNil bool  `json:"defaultMaxChannelsNotNil,omitempty"`

	// "default_max_clones" field predicates.
	DefaultMaxClones       *int  `json:"defaultMaxClones,omitempty"`
	DefaultMaxClonesNEQ    *int  `json:"defaultMaxClonesNEQ,omitempty"`
	DefaultMaxClonesIn     []int `json:"defaultMaxClonesIn,omitempty"`
	DefaultMaxClonesNotIn  []int `json:"defaultMaxClonesNotIn,omitempty"`
	DefaultMaxClonesGT     *int  `json:"defaultMaxClonesGT,omitempty"`
	DefaultMaxClonesGTE    *int  `json:"defaultMaxClonesGTE,omitempty"`
	DefaultMaxClonesLT     *int  `json:"defaultMaxClonesLT,omitempty"`
	DefaultMaxClonesLTE    *int  `json:"defaultMaxClonesLTE,omitempty"`
	DefaultMaxClonesIsNil  bool  `json:"defaultMaxClonesIsNil,omitempty"`
	DefaultMaxClonesNotNil bool  `json:"defaultMaxClonesNotNil,omitempty"`

	// "comment" field predicates.
	Comment             *string  `json:"comment,omitempty"`
	CommentNEQ          *string  `json:"commentNEQ,omitempty"`
	CommentIn           []string `json:"commentIn,omitempty"`
	CommentNotIn        []string `json:"commentNotIn,omitempty"`
	CommentGT           *string  `json:"commentGT,omitempty"`
	CommentGTE          *string  `json:"commentGTE,omitempty"`
	CommentLT           *string  `json:"commentLT,omitempty"`
	CommentLTE          *string  `json:"commentLTE,omitempty"`
	CommentContains     *string  `json:"commentContains,omitempty"`
	CommentHasPrefix    *string  `json:"commentHasPrefix,omitempty"`
	CommentHasSuffix    *string  `json:"commentHasSuffix,omitempty"`
	CommentIsNil        bool     `json:"commentIsNil,omitempty"`
	CommentNotNil       bool     `json:"commentNotNil,omitempty"`
	CommentEqualFold    *string  `json:"commentEqualFold,omitempty"`
	CommentContainsFold *string  `json:"commentContainsFold,omitempty"`

	// "guild" edge predicates.
	HasGuild     *bool              `json:"hasGuild,omitempty"`
	HasGuildWith []*GuildWhereInput `json:"hasGuildWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GuildAdminConfigWhereInput) AddPredicates(predicates ...predicate.GuildAdminConfig) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GuildAdminConfigWhereInput filter on the GuildAdminConfigQuery builder.
func (i *GuildAdminConfigWhereInput) Filter(q *GuildAdminConfigQuery) (*GuildAdminConfigQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGuildAdminConfigWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGuildAdminConfigWhereInput is returned in case the GuildAdminConfigWhereInput is empty.
var ErrEmptyGuildAdminConfigWhereInput = errors.New("ent: empty predicate GuildAdminConfigWhereInput")

// P returns a predicate for filtering guildadminconfigs.
// An error is returned if the input is empty or invalid.
func (i *GuildAdminConfigWhereInput) P() (predicate.GuildAdminConfig, error) {
	var predicates []predicate.GuildAdminConfig
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, guildadminconfig.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GuildAdminConfig, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, guildadminconfig.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GuildAdminConfig, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, guildadminconfig.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, guildadminconfig.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, guildadminconfig.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, guildadminconfig.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, guildadminconfig.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, guildadminconfig.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, guildadminconfig.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, guildadminconfig.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, guildadminconfig.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, guildadminconfig.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, guildadminconfig.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, guildadminconfig.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, guildadminconfig.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, guildadminconfig.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, guildadminconfig.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, guildadminconfig.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, guildadminconfig.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, guildadminconfig.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, guildadminconfig.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, guildadminconfig.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, guildadminconfig.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, guildadminconfig.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, guildadminconfig.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, guildadminconfig.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, guildadminconfig.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Enabled != nil {
		predicates = append(predicates, guildadminconfig.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, guildadminconfig.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.EnabledIsNil {
		predicates = append(predicates, guildadminconfig.EnabledIsNil())
	}
	if i.EnabledNotNil {
		predicates = append(predicates, guildadminconfig.EnabledNotNil())
	}
	if i.DefaultMaxChannels != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsEQ(*i.DefaultMaxChannels))
	}
	if i.DefaultMaxChannelsNEQ != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsNEQ(*i.DefaultMaxChannelsNEQ))
	}
	if len(i.DefaultMaxChannelsIn) > 0 {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsIn(i.DefaultMaxChannelsIn...))
	}
	if len(i.DefaultMaxChannelsNotIn) > 0 {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsNotIn(i.DefaultMaxChannelsNotIn...))
	}
	if i.DefaultMaxChannelsGT != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsGT(*i.DefaultMaxChannelsGT))
	}
	if i.DefaultMaxChannelsGTE != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsGTE(*i.DefaultMaxChannelsGTE))
	}
	if i.DefaultMaxChannelsLT != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsLT(*i.DefaultMaxChannelsLT))
	}
	if i.DefaultMaxChannelsLTE != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsLTE(*i.DefaultMaxChannelsLTE))
	}
	if i.DefaultMaxChannelsIsNil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsIsNil())
	}
	if i.DefaultMaxChannelsNotNil {
		predicates = append(predicates, guildadminconfig.DefaultMaxChannelsNotNil())
	}
	if i.DefaultMaxClones != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesEQ(*i.DefaultMaxClones))
	}
	if i.DefaultMaxClonesNEQ != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesNEQ(*i.DefaultMaxClonesNEQ))
	}
	if len(i.DefaultMaxClonesIn) > 0 {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesIn(i.DefaultMaxClonesIn...))
	}
	if len(i.DefaultMaxClonesNotIn) > 0 {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesNotIn(i.DefaultMaxClonesNotIn...))
	}
	if i.DefaultMaxClonesGT != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesGT(*i.DefaultMaxClonesGT))
	}
	if i.DefaultMaxClonesGTE != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesGTE(*i.DefaultMaxClonesGTE))
	}
	if i.DefaultMaxClonesLT != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesLT(*i.DefaultMaxClonesLT))
	}
	if i.DefaultMaxClonesLTE != nil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesLTE(*i.DefaultMaxClonesLTE))
	}
	if i.DefaultMaxClonesIsNil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesIsNil())
	}
	if i.DefaultMaxClonesNotNil {
		predicates = append(predicates, guildadminconfig.DefaultMaxClonesNotNil())
	}
	if i.Comment != nil {
		predicates = append(predicates, guildadminconfig.CommentEQ(*i.Comment))
	}
	if i.CommentNEQ != nil {
		predicates = append(predicates, guildadminconfig.CommentNEQ(*i.CommentNEQ))
	}
	if len(i.CommentIn) > 0 {
		predicates = append(predicates, guildadminconfig.CommentIn(i.CommentIn...))
	}
	if len(i.CommentNotIn) > 0 {
		predicates = append(predicates, guildadminconfig.CommentNotIn(i.CommentNotIn...))
	}
	if i.CommentGT != nil {
		predicates = append(predicates, guildadminconfig.CommentGT(*i.CommentGT))
	}
	if i.CommentGTE != nil {
		predicates = append(predicates, guildadminconfig.CommentGTE(*i.CommentGTE))
	}
	if i.CommentLT != nil {
		predicates = append(predicates, guildadminconfig.CommentLT(*i.CommentLT))
	}
	if i.CommentLTE != nil {
		predicates = append(predicates, guildadminconfig.CommentLTE(*i.CommentLTE))
	}
	if i.CommentContains != nil {
		predicates = append(predicates, guildadminconfig.CommentContains(*i.CommentContains))
	}
	if i.CommentHasPrefix != nil {
		predicates = append(predicates, guildadminconfig.CommentHasPrefix(*i.CommentHasPrefix))
	}
	if i.CommentHasSuffix != nil {
		predicates = append(predicates, guildadminconfig.CommentHasSuffix(*i.CommentHasSuffix))
	}
	if i.CommentIsNil {
		predicates = append(predicates, guildadminconfig.CommentIsNil())
	}
	if i.CommentNotNil {
		predicates = append(predicates, guildadminconfig.CommentNotNil())
	}
	if i.CommentEqualFold != nil {
		predicates = append(predicates, guildadminconfig.CommentEqualFold(*i.CommentEqualFold))
	}
	if i.CommentContainsFold != nil {
		predicates = append(predicates, guildadminconfig.CommentContainsFold(*i.CommentContainsFold))
	}

	if i.HasGuild != nil {
		p := guildadminconfig.HasGuild()
		if !*i.HasGuild {
			p = guildadminconfig.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildWith) > 0 {
		with := make([]predicate.Guild, 0, len(i.HasGuildWith))
		for _, w := range i.HasGuildWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guildadminconfig.HasGuildWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGuildAdminConfigWhereInput
	case 1:
		return predicates[0], nil
	default:
		return guildadminconfig.And(predicates...), nil
	}
}

// GuildConfigWhereInput represents a where input for filtering GuildConfig queries.
type GuildConfigWhereInput struct {
	Predicates []predicate.GuildConfig  `json:"-"`
	Not        *GuildConfigWhereInput   `json:"not,omitempty"`
	Or         []*GuildConfigWhereInput `json:"or,omitempty"`
	And        []*GuildConfigWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "enabled" field predicates.
	Enabled       *bool `json:"enabled,omitempty"`
	EnabledNEQ    *bool `json:"enabledNEQ,omitempty"`
	EnabledIsNil  bool  `json:"enabledIsNil,omitempty"`
	EnabledNotNil bool  `json:"enabledNotNil,omitempty"`

	// "default_max_clones" field predicates.
	DefaultMaxClones       *int  `json:"defaultMaxClones,omitempty"`
	DefaultMaxClonesNEQ    *int  `json:"defaultMaxClonesNEQ,omitempty"`
	DefaultMaxClonesIn     []int `json:"defaultMaxClonesIn,omitempty"`
	DefaultMaxClonesNotIn  []int `json:"defaultMaxClonesNotIn,omitempty"`
	DefaultMaxClonesGT     *int  `json:"defaultMaxClonesGT,omitempty"`
	DefaultMaxClonesGTE    *int  `json:"defaultMaxClonesGTE,omitempty"`
	DefaultMaxClonesLT     *int  `json:"defaultMaxClonesLT,omitempty"`
	DefaultMaxClonesLTE    *int  `json:"defaultMaxClonesLTE,omitempty"`
	DefaultMaxClonesIsNil  bool  `json:"defaultMaxClonesIsNil,omitempty"`
	DefaultMaxClonesNotNil bool  `json:"defaultMaxClonesNotNil,omitempty"`

	// "regex_match" field predicates.
	RegexMatch             *string  `json:"regexMatch,omitempty"`
	RegexMatchNEQ          *string  `json:"regexMatchNEQ,omitempty"`
	RegexMatchIn           []string `json:"regexMatchIn,omitempty"`
	RegexMatchNotIn        []string `json:"regexMatchNotIn,omitempty"`
	RegexMatchGT           *string  `json:"regexMatchGT,omitempty"`
	RegexMatchGTE          *string  `json:"regexMatchGTE,omitempty"`
	RegexMatchLT           *string  `json:"regexMatchLT,omitempty"`
	RegexMatchLTE          *string  `json:"regexMatchLTE,omitempty"`
	RegexMatchContains     *string  `json:"regexMatchContains,omitempty"`
	RegexMatchHasPrefix    *string  `json:"regexMatchHasPrefix,omitempty"`
	RegexMatchHasSuffix    *string  `json:"regexMatchHasSuffix,omitempty"`
	RegexMatchIsNil        bool     `json:"regexMatchIsNil,omitempty"`
	RegexMatchNotNil       bool     `json:"regexMatchNotNil,omitempty"`
	RegexMatchEqualFold    *string  `json:"regexMatchEqualFold,omitempty"`
	RegexMatchContainsFold *string  `json:"regexMatchContainsFold,omitempty"`

	// "contact_email" field predicates.
	ContactEmail             *string  `json:"contactEmail,omitempty"`
	ContactEmailNEQ          *string  `json:"contactEmailNEQ,omitempty"`
	ContactEmailIn           []string `json:"contactEmailIn,omitempty"`
	ContactEmailNotIn        []string `json:"contactEmailNotIn,omitempty"`
	ContactEmailGT           *string  `json:"contactEmailGT,omitempty"`
	ContactEmailGTE          *string  `json:"contactEmailGTE,omitempty"`
	ContactEmailLT           *string  `json:"contactEmailLT,omitempty"`
	ContactEmailLTE          *string  `json:"contactEmailLTE,omitempty"`
	ContactEmailContains     *string  `json:"contactEmailContains,omitempty"`
	ContactEmailHasPrefix    *string  `json:"contactEmailHasPrefix,omitempty"`
	ContactEmailHasSuffix    *string  `json:"contactEmailHasSuffix,omitempty"`
	ContactEmailIsNil        bool     `json:"contactEmailIsNil,omitempty"`
	ContactEmailNotNil       bool     `json:"contactEmailNotNil,omitempty"`
	ContactEmailEqualFold    *string  `json:"contactEmailEqualFold,omitempty"`
	ContactEmailContainsFold *string  `json:"contactEmailContainsFold,omitempty"`

	// "guild" edge predicates.
	HasGuild     *bool              `json:"hasGuild,omitempty"`
	HasGuildWith []*GuildWhereInput `json:"hasGuildWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GuildConfigWhereInput) AddPredicates(predicates ...predicate.GuildConfig) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GuildConfigWhereInput filter on the GuildConfigQuery builder.
func (i *GuildConfigWhereInput) Filter(q *GuildConfigQuery) (*GuildConfigQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGuildConfigWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGuildConfigWhereInput is returned in case the GuildConfigWhereInput is empty.
var ErrEmptyGuildConfigWhereInput = errors.New("ent: empty predicate GuildConfigWhereInput")

// P returns a predicate for filtering guildconfigs.
// An error is returned if the input is empty or invalid.
func (i *GuildConfigWhereInput) P() (predicate.GuildConfig, error) {
	var predicates []predicate.GuildConfig
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, guildconfig.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GuildConfig, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, guildconfig.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GuildConfig, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, guildconfig.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, guildconfig.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, guildconfig.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, guildconfig.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, guildconfig.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, guildconfig.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, guildconfig.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, guildconfig.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, guildconfig.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, guildconfig.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, guildconfig.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, guildconfig.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, guildconfig.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, guildconfig.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, guildconfig.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, guildconfig.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, guildconfig.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, guildconfig.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, guildconfig.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, guildconfig.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, guildconfig.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, guildconfig.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, guildconfig.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, guildconfig.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, guildconfig.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Enabled != nil {
		predicates = append(predicates, guildconfig.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, guildconfig.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.EnabledIsNil {
		predicates = append(predicates, guildconfig.EnabledIsNil())
	}
	if i.EnabledNotNil {
		predicates = append(predicates, guildconfig.EnabledNotNil())
	}
	if i.DefaultMaxClones != nil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesEQ(*i.DefaultMaxClones))
	}
	if i.DefaultMaxClonesNEQ != nil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesNEQ(*i.DefaultMaxClonesNEQ))
	}
	if len(i.DefaultMaxClonesIn) > 0 {
		predicates = append(predicates, guildconfig.DefaultMaxClonesIn(i.DefaultMaxClonesIn...))
	}
	if len(i.DefaultMaxClonesNotIn) > 0 {
		predicates = append(predicates, guildconfig.DefaultMaxClonesNotIn(i.DefaultMaxClonesNotIn...))
	}
	if i.DefaultMaxClonesGT != nil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesGT(*i.DefaultMaxClonesGT))
	}
	if i.DefaultMaxClonesGTE != nil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesGTE(*i.DefaultMaxClonesGTE))
	}
	if i.DefaultMaxClonesLT != nil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesLT(*i.DefaultMaxClonesLT))
	}
	if i.DefaultMaxClonesLTE != nil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesLTE(*i.DefaultMaxClonesLTE))
	}
	if i.DefaultMaxClonesIsNil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesIsNil())
	}
	if i.DefaultMaxClonesNotNil {
		predicates = append(predicates, guildconfig.DefaultMaxClonesNotNil())
	}
	if i.RegexMatch != nil {
		predicates = append(predicates, guildconfig.RegexMatchEQ(*i.RegexMatch))
	}
	if i.RegexMatchNEQ != nil {
		predicates = append(predicates, guildconfig.RegexMatchNEQ(*i.RegexMatchNEQ))
	}
	if len(i.RegexMatchIn) > 0 {
		predicates = append(predicates, guildconfig.RegexMatchIn(i.RegexMatchIn...))
	}
	if len(i.RegexMatchNotIn) > 0 {
		predicates = append(predicates, guildconfig.RegexMatchNotIn(i.RegexMatchNotIn...))
	}
	if i.RegexMatchGT != nil {
		predicates = append(predicates, guildconfig.RegexMatchGT(*i.RegexMatchGT))
	}
	if i.RegexMatchGTE != nil {
		predicates = append(predicates, guildconfig.RegexMatchGTE(*i.RegexMatchGTE))
	}
	if i.RegexMatchLT != nil {
		predicates = append(predicates, guildconfig.RegexMatchLT(*i.RegexMatchLT))
	}
	if i.RegexMatchLTE != nil {
		predicates = append(predicates, guildconfig.RegexMatchLTE(*i.RegexMatchLTE))
	}
	if i.RegexMatchContains != nil {
		predicates = append(predicates, guildconfig.RegexMatchContains(*i.RegexMatchContains))
	}
	if i.RegexMatchHasPrefix != nil {
		predicates = append(predicates, guildconfig.RegexMatchHasPrefix(*i.RegexMatchHasPrefix))
	}
	if i.RegexMatchHasSuffix != nil {
		predicates = append(predicates, guildconfig.RegexMatchHasSuffix(*i.RegexMatchHasSuffix))
	}
	if i.RegexMatchIsNil {
		predicates = append(predicates, guildconfig.RegexMatchIsNil())
	}
	if i.RegexMatchNotNil {
		predicates = append(predicates, guildconfig.RegexMatchNotNil())
	}
	if i.RegexMatchEqualFold != nil {
		predicates = append(predicates, guildconfig.RegexMatchEqualFold(*i.RegexMatchEqualFold))
	}
	if i.RegexMatchContainsFold != nil {
		predicates = append(predicates, guildconfig.RegexMatchContainsFold(*i.RegexMatchContainsFold))
	}
	if i.ContactEmail != nil {
		predicates = append(predicates, guildconfig.ContactEmailEQ(*i.ContactEmail))
	}
	if i.ContactEmailNEQ != nil {
		predicates = append(predicates, guildconfig.ContactEmailNEQ(*i.ContactEmailNEQ))
	}
	if len(i.ContactEmailIn) > 0 {
		predicates = append(predicates, guildconfig.ContactEmailIn(i.ContactEmailIn...))
	}
	if len(i.ContactEmailNotIn) > 0 {
		predicates = append(predicates, guildconfig.ContactEmailNotIn(i.ContactEmailNotIn...))
	}
	if i.ContactEmailGT != nil {
		predicates = append(predicates, guildconfig.ContactEmailGT(*i.ContactEmailGT))
	}
	if i.ContactEmailGTE != nil {
		predicates = append(predicates, guildconfig.ContactEmailGTE(*i.ContactEmailGTE))
	}
	if i.ContactEmailLT != nil {
		predicates = append(predicates, guildconfig.ContactEmailLT(*i.ContactEmailLT))
	}
	if i.ContactEmailLTE != nil {
		predicates = append(predicates, guildconfig.ContactEmailLTE(*i.ContactEmailLTE))
	}
	if i.ContactEmailContains != nil {
		predicates = append(predicates, guildconfig.ContactEmailContains(*i.ContactEmailContains))
	}
	if i.ContactEmailHasPrefix != nil {
		predicates = append(predicates, guildconfig.ContactEmailHasPrefix(*i.ContactEmailHasPrefix))
	}
	if i.ContactEmailHasSuffix != nil {
		predicates = append(predicates, guildconfig.ContactEmailHasSuffix(*i.ContactEmailHasSuffix))
	}
	if i.ContactEmailIsNil {
		predicates = append(predicates, guildconfig.ContactEmailIsNil())
	}
	if i.ContactEmailNotNil {
		predicates = append(predicates, guildconfig.ContactEmailNotNil())
	}
	if i.ContactEmailEqualFold != nil {
		predicates = append(predicates, guildconfig.ContactEmailEqualFold(*i.ContactEmailEqualFold))
	}
	if i.ContactEmailContainsFold != nil {
		predicates = append(predicates, guildconfig.ContactEmailContainsFold(*i.ContactEmailContainsFold))
	}

	if i.HasGuild != nil {
		p := guildconfig.HasGuild()
		if !*i.HasGuild {
			p = guildconfig.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildWith) > 0 {
		with := make([]predicate.Guild, 0, len(i.HasGuildWith))
		for _, w := range i.HasGuildWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guildconfig.HasGuildWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGuildConfigWhereInput
	case 1:
		return predicates[0], nil
	default:
		return guildconfig.And(predicates...), nil
	}
}

// GuildEventWhereInput represents a where input for filtering GuildEvent queries.
type GuildEventWhereInput struct {
	Predicates []predicate.GuildEvent  `json:"-"`
	Not        *GuildEventWhereInput   `json:"not,omitempty"`
	Or         []*GuildEventWhereInput `json:"or,omitempty"`
	And        []*GuildEventWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "type" field predicates.
	Type      *guildevent.Type  `json:"type,omitempty"`
	TypeNEQ   *guildevent.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []guildevent.Type `json:"typeIn,omitempty"`
	TypeNotIn []guildevent.Type `json:"typeNotIn,omitempty"`

	// "message" field predicates.
	Message             *string  `json:"message,omitempty"`
	MessageNEQ          *string  `json:"messageNEQ,omitempty"`
	MessageIn           []string `json:"messageIn,omitempty"`
	MessageNotIn        []string `json:"messageNotIn,omitempty"`
	MessageGT           *string  `json:"messageGT,omitempty"`
	MessageGTE          *string  `json:"messageGTE,omitempty"`
	MessageLT           *string  `json:"messageLT,omitempty"`
	MessageLTE          *string  `json:"messageLTE,omitempty"`
	MessageContains     *string  `json:"messageContains,omitempty"`
	MessageHasPrefix    *string  `json:"messageHasPrefix,omitempty"`
	MessageHasSuffix    *string  `json:"messageHasSuffix,omitempty"`
	MessageEqualFold    *string  `json:"messageEqualFold,omitempty"`
	MessageContainsFold *string  `json:"messageContainsFold,omitempty"`

	// "guild" edge predicates.
	HasGuild     *bool              `json:"hasGuild,omitempty"`
	HasGuildWith []*GuildWhereInput `json:"hasGuildWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GuildEventWhereInput) AddPredicates(predicates ...predicate.GuildEvent) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GuildEventWhereInput filter on the GuildEventQuery builder.
func (i *GuildEventWhereInput) Filter(q *GuildEventQuery) (*GuildEventQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGuildEventWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGuildEventWhereInput is returned in case the GuildEventWhereInput is empty.
var ErrEmptyGuildEventWhereInput = errors.New("ent: empty predicate GuildEventWhereInput")

// P returns a predicate for filtering guildevents.
// An error is returned if the input is empty or invalid.
func (i *GuildEventWhereInput) P() (predicate.GuildEvent, error) {
	var predicates []predicate.GuildEvent
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, guildevent.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GuildEvent, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, guildevent.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GuildEvent, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, guildevent.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, guildevent.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, guildevent.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, guildevent.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, guildevent.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, guildevent.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, guildevent.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, guildevent.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, guildevent.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, guildevent.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, guildevent.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, guildevent.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, guildevent.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, guildevent.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, guildevent.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, guildevent.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, guildevent.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, guildevent.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, guildevent.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, guildevent.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, guildevent.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, guildevent.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, guildevent.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, guildevent.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, guildevent.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Type != nil {
		predicates = append(predicates, guildevent.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, guildevent.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, guildevent.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, guildevent.TypeNotIn(i.TypeNotIn...))
	}
	if i.Message != nil {
		predicates = append(predicates, guildevent.MessageEQ(*i.Message))
	}
	if i.MessageNEQ != nil {
		predicates = append(predicates, guildevent.MessageNEQ(*i.MessageNEQ))
	}
	if len(i.MessageIn) > 0 {
		predicates = append(predicates, guildevent.MessageIn(i.MessageIn...))
	}
	if len(i.MessageNotIn) > 0 {
		predicates = append(predicates, guildevent.MessageNotIn(i.MessageNotIn...))
	}
	if i.MessageGT != nil {
		predicates = append(predicates, guildevent.MessageGT(*i.MessageGT))
	}
	if i.MessageGTE != nil {
		predicates = append(predicates, guildevent.MessageGTE(*i.MessageGTE))
	}
	if i.MessageLT != nil {
		predicates = append(predicates, guildevent.MessageLT(*i.MessageLT))
	}
	if i.MessageLTE != nil {
		predicates = append(predicates, guildevent.MessageLTE(*i.MessageLTE))
	}
	if i.MessageContains != nil {
		predicates = append(predicates, guildevent.MessageContains(*i.MessageContains))
	}
	if i.MessageHasPrefix != nil {
		predicates = append(predicates, guildevent.MessageHasPrefix(*i.MessageHasPrefix))
	}
	if i.MessageHasSuffix != nil {
		predicates = append(predicates, guildevent.MessageHasSuffix(*i.MessageHasSuffix))
	}
	if i.MessageEqualFold != nil {
		predicates = append(predicates, guildevent.MessageEqualFold(*i.MessageEqualFold))
	}
	if i.MessageContainsFold != nil {
		predicates = append(predicates, guildevent.MessageContainsFold(*i.MessageContainsFold))
	}

	if i.HasGuild != nil {
		p := guildevent.HasGuild()
		if !*i.HasGuild {
			p = guildevent.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildWith) > 0 {
		with := make([]predicate.Guild, 0, len(i.HasGuildWith))
		for _, w := range i.HasGuildWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guildevent.HasGuildWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGuildEventWhereInput
	case 1:
		return predicates[0], nil
	default:
		return guildevent.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`

	// "admin" field predicates.
	Admin       *bool `json:"admin,omitempty"`
	AdminNEQ    *bool `json:"adminNEQ,omitempty"`
	AdminIsNil  bool  `json:"adminIsNil,omitempty"`
	AdminNotNil bool  `json:"adminNotNil,omitempty"`

	// "banned" field predicates.
	Banned       *bool `json:"banned,omitempty"`
	BannedNEQ    *bool `json:"bannedNEQ,omitempty"`
	BannedIsNil  bool  `json:"bannedIsNil,omitempty"`
	BannedNotNil bool  `json:"bannedNotNil,omitempty"`

	// "ban_reason" field predicates.
	BanReason             *string  `json:"banReason,omitempty"`
	BanReasonNEQ          *string  `json:"banReasonNEQ,omitempty"`
	BanReasonIn           []string `json:"banReasonIn,omitempty"`
	BanReasonNotIn        []string `json:"banReasonNotIn,omitempty"`
	BanReasonGT           *string  `json:"banReasonGT,omitempty"`
	BanReasonGTE          *string  `json:"banReasonGTE,omitempty"`
	BanReasonLT           *string  `json:"banReasonLT,omitempty"`
	BanReasonLTE          *string  `json:"banReasonLTE,omitempty"`
	BanReasonContains     *string  `json:"banReasonContains,omitempty"`
	BanReasonHasPrefix    *string  `json:"banReasonHasPrefix,omitempty"`
	BanReasonHasSuffix    *string  `json:"banReasonHasSuffix,omitempty"`
	BanReasonIsNil        bool     `json:"banReasonIsNil,omitempty"`
	BanReasonNotNil       bool     `json:"banReasonNotNil,omitempty"`
	BanReasonEqualFold    *string  `json:"banReasonEqualFold,omitempty"`
	BanReasonContainsFold *string  `json:"banReasonContainsFold,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "discriminator" field predicates.
	Discriminator             *string  `json:"discriminator,omitempty"`
	DiscriminatorNEQ          *string  `json:"discriminatorNEQ,omitempty"`
	DiscriminatorIn           []string `json:"discriminatorIn,omitempty"`
	DiscriminatorNotIn        []string `json:"discriminatorNotIn,omitempty"`
	DiscriminatorGT           *string  `json:"discriminatorGT,omitempty"`
	DiscriminatorGTE          *string  `json:"discriminatorGTE,omitempty"`
	DiscriminatorLT           *string  `json:"discriminatorLT,omitempty"`
	DiscriminatorLTE          *string  `json:"discriminatorLTE,omitempty"`
	DiscriminatorContains     *string  `json:"discriminatorContains,omitempty"`
	DiscriminatorHasPrefix    *string  `json:"discriminatorHasPrefix,omitempty"`
	DiscriminatorHasSuffix    *string  `json:"discriminatorHasSuffix,omitempty"`
	DiscriminatorEqualFold    *string  `json:"discriminatorEqualFold,omitempty"`
	DiscriminatorContainsFold *string  `json:"discriminatorContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "avatar_hash" field predicates.
	AvatarHash             *string  `json:"avatarHash,omitempty"`
	AvatarHashNEQ          *string  `json:"avatarHashNEQ,omitempty"`
	AvatarHashIn           []string `json:"avatarHashIn,omitempty"`
	AvatarHashNotIn        []string `json:"avatarHashNotIn,omitempty"`
	AvatarHashGT           *string  `json:"avatarHashGT,omitempty"`
	AvatarHashGTE          *string  `json:"avatarHashGTE,omitempty"`
	AvatarHashLT           *string  `json:"avatarHashLT,omitempty"`
	AvatarHashLTE          *string  `json:"avatarHashLTE,omitempty"`
	AvatarHashContains     *string  `json:"avatarHashContains,omitempty"`
	AvatarHashHasPrefix    *string  `json:"avatarHashHasPrefix,omitempty"`
	AvatarHashHasSuffix    *string  `json:"avatarHashHasSuffix,omitempty"`
	AvatarHashIsNil        bool     `json:"avatarHashIsNil,omitempty"`
	AvatarHashNotNil       bool     `json:"avatarHashNotNil,omitempty"`
	AvatarHashEqualFold    *string  `json:"avatarHashEqualFold,omitempty"`
	AvatarHashContainsFold *string  `json:"avatarHashContainsFold,omitempty"`

	// "avatar_url" field predicates.
	AvatarURL             *string  `json:"avatarURL,omitempty"`
	AvatarURLNEQ          *string  `json:"avatarURLNEQ,omitempty"`
	AvatarURLIn           []string `json:"avatarURLIn,omitempty"`
	AvatarURLNotIn        []string `json:"avatarURLNotIn,omitempty"`
	AvatarURLGT           *string  `json:"avatarURLGT,omitempty"`
	AvatarURLGTE          *string  `json:"avatarURLGTE,omitempty"`
	AvatarURLLT           *string  `json:"avatarURLLT,omitempty"`
	AvatarURLLTE          *string  `json:"avatarURLLTE,omitempty"`
	AvatarURLContains     *string  `json:"avatarURLContains,omitempty"`
	AvatarURLHasPrefix    *string  `json:"avatarURLHasPrefix,omitempty"`
	AvatarURLHasSuffix    *string  `json:"avatarURLHasSuffix,omitempty"`
	AvatarURLEqualFold    *string  `json:"avatarURLEqualFold,omitempty"`
	AvatarURLContainsFold *string  `json:"avatarURLContainsFold,omitempty"`

	// "locale" field predicates.
	Locale             *string  `json:"locale,omitempty"`
	LocaleNEQ          *string  `json:"localeNEQ,omitempty"`
	LocaleIn           []string `json:"localeIn,omitempty"`
	LocaleNotIn        []string `json:"localeNotIn,omitempty"`
	LocaleGT           *string  `json:"localeGT,omitempty"`
	LocaleGTE          *string  `json:"localeGTE,omitempty"`
	LocaleLT           *string  `json:"localeLT,omitempty"`
	LocaleLTE          *string  `json:"localeLTE,omitempty"`
	LocaleContains     *string  `json:"localeContains,omitempty"`
	LocaleHasPrefix    *string  `json:"localeHasPrefix,omitempty"`
	LocaleHasSuffix    *string  `json:"localeHasSuffix,omitempty"`
	LocaleIsNil        bool     `json:"localeIsNil,omitempty"`
	LocaleNotNil       bool     `json:"localeNotNil,omitempty"`
	LocaleEqualFold    *string  `json:"localeEqualFold,omitempty"`
	LocaleContainsFold *string  `json:"localeContainsFold,omitempty"`

	// "bot" field predicates.
	Bot       *bool `json:"bot,omitempty"`
	BotNEQ    *bool `json:"botNEQ,omitempty"`
	BotIsNil  bool  `json:"botIsNil,omitempty"`
	BotNotNil bool  `json:"botNotNil,omitempty"`

	// "system" field predicates.
	System       *bool `json:"system,omitempty"`
	SystemNEQ    *bool `json:"systemNEQ,omitempty"`
	SystemIsNil  bool  `json:"systemIsNil,omitempty"`
	SystemNotNil bool  `json:"systemNotNil,omitempty"`

	// "mfa_enabled" field predicates.
	MfaEnabled       *bool `json:"mfaEnabled,omitempty"`
	MfaEnabledNEQ    *bool `json:"mfaEnabledNEQ,omitempty"`
	MfaEnabledIsNil  bool  `json:"mfaEnabledIsNil,omitempty"`
	MfaEnabledNotNil bool  `json:"mfaEnabledNotNil,omitempty"`

	// "verified" field predicates.
	Verified       *bool `json:"verified,omitempty"`
	VerifiedNEQ    *bool `json:"verifiedNEQ,omitempty"`
	VerifiedIsNil  bool  `json:"verifiedIsNil,omitempty"`
	VerifiedNotNil bool  `json:"verifiedNotNil,omitempty"`

	// "flags" field predicates.
	Flags       *uint64  `json:"flags,omitempty"`
	FlagsNEQ    *uint64  `json:"flagsNEQ,omitempty"`
	FlagsIn     []uint64 `json:"flagsIn,omitempty"`
	FlagsNotIn  []uint64 `json:"flagsNotIn,omitempty"`
	FlagsGT     *uint64  `json:"flagsGT,omitempty"`
	FlagsGTE    *uint64  `json:"flagsGTE,omitempty"`
	FlagsLT     *uint64  `json:"flagsLT,omitempty"`
	FlagsLTE    *uint64  `json:"flagsLTE,omitempty"`
	FlagsIsNil  bool     `json:"flagsIsNil,omitempty"`
	FlagsNotNil bool     `json:"flagsNotNil,omitempty"`

	// "premium_type" field predicates.
	PremiumType       *int  `json:"premiumType,omitempty"`
	PremiumTypeNEQ    *int  `json:"premiumTypeNEQ,omitempty"`
	PremiumTypeIn     []int `json:"premiumTypeIn,omitempty"`
	PremiumTypeNotIn  []int `json:"premiumTypeNotIn,omitempty"`
	PremiumTypeGT     *int  `json:"premiumTypeGT,omitempty"`
	PremiumTypeGTE    *int  `json:"premiumTypeGTE,omitempty"`
	PremiumTypeLT     *int  `json:"premiumTypeLT,omitempty"`
	PremiumTypeLTE    *int  `json:"premiumTypeLTE,omitempty"`
	PremiumTypeIsNil  bool  `json:"premiumTypeIsNil,omitempty"`
	PremiumTypeNotNil bool  `json:"premiumTypeNotNil,omitempty"`

	// "public_flags" field predicates.
	PublicFlags       *uint64  `json:"publicFlags,omitempty"`
	PublicFlagsNEQ    *uint64  `json:"publicFlagsNEQ,omitempty"`
	PublicFlagsIn     []uint64 `json:"publicFlagsIn,omitempty"`
	PublicFlagsNotIn  []uint64 `json:"publicFlagsNotIn,omitempty"`
	PublicFlagsGT     *uint64  `json:"publicFlagsGT,omitempty"`
	PublicFlagsGTE    *uint64  `json:"publicFlagsGTE,omitempty"`
	PublicFlagsLT     *uint64  `json:"publicFlagsLT,omitempty"`
	PublicFlagsLTE    *uint64  `json:"publicFlagsLTE,omitempty"`
	PublicFlagsIsNil  bool     `json:"publicFlagsIsNil,omitempty"`
	PublicFlagsNotNil bool     `json:"publicFlagsNotNil,omitempty"`

	// "user_guilds" edge predicates.
	HasUserGuilds     *bool              `json:"hasUserGuilds,omitempty"`
	HasUserGuildsWith []*GuildWhereInput `json:"hasUserGuildsWith,omitempty"`

	// "banned_users" edge predicates.
	HasBannedUsers     *bool             `json:"hasBannedUsers,omitempty"`
	HasBannedUsersWith []*UserWhereInput `json:"hasBannedUsersWith,omitempty"`

	// "banned_by" edge predicates.
	HasBannedBy     *bool             `json:"hasBannedBy,omitempty"`
	HasBannedByWith []*UserWhereInput `json:"hasBannedByWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, user.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, user.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, user.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, user.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, user.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, user.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, user.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, user.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, user.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, user.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, user.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, user.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, user.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, user.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, user.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, user.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, user.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, user.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, user.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, user.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, user.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, user.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, user.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, user.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, user.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, user.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, user.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, user.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, user.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Admin != nil {
		predicates = append(predicates, user.AdminEQ(*i.Admin))
	}
	if i.AdminNEQ != nil {
		predicates = append(predicates, user.AdminNEQ(*i.AdminNEQ))
	}
	if i.AdminIsNil {
		predicates = append(predicates, user.AdminIsNil())
	}
	if i.AdminNotNil {
		predicates = append(predicates, user.AdminNotNil())
	}
	if i.Banned != nil {
		predicates = append(predicates, user.BannedEQ(*i.Banned))
	}
	if i.BannedNEQ != nil {
		predicates = append(predicates, user.BannedNEQ(*i.BannedNEQ))
	}
	if i.BannedIsNil {
		predicates = append(predicates, user.BannedIsNil())
	}
	if i.BannedNotNil {
		predicates = append(predicates, user.BannedNotNil())
	}
	if i.BanReason != nil {
		predicates = append(predicates, user.BanReasonEQ(*i.BanReason))
	}
	if i.BanReasonNEQ != nil {
		predicates = append(predicates, user.BanReasonNEQ(*i.BanReasonNEQ))
	}
	if len(i.BanReasonIn) > 0 {
		predicates = append(predicates, user.BanReasonIn(i.BanReasonIn...))
	}
	if len(i.BanReasonNotIn) > 0 {
		predicates = append(predicates, user.BanReasonNotIn(i.BanReasonNotIn...))
	}
	if i.BanReasonGT != nil {
		predicates = append(predicates, user.BanReasonGT(*i.BanReasonGT))
	}
	if i.BanReasonGTE != nil {
		predicates = append(predicates, user.BanReasonGTE(*i.BanReasonGTE))
	}
	if i.BanReasonLT != nil {
		predicates = append(predicates, user.BanReasonLT(*i.BanReasonLT))
	}
	if i.BanReasonLTE != nil {
		predicates = append(predicates, user.BanReasonLTE(*i.BanReasonLTE))
	}
	if i.BanReasonContains != nil {
		predicates = append(predicates, user.BanReasonContains(*i.BanReasonContains))
	}
	if i.BanReasonHasPrefix != nil {
		predicates = append(predicates, user.BanReasonHasPrefix(*i.BanReasonHasPrefix))
	}
	if i.BanReasonHasSuffix != nil {
		predicates = append(predicates, user.BanReasonHasSuffix(*i.BanReasonHasSuffix))
	}
	if i.BanReasonIsNil {
		predicates = append(predicates, user.BanReasonIsNil())
	}
	if i.BanReasonNotNil {
		predicates = append(predicates, user.BanReasonNotNil())
	}
	if i.BanReasonEqualFold != nil {
		predicates = append(predicates, user.BanReasonEqualFold(*i.BanReasonEqualFold))
	}
	if i.BanReasonContainsFold != nil {
		predicates = append(predicates, user.BanReasonContainsFold(*i.BanReasonContainsFold))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.Discriminator != nil {
		predicates = append(predicates, user.DiscriminatorEQ(*i.Discriminator))
	}
	if i.DiscriminatorNEQ != nil {
		predicates = append(predicates, user.DiscriminatorNEQ(*i.DiscriminatorNEQ))
	}
	if len(i.DiscriminatorIn) > 0 {
		predicates = append(predicates, user.DiscriminatorIn(i.DiscriminatorIn...))
	}
	if len(i.DiscriminatorNotIn) > 0 {
		predicates = append(predicates, user.DiscriminatorNotIn(i.DiscriminatorNotIn...))
	}
	if i.DiscriminatorGT != nil {
		predicates = append(predicates, user.DiscriminatorGT(*i.DiscriminatorGT))
	}
	if i.DiscriminatorGTE != nil {
		predicates = append(predicates, user.DiscriminatorGTE(*i.DiscriminatorGTE))
	}
	if i.DiscriminatorLT != nil {
		predicates = append(predicates, user.DiscriminatorLT(*i.DiscriminatorLT))
	}
	if i.DiscriminatorLTE != nil {
		predicates = append(predicates, user.DiscriminatorLTE(*i.DiscriminatorLTE))
	}
	if i.DiscriminatorContains != nil {
		predicates = append(predicates, user.DiscriminatorContains(*i.DiscriminatorContains))
	}
	if i.DiscriminatorHasPrefix != nil {
		predicates = append(predicates, user.DiscriminatorHasPrefix(*i.DiscriminatorHasPrefix))
	}
	if i.DiscriminatorHasSuffix != nil {
		predicates = append(predicates, user.DiscriminatorHasSuffix(*i.DiscriminatorHasSuffix))
	}
	if i.DiscriminatorEqualFold != nil {
		predicates = append(predicates, user.DiscriminatorEqualFold(*i.DiscriminatorEqualFold))
	}
	if i.DiscriminatorContainsFold != nil {
		predicates = append(predicates, user.DiscriminatorContainsFold(*i.DiscriminatorContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.AvatarHash != nil {
		predicates = append(predicates, user.AvatarHashEQ(*i.AvatarHash))
	}
	if i.AvatarHashNEQ != nil {
		predicates = append(predicates, user.AvatarHashNEQ(*i.AvatarHashNEQ))
	}
	if len(i.AvatarHashIn) > 0 {
		predicates = append(predicates, user.AvatarHashIn(i.AvatarHashIn...))
	}
	if len(i.AvatarHashNotIn) > 0 {
		predicates = append(predicates, user.AvatarHashNotIn(i.AvatarHashNotIn...))
	}
	if i.AvatarHashGT != nil {
		predicates = append(predicates, user.AvatarHashGT(*i.AvatarHashGT))
	}
	if i.AvatarHashGTE != nil {
		predicates = append(predicates, user.AvatarHashGTE(*i.AvatarHashGTE))
	}
	if i.AvatarHashLT != nil {
		predicates = append(predicates, user.AvatarHashLT(*i.AvatarHashLT))
	}
	if i.AvatarHashLTE != nil {
		predicates = append(predicates, user.AvatarHashLTE(*i.AvatarHashLTE))
	}
	if i.AvatarHashContains != nil {
		predicates = append(predicates, user.AvatarHashContains(*i.AvatarHashContains))
	}
	if i.AvatarHashHasPrefix != nil {
		predicates = append(predicates, user.AvatarHashHasPrefix(*i.AvatarHashHasPrefix))
	}
	if i.AvatarHashHasSuffix != nil {
		predicates = append(predicates, user.AvatarHashHasSuffix(*i.AvatarHashHasSuffix))
	}
	if i.AvatarHashIsNil {
		predicates = append(predicates, user.AvatarHashIsNil())
	}
	if i.AvatarHashNotNil {
		predicates = append(predicates, user.AvatarHashNotNil())
	}
	if i.AvatarHashEqualFold != nil {
		predicates = append(predicates, user.AvatarHashEqualFold(*i.AvatarHashEqualFold))
	}
	if i.AvatarHashContainsFold != nil {
		predicates = append(predicates, user.AvatarHashContainsFold(*i.AvatarHashContainsFold))
	}
	if i.AvatarURL != nil {
		predicates = append(predicates, user.AvatarURLEQ(*i.AvatarURL))
	}
	if i.AvatarURLNEQ != nil {
		predicates = append(predicates, user.AvatarURLNEQ(*i.AvatarURLNEQ))
	}
	if len(i.AvatarURLIn) > 0 {
		predicates = append(predicates, user.AvatarURLIn(i.AvatarURLIn...))
	}
	if len(i.AvatarURLNotIn) > 0 {
		predicates = append(predicates, user.AvatarURLNotIn(i.AvatarURLNotIn...))
	}
	if i.AvatarURLGT != nil {
		predicates = append(predicates, user.AvatarURLGT(*i.AvatarURLGT))
	}
	if i.AvatarURLGTE != nil {
		predicates = append(predicates, user.AvatarURLGTE(*i.AvatarURLGTE))
	}
	if i.AvatarURLLT != nil {
		predicates = append(predicates, user.AvatarURLLT(*i.AvatarURLLT))
	}
	if i.AvatarURLLTE != nil {
		predicates = append(predicates, user.AvatarURLLTE(*i.AvatarURLLTE))
	}
	if i.AvatarURLContains != nil {
		predicates = append(predicates, user.AvatarURLContains(*i.AvatarURLContains))
	}
	if i.AvatarURLHasPrefix != nil {
		predicates = append(predicates, user.AvatarURLHasPrefix(*i.AvatarURLHasPrefix))
	}
	if i.AvatarURLHasSuffix != nil {
		predicates = append(predicates, user.AvatarURLHasSuffix(*i.AvatarURLHasSuffix))
	}
	if i.AvatarURLEqualFold != nil {
		predicates = append(predicates, user.AvatarURLEqualFold(*i.AvatarURLEqualFold))
	}
	if i.AvatarURLContainsFold != nil {
		predicates = append(predicates, user.AvatarURLContainsFold(*i.AvatarURLContainsFold))
	}
	if i.Locale != nil {
		predicates = append(predicates, user.LocaleEQ(*i.Locale))
	}
	if i.LocaleNEQ != nil {
		predicates = append(predicates, user.LocaleNEQ(*i.LocaleNEQ))
	}
	if len(i.LocaleIn) > 0 {
		predicates = append(predicates, user.LocaleIn(i.LocaleIn...))
	}
	if len(i.LocaleNotIn) > 0 {
		predicates = append(predicates, user.LocaleNotIn(i.LocaleNotIn...))
	}
	if i.LocaleGT != nil {
		predicates = append(predicates, user.LocaleGT(*i.LocaleGT))
	}
	if i.LocaleGTE != nil {
		predicates = append(predicates, user.LocaleGTE(*i.LocaleGTE))
	}
	if i.LocaleLT != nil {
		predicates = append(predicates, user.LocaleLT(*i.LocaleLT))
	}
	if i.LocaleLTE != nil {
		predicates = append(predicates, user.LocaleLTE(*i.LocaleLTE))
	}
	if i.LocaleContains != nil {
		predicates = append(predicates, user.LocaleContains(*i.LocaleContains))
	}
	if i.LocaleHasPrefix != nil {
		predicates = append(predicates, user.LocaleHasPrefix(*i.LocaleHasPrefix))
	}
	if i.LocaleHasSuffix != nil {
		predicates = append(predicates, user.LocaleHasSuffix(*i.LocaleHasSuffix))
	}
	if i.LocaleIsNil {
		predicates = append(predicates, user.LocaleIsNil())
	}
	if i.LocaleNotNil {
		predicates = append(predicates, user.LocaleNotNil())
	}
	if i.LocaleEqualFold != nil {
		predicates = append(predicates, user.LocaleEqualFold(*i.LocaleEqualFold))
	}
	if i.LocaleContainsFold != nil {
		predicates = append(predicates, user.LocaleContainsFold(*i.LocaleContainsFold))
	}
	if i.Bot != nil {
		predicates = append(predicates, user.BotEQ(*i.Bot))
	}
	if i.BotNEQ != nil {
		predicates = append(predicates, user.BotNEQ(*i.BotNEQ))
	}
	if i.BotIsNil {
		predicates = append(predicates, user.BotIsNil())
	}
	if i.BotNotNil {
		predicates = append(predicates, user.BotNotNil())
	}
	if i.System != nil {
		predicates = append(predicates, user.SystemEQ(*i.System))
	}
	if i.SystemNEQ != nil {
		predicates = append(predicates, user.SystemNEQ(*i.SystemNEQ))
	}
	if i.SystemIsNil {
		predicates = append(predicates, user.SystemIsNil())
	}
	if i.SystemNotNil {
		predicates = append(predicates, user.SystemNotNil())
	}
	if i.MfaEnabled != nil {
		predicates = append(predicates, user.MfaEnabledEQ(*i.MfaEnabled))
	}
	if i.MfaEnabledNEQ != nil {
		predicates = append(predicates, user.MfaEnabledNEQ(*i.MfaEnabledNEQ))
	}
	if i.MfaEnabledIsNil {
		predicates = append(predicates, user.MfaEnabledIsNil())
	}
	if i.MfaEnabledNotNil {
		predicates = append(predicates, user.MfaEnabledNotNil())
	}
	if i.Verified != nil {
		predicates = append(predicates, user.VerifiedEQ(*i.Verified))
	}
	if i.VerifiedNEQ != nil {
		predicates = append(predicates, user.VerifiedNEQ(*i.VerifiedNEQ))
	}
	if i.VerifiedIsNil {
		predicates = append(predicates, user.VerifiedIsNil())
	}
	if i.VerifiedNotNil {
		predicates = append(predicates, user.VerifiedNotNil())
	}
	if i.Flags != nil {
		predicates = append(predicates, user.FlagsEQ(*i.Flags))
	}
	if i.FlagsNEQ != nil {
		predicates = append(predicates, user.FlagsNEQ(*i.FlagsNEQ))
	}
	if len(i.FlagsIn) > 0 {
		predicates = append(predicates, user.FlagsIn(i.FlagsIn...))
	}
	if len(i.FlagsNotIn) > 0 {
		predicates = append(predicates, user.FlagsNotIn(i.FlagsNotIn...))
	}
	if i.FlagsGT != nil {
		predicates = append(predicates, user.FlagsGT(*i.FlagsGT))
	}
	if i.FlagsGTE != nil {
		predicates = append(predicates, user.FlagsGTE(*i.FlagsGTE))
	}
	if i.FlagsLT != nil {
		predicates = append(predicates, user.FlagsLT(*i.FlagsLT))
	}
	if i.FlagsLTE != nil {
		predicates = append(predicates, user.FlagsLTE(*i.FlagsLTE))
	}
	if i.FlagsIsNil {
		predicates = append(predicates, user.FlagsIsNil())
	}
	if i.FlagsNotNil {
		predicates = append(predicates, user.FlagsNotNil())
	}
	if i.PremiumType != nil {
		predicates = append(predicates, user.PremiumTypeEQ(*i.PremiumType))
	}
	if i.PremiumTypeNEQ != nil {
		predicates = append(predicates, user.PremiumTypeNEQ(*i.PremiumTypeNEQ))
	}
	if len(i.PremiumTypeIn) > 0 {
		predicates = append(predicates, user.PremiumTypeIn(i.PremiumTypeIn...))
	}
	if len(i.PremiumTypeNotIn) > 0 {
		predicates = append(predicates, user.PremiumTypeNotIn(i.PremiumTypeNotIn...))
	}
	if i.PremiumTypeGT != nil {
		predicates = append(predicates, user.PremiumTypeGT(*i.PremiumTypeGT))
	}
	if i.PremiumTypeGTE != nil {
		predicates = append(predicates, user.PremiumTypeGTE(*i.PremiumTypeGTE))
	}
	if i.PremiumTypeLT != nil {
		predicates = append(predicates, user.PremiumTypeLT(*i.PremiumTypeLT))
	}
	if i.PremiumTypeLTE != nil {
		predicates = append(predicates, user.PremiumTypeLTE(*i.PremiumTypeLTE))
	}
	if i.PremiumTypeIsNil {
		predicates = append(predicates, user.PremiumTypeIsNil())
	}
	if i.PremiumTypeNotNil {
		predicates = append(predicates, user.PremiumTypeNotNil())
	}
	if i.PublicFlags != nil {
		predicates = append(predicates, user.PublicFlagsEQ(*i.PublicFlags))
	}
	if i.PublicFlagsNEQ != nil {
		predicates = append(predicates, user.PublicFlagsNEQ(*i.PublicFlagsNEQ))
	}
	if len(i.PublicFlagsIn) > 0 {
		predicates = append(predicates, user.PublicFlagsIn(i.PublicFlagsIn...))
	}
	if len(i.PublicFlagsNotIn) > 0 {
		predicates = append(predicates, user.PublicFlagsNotIn(i.PublicFlagsNotIn...))
	}
	if i.PublicFlagsGT != nil {
		predicates = append(predicates, user.PublicFlagsGT(*i.PublicFlagsGT))
	}
	if i.PublicFlagsGTE != nil {
		predicates = append(predicates, user.PublicFlagsGTE(*i.PublicFlagsGTE))
	}
	if i.PublicFlagsLT != nil {
		predicates = append(predicates, user.PublicFlagsLT(*i.PublicFlagsLT))
	}
	if i.PublicFlagsLTE != nil {
		predicates = append(predicates, user.PublicFlagsLTE(*i.PublicFlagsLTE))
	}
	if i.PublicFlagsIsNil {
		predicates = append(predicates, user.PublicFlagsIsNil())
	}
	if i.PublicFlagsNotNil {
		predicates = append(predicates, user.PublicFlagsNotNil())
	}

	if i.HasUserGuilds != nil {
		p := user.HasUserGuilds()
		if !*i.HasUserGuilds {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserGuildsWith) > 0 {
		with := make([]predicate.Guild, 0, len(i.HasUserGuildsWith))
		for _, w := range i.HasUserGuildsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserGuildsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasUserGuildsWith(with...))
	}
	if i.HasBannedUsers != nil {
		p := user.HasBannedUsers()
		if !*i.HasBannedUsers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBannedUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasBannedUsersWith))
		for _, w := range i.HasBannedUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBannedUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasBannedUsersWith(with...))
	}
	if i.HasBannedBy != nil {
		p := user.HasBannedBy()
		if !*i.HasBannedBy {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasBannedByWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasBannedByWith))
		for _, w := range i.HasBannedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasBannedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasBannedByWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
