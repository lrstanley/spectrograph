// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (gu *Guild) GuildConfig(ctx context.Context) (*GuildConfig, error) {
	result, err := gu.Edges.GuildConfigOrErr()
	if IsNotLoaded(err) {
		result, err = gu.QueryGuildConfig().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gu *Guild) GuildAdminConfig(ctx context.Context) (*GuildAdminConfig, error) {
	result, err := gu.Edges.GuildAdminConfigOrErr()
	if IsNotLoaded(err) {
		result, err = gu.QueryGuildAdminConfig().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gu *Guild) GuildEvents(ctx context.Context) (result []*GuildEvent, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gu.NamedGuildEvents(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gu.Edges.GuildEventsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gu.QueryGuildEvents().All(ctx)
	}
	return result, err
}

func (gu *Guild) Admins(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gu.Edges.totalCount[3][alias]
	if nodes, err := gu.NamedAdmins(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gu.QueryAdmins().Paginate(ctx, after, first, before, last, opts...)
}

func (gac *GuildAdminConfig) Guild(ctx context.Context) (*Guild, error) {
	result, err := gac.Edges.GuildOrErr()
	if IsNotLoaded(err) {
		result, err = gac.QueryGuild().Only(ctx)
	}
	return result, err
}

func (gc *GuildConfig) Guild(ctx context.Context) (*Guild, error) {
	result, err := gc.Edges.GuildOrErr()
	if IsNotLoaded(err) {
		result, err = gc.QueryGuild().Only(ctx)
	}
	return result, err
}

func (ge *GuildEvent) Guild(ctx context.Context) (*Guild, error) {
	result, err := ge.Edges.GuildOrErr()
	if IsNotLoaded(err) {
		result, err = ge.QueryGuild().Only(ctx)
	}
	return result, err
}

func (u *User) UserGuilds(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *GuildOrder, where *GuildWhereInput,
) (*GuildConnection, error) {
	opts := []GuildPaginateOption{
		WithGuildOrder(orderBy),
		WithGuildFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedUserGuilds(alias); err == nil || hasTotalCount {
		pager, err := newGuildPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &GuildConnection{Edges: []*GuildEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryUserGuilds().Paginate(ctx, after, first, before, last, opts...)
}
