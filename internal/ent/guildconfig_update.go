// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/spectrograph/internal/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
)

// GuildConfigUpdate is the builder for updating GuildConfig entities.
type GuildConfigUpdate struct {
	config
	hooks    []Hook
	mutation *GuildConfigMutation
}

// Where appends a list predicates to the GuildConfigUpdate builder.
func (gcu *GuildConfigUpdate) Where(ps ...predicate.GuildConfig) *GuildConfigUpdate {
	gcu.mutation.Where(ps...)
	return gcu
}

// SetUpdateTime sets the "update_time" field.
func (gcu *GuildConfigUpdate) SetUpdateTime(t time.Time) *GuildConfigUpdate {
	gcu.mutation.SetUpdateTime(t)
	return gcu
}

// SetEnabled sets the "enabled" field.
func (gcu *GuildConfigUpdate) SetEnabled(b bool) *GuildConfigUpdate {
	gcu.mutation.SetEnabled(b)
	return gcu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (gcu *GuildConfigUpdate) SetNillableEnabled(b *bool) *GuildConfigUpdate {
	if b != nil {
		gcu.SetEnabled(*b)
	}
	return gcu
}

// ClearEnabled clears the value of the "enabled" field.
func (gcu *GuildConfigUpdate) ClearEnabled() *GuildConfigUpdate {
	gcu.mutation.ClearEnabled()
	return gcu
}

// SetDefaultMaxClones sets the "default_max_clones" field.
func (gcu *GuildConfigUpdate) SetDefaultMaxClones(i int) *GuildConfigUpdate {
	gcu.mutation.ResetDefaultMaxClones()
	gcu.mutation.SetDefaultMaxClones(i)
	return gcu
}

// SetNillableDefaultMaxClones sets the "default_max_clones" field if the given value is not nil.
func (gcu *GuildConfigUpdate) SetNillableDefaultMaxClones(i *int) *GuildConfigUpdate {
	if i != nil {
		gcu.SetDefaultMaxClones(*i)
	}
	return gcu
}

// AddDefaultMaxClones adds i to the "default_max_clones" field.
func (gcu *GuildConfigUpdate) AddDefaultMaxClones(i int) *GuildConfigUpdate {
	gcu.mutation.AddDefaultMaxClones(i)
	return gcu
}

// ClearDefaultMaxClones clears the value of the "default_max_clones" field.
func (gcu *GuildConfigUpdate) ClearDefaultMaxClones() *GuildConfigUpdate {
	gcu.mutation.ClearDefaultMaxClones()
	return gcu
}

// SetRegexMatch sets the "regex_match" field.
func (gcu *GuildConfigUpdate) SetRegexMatch(s string) *GuildConfigUpdate {
	gcu.mutation.SetRegexMatch(s)
	return gcu
}

// SetNillableRegexMatch sets the "regex_match" field if the given value is not nil.
func (gcu *GuildConfigUpdate) SetNillableRegexMatch(s *string) *GuildConfigUpdate {
	if s != nil {
		gcu.SetRegexMatch(*s)
	}
	return gcu
}

// ClearRegexMatch clears the value of the "regex_match" field.
func (gcu *GuildConfigUpdate) ClearRegexMatch() *GuildConfigUpdate {
	gcu.mutation.ClearRegexMatch()
	return gcu
}

// SetContactEmail sets the "contact_email" field.
func (gcu *GuildConfigUpdate) SetContactEmail(s string) *GuildConfigUpdate {
	gcu.mutation.SetContactEmail(s)
	return gcu
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (gcu *GuildConfigUpdate) SetNillableContactEmail(s *string) *GuildConfigUpdate {
	if s != nil {
		gcu.SetContactEmail(*s)
	}
	return gcu
}

// ClearContactEmail clears the value of the "contact_email" field.
func (gcu *GuildConfigUpdate) ClearContactEmail() *GuildConfigUpdate {
	gcu.mutation.ClearContactEmail()
	return gcu
}

// Mutation returns the GuildConfigMutation object of the builder.
func (gcu *GuildConfigUpdate) Mutation() *GuildConfigMutation {
	return gcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gcu *GuildConfigUpdate) Save(ctx context.Context) (int, error) {
	if err := gcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, GuildConfigMutation](ctx, gcu.sqlSave, gcu.mutation, gcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GuildConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GuildConfigUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GuildConfigUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcu *GuildConfigUpdate) defaults() error {
	if _, ok := gcu.mutation.UpdateTime(); !ok {
		if guildconfig.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guildconfig.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guildconfig.UpdateDefaultUpdateTime()
		gcu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gcu *GuildConfigUpdate) check() error {
	if v, ok := gcu.mutation.DefaultMaxClones(); ok {
		if err := guildconfig.DefaultMaxClonesValidator(v); err != nil {
			return &ValidationError{Name: "default_max_clones", err: fmt.Errorf(`ent: validator failed for field "GuildConfig.default_max_clones": %w`, err)}
		}
	}
	if v, ok := gcu.mutation.RegexMatch(); ok {
		if err := guildconfig.RegexMatchValidator(v); err != nil {
			return &ValidationError{Name: "regex_match", err: fmt.Errorf(`ent: validator failed for field "GuildConfig.regex_match": %w`, err)}
		}
	}
	if v, ok := gcu.mutation.ContactEmail(); ok {
		if err := guildconfig.ContactEmailValidator(v); err != nil {
			return &ValidationError{Name: "contact_email", err: fmt.Errorf(`ent: validator failed for field "GuildConfig.contact_email": %w`, err)}
		}
	}
	if _, ok := gcu.mutation.GuildID(); gcu.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GuildConfig.guild"`)
	}
	return nil
}

func (gcu *GuildConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guildconfig.Table, guildconfig.Columns, sqlgraph.NewFieldSpec(guildconfig.FieldID, field.TypeInt))
	if ps := gcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcu.mutation.UpdateTime(); ok {
		_spec.SetField(guildconfig.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := gcu.mutation.Enabled(); ok {
		_spec.SetField(guildconfig.FieldEnabled, field.TypeBool, value)
	}
	if gcu.mutation.EnabledCleared() {
		_spec.ClearField(guildconfig.FieldEnabled, field.TypeBool)
	}
	if value, ok := gcu.mutation.DefaultMaxClones(); ok {
		_spec.SetField(guildconfig.FieldDefaultMaxClones, field.TypeInt, value)
	}
	if value, ok := gcu.mutation.AddedDefaultMaxClones(); ok {
		_spec.AddField(guildconfig.FieldDefaultMaxClones, field.TypeInt, value)
	}
	if gcu.mutation.DefaultMaxClonesCleared() {
		_spec.ClearField(guildconfig.FieldDefaultMaxClones, field.TypeInt)
	}
	if value, ok := gcu.mutation.RegexMatch(); ok {
		_spec.SetField(guildconfig.FieldRegexMatch, field.TypeString, value)
	}
	if gcu.mutation.RegexMatchCleared() {
		_spec.ClearField(guildconfig.FieldRegexMatch, field.TypeString)
	}
	if value, ok := gcu.mutation.ContactEmail(); ok {
		_spec.SetField(guildconfig.FieldContactEmail, field.TypeString, value)
	}
	if gcu.mutation.ContactEmailCleared() {
		_spec.ClearField(guildconfig.FieldContactEmail, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gcu.mutation.done = true
	return n, nil
}

// GuildConfigUpdateOne is the builder for updating a single GuildConfig entity.
type GuildConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuildConfigMutation
}

// SetUpdateTime sets the "update_time" field.
func (gcuo *GuildConfigUpdateOne) SetUpdateTime(t time.Time) *GuildConfigUpdateOne {
	gcuo.mutation.SetUpdateTime(t)
	return gcuo
}

// SetEnabled sets the "enabled" field.
func (gcuo *GuildConfigUpdateOne) SetEnabled(b bool) *GuildConfigUpdateOne {
	gcuo.mutation.SetEnabled(b)
	return gcuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (gcuo *GuildConfigUpdateOne) SetNillableEnabled(b *bool) *GuildConfigUpdateOne {
	if b != nil {
		gcuo.SetEnabled(*b)
	}
	return gcuo
}

// ClearEnabled clears the value of the "enabled" field.
func (gcuo *GuildConfigUpdateOne) ClearEnabled() *GuildConfigUpdateOne {
	gcuo.mutation.ClearEnabled()
	return gcuo
}

// SetDefaultMaxClones sets the "default_max_clones" field.
func (gcuo *GuildConfigUpdateOne) SetDefaultMaxClones(i int) *GuildConfigUpdateOne {
	gcuo.mutation.ResetDefaultMaxClones()
	gcuo.mutation.SetDefaultMaxClones(i)
	return gcuo
}

// SetNillableDefaultMaxClones sets the "default_max_clones" field if the given value is not nil.
func (gcuo *GuildConfigUpdateOne) SetNillableDefaultMaxClones(i *int) *GuildConfigUpdateOne {
	if i != nil {
		gcuo.SetDefaultMaxClones(*i)
	}
	return gcuo
}

// AddDefaultMaxClones adds i to the "default_max_clones" field.
func (gcuo *GuildConfigUpdateOne) AddDefaultMaxClones(i int) *GuildConfigUpdateOne {
	gcuo.mutation.AddDefaultMaxClones(i)
	return gcuo
}

// ClearDefaultMaxClones clears the value of the "default_max_clones" field.
func (gcuo *GuildConfigUpdateOne) ClearDefaultMaxClones() *GuildConfigUpdateOne {
	gcuo.mutation.ClearDefaultMaxClones()
	return gcuo
}

// SetRegexMatch sets the "regex_match" field.
func (gcuo *GuildConfigUpdateOne) SetRegexMatch(s string) *GuildConfigUpdateOne {
	gcuo.mutation.SetRegexMatch(s)
	return gcuo
}

// SetNillableRegexMatch sets the "regex_match" field if the given value is not nil.
func (gcuo *GuildConfigUpdateOne) SetNillableRegexMatch(s *string) *GuildConfigUpdateOne {
	if s != nil {
		gcuo.SetRegexMatch(*s)
	}
	return gcuo
}

// ClearRegexMatch clears the value of the "regex_match" field.
func (gcuo *GuildConfigUpdateOne) ClearRegexMatch() *GuildConfigUpdateOne {
	gcuo.mutation.ClearRegexMatch()
	return gcuo
}

// SetContactEmail sets the "contact_email" field.
func (gcuo *GuildConfigUpdateOne) SetContactEmail(s string) *GuildConfigUpdateOne {
	gcuo.mutation.SetContactEmail(s)
	return gcuo
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (gcuo *GuildConfigUpdateOne) SetNillableContactEmail(s *string) *GuildConfigUpdateOne {
	if s != nil {
		gcuo.SetContactEmail(*s)
	}
	return gcuo
}

// ClearContactEmail clears the value of the "contact_email" field.
func (gcuo *GuildConfigUpdateOne) ClearContactEmail() *GuildConfigUpdateOne {
	gcuo.mutation.ClearContactEmail()
	return gcuo
}

// Mutation returns the GuildConfigMutation object of the builder.
func (gcuo *GuildConfigUpdateOne) Mutation() *GuildConfigMutation {
	return gcuo.mutation
}

// Where appends a list predicates to the GuildConfigUpdate builder.
func (gcuo *GuildConfigUpdateOne) Where(ps ...predicate.GuildConfig) *GuildConfigUpdateOne {
	gcuo.mutation.Where(ps...)
	return gcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gcuo *GuildConfigUpdateOne) Select(field string, fields ...string) *GuildConfigUpdateOne {
	gcuo.fields = append([]string{field}, fields...)
	return gcuo
}

// Save executes the query and returns the updated GuildConfig entity.
func (gcuo *GuildConfigUpdateOne) Save(ctx context.Context) (*GuildConfig, error) {
	if err := gcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*GuildConfig, GuildConfigMutation](ctx, gcuo.sqlSave, gcuo.mutation, gcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GuildConfigUpdateOne) SaveX(ctx context.Context) *GuildConfig {
	node, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gcuo *GuildConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GuildConfigUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gcuo *GuildConfigUpdateOne) defaults() error {
	if _, ok := gcuo.mutation.UpdateTime(); !ok {
		if guildconfig.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guildconfig.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guildconfig.UpdateDefaultUpdateTime()
		gcuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gcuo *GuildConfigUpdateOne) check() error {
	if v, ok := gcuo.mutation.DefaultMaxClones(); ok {
		if err := guildconfig.DefaultMaxClonesValidator(v); err != nil {
			return &ValidationError{Name: "default_max_clones", err: fmt.Errorf(`ent: validator failed for field "GuildConfig.default_max_clones": %w`, err)}
		}
	}
	if v, ok := gcuo.mutation.RegexMatch(); ok {
		if err := guildconfig.RegexMatchValidator(v); err != nil {
			return &ValidationError{Name: "regex_match", err: fmt.Errorf(`ent: validator failed for field "GuildConfig.regex_match": %w`, err)}
		}
	}
	if v, ok := gcuo.mutation.ContactEmail(); ok {
		if err := guildconfig.ContactEmailValidator(v); err != nil {
			return &ValidationError{Name: "contact_email", err: fmt.Errorf(`ent: validator failed for field "GuildConfig.contact_email": %w`, err)}
		}
	}
	if _, ok := gcuo.mutation.GuildID(); gcuo.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GuildConfig.guild"`)
	}
	return nil
}

func (gcuo *GuildConfigUpdateOne) sqlSave(ctx context.Context) (_node *GuildConfig, err error) {
	if err := gcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guildconfig.Table, guildconfig.Columns, sqlgraph.NewFieldSpec(guildconfig.FieldID, field.TypeInt))
	id, ok := gcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GuildConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guildconfig.FieldID)
		for _, f := range fields {
			if !guildconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guildconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gcuo.mutation.UpdateTime(); ok {
		_spec.SetField(guildconfig.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := gcuo.mutation.Enabled(); ok {
		_spec.SetField(guildconfig.FieldEnabled, field.TypeBool, value)
	}
	if gcuo.mutation.EnabledCleared() {
		_spec.ClearField(guildconfig.FieldEnabled, field.TypeBool)
	}
	if value, ok := gcuo.mutation.DefaultMaxClones(); ok {
		_spec.SetField(guildconfig.FieldDefaultMaxClones, field.TypeInt, value)
	}
	if value, ok := gcuo.mutation.AddedDefaultMaxClones(); ok {
		_spec.AddField(guildconfig.FieldDefaultMaxClones, field.TypeInt, value)
	}
	if gcuo.mutation.DefaultMaxClonesCleared() {
		_spec.ClearField(guildconfig.FieldDefaultMaxClones, field.TypeInt)
	}
	if value, ok := gcuo.mutation.RegexMatch(); ok {
		_spec.SetField(guildconfig.FieldRegexMatch, field.TypeString, value)
	}
	if gcuo.mutation.RegexMatchCleared() {
		_spec.ClearField(guildconfig.FieldRegexMatch, field.TypeString)
	}
	if value, ok := gcuo.mutation.ContactEmail(); ok {
		_spec.SetField(guildconfig.FieldContactEmail, field.TypeString, value)
	}
	if gcuo.mutation.ContactEmailCleared() {
		_spec.ClearField(guildconfig.FieldContactEmail, field.TypeString)
	}
	_node = &GuildConfig{config: gcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gcuo.mutation.done = true
	return _node, nil
}
