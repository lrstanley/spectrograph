// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/lrstanley/spectrograph/internal/ent/guild"
	"github.com/lrstanley/spectrograph/internal/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
	"github.com/lrstanley/spectrograph/internal/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGuild            = "Guild"
	TypeGuildAdminConfig = "GuildAdminConfig"
	TypeGuildConfig      = "GuildConfig"
	TypeGuildEvent       = "GuildEvent"
	TypeUser             = "User"
)

// GuildMutation represents an operation that mutates the Guild nodes in the graph.
type GuildMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	create_time               *time.Time
	update_time               *time.Time
	guild_id                  *string
	name                      *string
	features                  *[]string
	icon_hash                 *string
	icon_url                  *string
	joined_at                 *time.Time
	large                     *bool
	member_count              *int
	addmember_count           *int
	owner_id                  *string
	permissions               *uint64
	addpermissions            *int64
	system_channel_flags      *string
	clearedFields             map[string]struct{}
	guild_config              *int
	clearedguild_config       bool
	guild_admin_config        *int
	clearedguild_admin_config bool
	guild_events              map[int]struct{}
	removedguild_events       map[int]struct{}
	clearedguild_events       bool
	admins                    map[int]struct{}
	removedadmins             map[int]struct{}
	clearedadmins             bool
	done                      bool
	oldValue                  func(context.Context) (*Guild, error)
	predicates                []predicate.Guild
}

var _ ent.Mutation = (*GuildMutation)(nil)

// guildOption allows management of the mutation configuration using functional options.
type guildOption func(*GuildMutation)

// newGuildMutation creates new mutation for the Guild entity.
func newGuildMutation(c config, op Op, opts ...guildOption) *GuildMutation {
	m := &GuildMutation{
		config:        c,
		op:            op,
		typ:           TypeGuild,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuildID sets the ID field of the mutation.
func withGuildID(id int) guildOption {
	return func(m *GuildMutation) {
		var (
			err   error
			once  sync.Once
			value *Guild
		)
		m.oldValue = func(ctx context.Context) (*Guild, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Guild.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuild sets the old Guild of the mutation.
func withGuild(node *Guild) guildOption {
	return func(m *GuildMutation) {
		m.oldValue = func(context.Context) (*Guild, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuildMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuildMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Guild.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GuildMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GuildMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GuildMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GuildMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GuildMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GuildMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetGuildID sets the "guild_id" field.
func (m *GuildMutation) SetGuildID(s string) {
	m.guild_id = &s
}

// GuildID returns the value of the "guild_id" field in the mutation.
func (m *GuildMutation) GuildID() (r string, exists bool) {
	v := m.guild_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGuildID returns the old "guild_id" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldGuildID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGuildID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGuildID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGuildID: %w", err)
	}
	return oldValue.GuildID, nil
}

// ResetGuildID resets all changes to the "guild_id" field.
func (m *GuildMutation) ResetGuildID() {
	m.guild_id = nil
}

// SetName sets the "name" field.
func (m *GuildMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GuildMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GuildMutation) ResetName() {
	m.name = nil
}

// SetFeatures sets the "features" field.
func (m *GuildMutation) SetFeatures(s []string) {
	m.features = &s
}

// Features returns the value of the "features" field in the mutation.
func (m *GuildMutation) Features() (r []string, exists bool) {
	v := m.features
	if v == nil {
		return
	}
	return *v, true
}

// OldFeatures returns the old "features" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldFeatures(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeatures is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeatures requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeatures: %w", err)
	}
	return oldValue.Features, nil
}

// ClearFeatures clears the value of the "features" field.
func (m *GuildMutation) ClearFeatures() {
	m.features = nil
	m.clearedFields[guild.FieldFeatures] = struct{}{}
}

// FeaturesCleared returns if the "features" field was cleared in this mutation.
func (m *GuildMutation) FeaturesCleared() bool {
	_, ok := m.clearedFields[guild.FieldFeatures]
	return ok
}

// ResetFeatures resets all changes to the "features" field.
func (m *GuildMutation) ResetFeatures() {
	m.features = nil
	delete(m.clearedFields, guild.FieldFeatures)
}

// SetIconHash sets the "icon_hash" field.
func (m *GuildMutation) SetIconHash(s string) {
	m.icon_hash = &s
}

// IconHash returns the value of the "icon_hash" field in the mutation.
func (m *GuildMutation) IconHash() (r string, exists bool) {
	v := m.icon_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldIconHash returns the old "icon_hash" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldIconHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIconHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIconHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconHash: %w", err)
	}
	return oldValue.IconHash, nil
}

// ClearIconHash clears the value of the "icon_hash" field.
func (m *GuildMutation) ClearIconHash() {
	m.icon_hash = nil
	m.clearedFields[guild.FieldIconHash] = struct{}{}
}

// IconHashCleared returns if the "icon_hash" field was cleared in this mutation.
func (m *GuildMutation) IconHashCleared() bool {
	_, ok := m.clearedFields[guild.FieldIconHash]
	return ok
}

// ResetIconHash resets all changes to the "icon_hash" field.
func (m *GuildMutation) ResetIconHash() {
	m.icon_hash = nil
	delete(m.clearedFields, guild.FieldIconHash)
}

// SetIconURL sets the "icon_url" field.
func (m *GuildMutation) SetIconURL(s string) {
	m.icon_url = &s
}

// IconURL returns the value of the "icon_url" field in the mutation.
func (m *GuildMutation) IconURL() (r string, exists bool) {
	v := m.icon_url
	if v == nil {
		return
	}
	return *v, true
}

// OldIconURL returns the old "icon_url" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldIconURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIconURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIconURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIconURL: %w", err)
	}
	return oldValue.IconURL, nil
}

// ResetIconURL resets all changes to the "icon_url" field.
func (m *GuildMutation) ResetIconURL() {
	m.icon_url = nil
}

// SetJoinedAt sets the "joined_at" field.
func (m *GuildMutation) SetJoinedAt(t time.Time) {
	m.joined_at = &t
}

// JoinedAt returns the value of the "joined_at" field in the mutation.
func (m *GuildMutation) JoinedAt() (r time.Time, exists bool) {
	v := m.joined_at
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinedAt returns the old "joined_at" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldJoinedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinedAt: %w", err)
	}
	return oldValue.JoinedAt, nil
}

// ClearJoinedAt clears the value of the "joined_at" field.
func (m *GuildMutation) ClearJoinedAt() {
	m.joined_at = nil
	m.clearedFields[guild.FieldJoinedAt] = struct{}{}
}

// JoinedAtCleared returns if the "joined_at" field was cleared in this mutation.
func (m *GuildMutation) JoinedAtCleared() bool {
	_, ok := m.clearedFields[guild.FieldJoinedAt]
	return ok
}

// ResetJoinedAt resets all changes to the "joined_at" field.
func (m *GuildMutation) ResetJoinedAt() {
	m.joined_at = nil
	delete(m.clearedFields, guild.FieldJoinedAt)
}

// SetLarge sets the "large" field.
func (m *GuildMutation) SetLarge(b bool) {
	m.large = &b
}

// Large returns the value of the "large" field in the mutation.
func (m *GuildMutation) Large() (r bool, exists bool) {
	v := m.large
	if v == nil {
		return
	}
	return *v, true
}

// OldLarge returns the old "large" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldLarge(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLarge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLarge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLarge: %w", err)
	}
	return oldValue.Large, nil
}

// ClearLarge clears the value of the "large" field.
func (m *GuildMutation) ClearLarge() {
	m.large = nil
	m.clearedFields[guild.FieldLarge] = struct{}{}
}

// LargeCleared returns if the "large" field was cleared in this mutation.
func (m *GuildMutation) LargeCleared() bool {
	_, ok := m.clearedFields[guild.FieldLarge]
	return ok
}

// ResetLarge resets all changes to the "large" field.
func (m *GuildMutation) ResetLarge() {
	m.large = nil
	delete(m.clearedFields, guild.FieldLarge)
}

// SetMemberCount sets the "member_count" field.
func (m *GuildMutation) SetMemberCount(i int) {
	m.member_count = &i
	m.addmember_count = nil
}

// MemberCount returns the value of the "member_count" field in the mutation.
func (m *GuildMutation) MemberCount() (r int, exists bool) {
	v := m.member_count
	if v == nil {
		return
	}
	return *v, true
}

// OldMemberCount returns the old "member_count" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldMemberCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemberCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemberCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemberCount: %w", err)
	}
	return oldValue.MemberCount, nil
}

// AddMemberCount adds i to the "member_count" field.
func (m *GuildMutation) AddMemberCount(i int) {
	if m.addmember_count != nil {
		*m.addmember_count += i
	} else {
		m.addmember_count = &i
	}
}

// AddedMemberCount returns the value that was added to the "member_count" field in this mutation.
func (m *GuildMutation) AddedMemberCount() (r int, exists bool) {
	v := m.addmember_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearMemberCount clears the value of the "member_count" field.
func (m *GuildMutation) ClearMemberCount() {
	m.member_count = nil
	m.addmember_count = nil
	m.clearedFields[guild.FieldMemberCount] = struct{}{}
}

// MemberCountCleared returns if the "member_count" field was cleared in this mutation.
func (m *GuildMutation) MemberCountCleared() bool {
	_, ok := m.clearedFields[guild.FieldMemberCount]
	return ok
}

// ResetMemberCount resets all changes to the "member_count" field.
func (m *GuildMutation) ResetMemberCount() {
	m.member_count = nil
	m.addmember_count = nil
	delete(m.clearedFields, guild.FieldMemberCount)
}

// SetOwnerID sets the "owner_id" field.
func (m *GuildMutation) SetOwnerID(s string) {
	m.owner_id = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *GuildMutation) OwnerID() (r string, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ClearOwnerID clears the value of the "owner_id" field.
func (m *GuildMutation) ClearOwnerID() {
	m.owner_id = nil
	m.clearedFields[guild.FieldOwnerID] = struct{}{}
}

// OwnerIDCleared returns if the "owner_id" field was cleared in this mutation.
func (m *GuildMutation) OwnerIDCleared() bool {
	_, ok := m.clearedFields[guild.FieldOwnerID]
	return ok
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *GuildMutation) ResetOwnerID() {
	m.owner_id = nil
	delete(m.clearedFields, guild.FieldOwnerID)
}

// SetPermissions sets the "permissions" field.
func (m *GuildMutation) SetPermissions(u uint64) {
	m.permissions = &u
	m.addpermissions = nil
}

// Permissions returns the value of the "permissions" field in the mutation.
func (m *GuildMutation) Permissions() (r uint64, exists bool) {
	v := m.permissions
	if v == nil {
		return
	}
	return *v, true
}

// OldPermissions returns the old "permissions" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldPermissions(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPermissions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPermissions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPermissions: %w", err)
	}
	return oldValue.Permissions, nil
}

// AddPermissions adds u to the "permissions" field.
func (m *GuildMutation) AddPermissions(u int64) {
	if m.addpermissions != nil {
		*m.addpermissions += u
	} else {
		m.addpermissions = &u
	}
}

// AddedPermissions returns the value that was added to the "permissions" field in this mutation.
func (m *GuildMutation) AddedPermissions() (r int64, exists bool) {
	v := m.addpermissions
	if v == nil {
		return
	}
	return *v, true
}

// ClearPermissions clears the value of the "permissions" field.
func (m *GuildMutation) ClearPermissions() {
	m.permissions = nil
	m.addpermissions = nil
	m.clearedFields[guild.FieldPermissions] = struct{}{}
}

// PermissionsCleared returns if the "permissions" field was cleared in this mutation.
func (m *GuildMutation) PermissionsCleared() bool {
	_, ok := m.clearedFields[guild.FieldPermissions]
	return ok
}

// ResetPermissions resets all changes to the "permissions" field.
func (m *GuildMutation) ResetPermissions() {
	m.permissions = nil
	m.addpermissions = nil
	delete(m.clearedFields, guild.FieldPermissions)
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (m *GuildMutation) SetSystemChannelFlags(s string) {
	m.system_channel_flags = &s
}

// SystemChannelFlags returns the value of the "system_channel_flags" field in the mutation.
func (m *GuildMutation) SystemChannelFlags() (r string, exists bool) {
	v := m.system_channel_flags
	if v == nil {
		return
	}
	return *v, true
}

// OldSystemChannelFlags returns the old "system_channel_flags" field's value of the Guild entity.
// If the Guild object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildMutation) OldSystemChannelFlags(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSystemChannelFlags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSystemChannelFlags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystemChannelFlags: %w", err)
	}
	return oldValue.SystemChannelFlags, nil
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (m *GuildMutation) ClearSystemChannelFlags() {
	m.system_channel_flags = nil
	m.clearedFields[guild.FieldSystemChannelFlags] = struct{}{}
}

// SystemChannelFlagsCleared returns if the "system_channel_flags" field was cleared in this mutation.
func (m *GuildMutation) SystemChannelFlagsCleared() bool {
	_, ok := m.clearedFields[guild.FieldSystemChannelFlags]
	return ok
}

// ResetSystemChannelFlags resets all changes to the "system_channel_flags" field.
func (m *GuildMutation) ResetSystemChannelFlags() {
	m.system_channel_flags = nil
	delete(m.clearedFields, guild.FieldSystemChannelFlags)
}

// SetGuildConfigID sets the "guild_config" edge to the GuildConfig entity by id.
func (m *GuildMutation) SetGuildConfigID(id int) {
	m.guild_config = &id
}

// ClearGuildConfig clears the "guild_config" edge to the GuildConfig entity.
func (m *GuildMutation) ClearGuildConfig() {
	m.clearedguild_config = true
}

// GuildConfigCleared reports if the "guild_config" edge to the GuildConfig entity was cleared.
func (m *GuildMutation) GuildConfigCleared() bool {
	return m.clearedguild_config
}

// GuildConfigID returns the "guild_config" edge ID in the mutation.
func (m *GuildMutation) GuildConfigID() (id int, exists bool) {
	if m.guild_config != nil {
		return *m.guild_config, true
	}
	return
}

// GuildConfigIDs returns the "guild_config" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildConfigID instead. It exists only for internal usage by the builders.
func (m *GuildMutation) GuildConfigIDs() (ids []int) {
	if id := m.guild_config; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuildConfig resets all changes to the "guild_config" edge.
func (m *GuildMutation) ResetGuildConfig() {
	m.guild_config = nil
	m.clearedguild_config = false
}

// SetGuildAdminConfigID sets the "guild_admin_config" edge to the GuildAdminConfig entity by id.
func (m *GuildMutation) SetGuildAdminConfigID(id int) {
	m.guild_admin_config = &id
}

// ClearGuildAdminConfig clears the "guild_admin_config" edge to the GuildAdminConfig entity.
func (m *GuildMutation) ClearGuildAdminConfig() {
	m.clearedguild_admin_config = true
}

// GuildAdminConfigCleared reports if the "guild_admin_config" edge to the GuildAdminConfig entity was cleared.
func (m *GuildMutation) GuildAdminConfigCleared() bool {
	return m.clearedguild_admin_config
}

// GuildAdminConfigID returns the "guild_admin_config" edge ID in the mutation.
func (m *GuildMutation) GuildAdminConfigID() (id int, exists bool) {
	if m.guild_admin_config != nil {
		return *m.guild_admin_config, true
	}
	return
}

// GuildAdminConfigIDs returns the "guild_admin_config" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildAdminConfigID instead. It exists only for internal usage by the builders.
func (m *GuildMutation) GuildAdminConfigIDs() (ids []int) {
	if id := m.guild_admin_config; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuildAdminConfig resets all changes to the "guild_admin_config" edge.
func (m *GuildMutation) ResetGuildAdminConfig() {
	m.guild_admin_config = nil
	m.clearedguild_admin_config = false
}

// AddGuildEventIDs adds the "guild_events" edge to the GuildEvent entity by ids.
func (m *GuildMutation) AddGuildEventIDs(ids ...int) {
	if m.guild_events == nil {
		m.guild_events = make(map[int]struct{})
	}
	for i := range ids {
		m.guild_events[ids[i]] = struct{}{}
	}
}

// ClearGuildEvents clears the "guild_events" edge to the GuildEvent entity.
func (m *GuildMutation) ClearGuildEvents() {
	m.clearedguild_events = true
}

// GuildEventsCleared reports if the "guild_events" edge to the GuildEvent entity was cleared.
func (m *GuildMutation) GuildEventsCleared() bool {
	return m.clearedguild_events
}

// RemoveGuildEventIDs removes the "guild_events" edge to the GuildEvent entity by IDs.
func (m *GuildMutation) RemoveGuildEventIDs(ids ...int) {
	if m.removedguild_events == nil {
		m.removedguild_events = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.guild_events, ids[i])
		m.removedguild_events[ids[i]] = struct{}{}
	}
}

// RemovedGuildEvents returns the removed IDs of the "guild_events" edge to the GuildEvent entity.
func (m *GuildMutation) RemovedGuildEventsIDs() (ids []int) {
	for id := range m.removedguild_events {
		ids = append(ids, id)
	}
	return
}

// GuildEventsIDs returns the "guild_events" edge IDs in the mutation.
func (m *GuildMutation) GuildEventsIDs() (ids []int) {
	for id := range m.guild_events {
		ids = append(ids, id)
	}
	return
}

// ResetGuildEvents resets all changes to the "guild_events" edge.
func (m *GuildMutation) ResetGuildEvents() {
	m.guild_events = nil
	m.clearedguild_events = false
	m.removedguild_events = nil
}

// AddAdminIDs adds the "admins" edge to the User entity by ids.
func (m *GuildMutation) AddAdminIDs(ids ...int) {
	if m.admins == nil {
		m.admins = make(map[int]struct{})
	}
	for i := range ids {
		m.admins[ids[i]] = struct{}{}
	}
}

// ClearAdmins clears the "admins" edge to the User entity.
func (m *GuildMutation) ClearAdmins() {
	m.clearedadmins = true
}

// AdminsCleared reports if the "admins" edge to the User entity was cleared.
func (m *GuildMutation) AdminsCleared() bool {
	return m.clearedadmins
}

// RemoveAdminIDs removes the "admins" edge to the User entity by IDs.
func (m *GuildMutation) RemoveAdminIDs(ids ...int) {
	if m.removedadmins == nil {
		m.removedadmins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.admins, ids[i])
		m.removedadmins[ids[i]] = struct{}{}
	}
}

// RemovedAdmins returns the removed IDs of the "admins" edge to the User entity.
func (m *GuildMutation) RemovedAdminsIDs() (ids []int) {
	for id := range m.removedadmins {
		ids = append(ids, id)
	}
	return
}

// AdminsIDs returns the "admins" edge IDs in the mutation.
func (m *GuildMutation) AdminsIDs() (ids []int) {
	for id := range m.admins {
		ids = append(ids, id)
	}
	return
}

// ResetAdmins resets all changes to the "admins" edge.
func (m *GuildMutation) ResetAdmins() {
	m.admins = nil
	m.clearedadmins = false
	m.removedadmins = nil
}

// Where appends a list predicates to the GuildMutation builder.
func (m *GuildMutation) Where(ps ...predicate.Guild) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GuildMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Guild).
func (m *GuildMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuildMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.create_time != nil {
		fields = append(fields, guild.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, guild.FieldUpdateTime)
	}
	if m.guild_id != nil {
		fields = append(fields, guild.FieldGuildID)
	}
	if m.name != nil {
		fields = append(fields, guild.FieldName)
	}
	if m.features != nil {
		fields = append(fields, guild.FieldFeatures)
	}
	if m.icon_hash != nil {
		fields = append(fields, guild.FieldIconHash)
	}
	if m.icon_url != nil {
		fields = append(fields, guild.FieldIconURL)
	}
	if m.joined_at != nil {
		fields = append(fields, guild.FieldJoinedAt)
	}
	if m.large != nil {
		fields = append(fields, guild.FieldLarge)
	}
	if m.member_count != nil {
		fields = append(fields, guild.FieldMemberCount)
	}
	if m.owner_id != nil {
		fields = append(fields, guild.FieldOwnerID)
	}
	if m.permissions != nil {
		fields = append(fields, guild.FieldPermissions)
	}
	if m.system_channel_flags != nil {
		fields = append(fields, guild.FieldSystemChannelFlags)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuildMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guild.FieldCreateTime:
		return m.CreateTime()
	case guild.FieldUpdateTime:
		return m.UpdateTime()
	case guild.FieldGuildID:
		return m.GuildID()
	case guild.FieldName:
		return m.Name()
	case guild.FieldFeatures:
		return m.Features()
	case guild.FieldIconHash:
		return m.IconHash()
	case guild.FieldIconURL:
		return m.IconURL()
	case guild.FieldJoinedAt:
		return m.JoinedAt()
	case guild.FieldLarge:
		return m.Large()
	case guild.FieldMemberCount:
		return m.MemberCount()
	case guild.FieldOwnerID:
		return m.OwnerID()
	case guild.FieldPermissions:
		return m.Permissions()
	case guild.FieldSystemChannelFlags:
		return m.SystemChannelFlags()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuildMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guild.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case guild.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case guild.FieldGuildID:
		return m.OldGuildID(ctx)
	case guild.FieldName:
		return m.OldName(ctx)
	case guild.FieldFeatures:
		return m.OldFeatures(ctx)
	case guild.FieldIconHash:
		return m.OldIconHash(ctx)
	case guild.FieldIconURL:
		return m.OldIconURL(ctx)
	case guild.FieldJoinedAt:
		return m.OldJoinedAt(ctx)
	case guild.FieldLarge:
		return m.OldLarge(ctx)
	case guild.FieldMemberCount:
		return m.OldMemberCount(ctx)
	case guild.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case guild.FieldPermissions:
		return m.OldPermissions(ctx)
	case guild.FieldSystemChannelFlags:
		return m.OldSystemChannelFlags(ctx)
	}
	return nil, fmt.Errorf("unknown Guild field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guild.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case guild.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case guild.FieldGuildID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGuildID(v)
		return nil
	case guild.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case guild.FieldFeatures:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeatures(v)
		return nil
	case guild.FieldIconHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconHash(v)
		return nil
	case guild.FieldIconURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIconURL(v)
		return nil
	case guild.FieldJoinedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedAt(v)
		return nil
	case guild.FieldLarge:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLarge(v)
		return nil
	case guild.FieldMemberCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemberCount(v)
		return nil
	case guild.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case guild.FieldPermissions:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPermissions(v)
		return nil
	case guild.FieldSystemChannelFlags:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystemChannelFlags(v)
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuildMutation) AddedFields() []string {
	var fields []string
	if m.addmember_count != nil {
		fields = append(fields, guild.FieldMemberCount)
	}
	if m.addpermissions != nil {
		fields = append(fields, guild.FieldPermissions)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuildMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case guild.FieldMemberCount:
		return m.AddedMemberCount()
	case guild.FieldPermissions:
		return m.AddedPermissions()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildMutation) AddField(name string, value ent.Value) error {
	switch name {
	case guild.FieldMemberCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMemberCount(v)
		return nil
	case guild.FieldPermissions:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPermissions(v)
		return nil
	}
	return fmt.Errorf("unknown Guild numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuildMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(guild.FieldFeatures) {
		fields = append(fields, guild.FieldFeatures)
	}
	if m.FieldCleared(guild.FieldIconHash) {
		fields = append(fields, guild.FieldIconHash)
	}
	if m.FieldCleared(guild.FieldJoinedAt) {
		fields = append(fields, guild.FieldJoinedAt)
	}
	if m.FieldCleared(guild.FieldLarge) {
		fields = append(fields, guild.FieldLarge)
	}
	if m.FieldCleared(guild.FieldMemberCount) {
		fields = append(fields, guild.FieldMemberCount)
	}
	if m.FieldCleared(guild.FieldOwnerID) {
		fields = append(fields, guild.FieldOwnerID)
	}
	if m.FieldCleared(guild.FieldPermissions) {
		fields = append(fields, guild.FieldPermissions)
	}
	if m.FieldCleared(guild.FieldSystemChannelFlags) {
		fields = append(fields, guild.FieldSystemChannelFlags)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuildMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildMutation) ClearField(name string) error {
	switch name {
	case guild.FieldFeatures:
		m.ClearFeatures()
		return nil
	case guild.FieldIconHash:
		m.ClearIconHash()
		return nil
	case guild.FieldJoinedAt:
		m.ClearJoinedAt()
		return nil
	case guild.FieldLarge:
		m.ClearLarge()
		return nil
	case guild.FieldMemberCount:
		m.ClearMemberCount()
		return nil
	case guild.FieldOwnerID:
		m.ClearOwnerID()
		return nil
	case guild.FieldPermissions:
		m.ClearPermissions()
		return nil
	case guild.FieldSystemChannelFlags:
		m.ClearSystemChannelFlags()
		return nil
	}
	return fmt.Errorf("unknown Guild nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuildMutation) ResetField(name string) error {
	switch name {
	case guild.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case guild.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case guild.FieldGuildID:
		m.ResetGuildID()
		return nil
	case guild.FieldName:
		m.ResetName()
		return nil
	case guild.FieldFeatures:
		m.ResetFeatures()
		return nil
	case guild.FieldIconHash:
		m.ResetIconHash()
		return nil
	case guild.FieldIconURL:
		m.ResetIconURL()
		return nil
	case guild.FieldJoinedAt:
		m.ResetJoinedAt()
		return nil
	case guild.FieldLarge:
		m.ResetLarge()
		return nil
	case guild.FieldMemberCount:
		m.ResetMemberCount()
		return nil
	case guild.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case guild.FieldPermissions:
		m.ResetPermissions()
		return nil
	case guild.FieldSystemChannelFlags:
		m.ResetSystemChannelFlags()
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuildMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.guild_config != nil {
		edges = append(edges, guild.EdgeGuildConfig)
	}
	if m.guild_admin_config != nil {
		edges = append(edges, guild.EdgeGuildAdminConfig)
	}
	if m.guild_events != nil {
		edges = append(edges, guild.EdgeGuildEvents)
	}
	if m.admins != nil {
		edges = append(edges, guild.EdgeAdmins)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuildMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guild.EdgeGuildConfig:
		if id := m.guild_config; id != nil {
			return []ent.Value{*id}
		}
	case guild.EdgeGuildAdminConfig:
		if id := m.guild_admin_config; id != nil {
			return []ent.Value{*id}
		}
	case guild.EdgeGuildEvents:
		ids := make([]ent.Value, 0, len(m.guild_events))
		for id := range m.guild_events {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.admins))
		for id := range m.admins {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuildMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedguild_events != nil {
		edges = append(edges, guild.EdgeGuildEvents)
	}
	if m.removedadmins != nil {
		edges = append(edges, guild.EdgeAdmins)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuildMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guild.EdgeGuildEvents:
		ids := make([]ent.Value, 0, len(m.removedguild_events))
		for id := range m.removedguild_events {
			ids = append(ids, id)
		}
		return ids
	case guild.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.removedadmins))
		for id := range m.removedadmins {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuildMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedguild_config {
		edges = append(edges, guild.EdgeGuildConfig)
	}
	if m.clearedguild_admin_config {
		edges = append(edges, guild.EdgeGuildAdminConfig)
	}
	if m.clearedguild_events {
		edges = append(edges, guild.EdgeGuildEvents)
	}
	if m.clearedadmins {
		edges = append(edges, guild.EdgeAdmins)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuildMutation) EdgeCleared(name string) bool {
	switch name {
	case guild.EdgeGuildConfig:
		return m.clearedguild_config
	case guild.EdgeGuildAdminConfig:
		return m.clearedguild_admin_config
	case guild.EdgeGuildEvents:
		return m.clearedguild_events
	case guild.EdgeAdmins:
		return m.clearedadmins
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuildMutation) ClearEdge(name string) error {
	switch name {
	case guild.EdgeGuildConfig:
		m.ClearGuildConfig()
		return nil
	case guild.EdgeGuildAdminConfig:
		m.ClearGuildAdminConfig()
		return nil
	}
	return fmt.Errorf("unknown Guild unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuildMutation) ResetEdge(name string) error {
	switch name {
	case guild.EdgeGuildConfig:
		m.ResetGuildConfig()
		return nil
	case guild.EdgeGuildAdminConfig:
		m.ResetGuildAdminConfig()
		return nil
	case guild.EdgeGuildEvents:
		m.ResetGuildEvents()
		return nil
	case guild.EdgeAdmins:
		m.ResetAdmins()
		return nil
	}
	return fmt.Errorf("unknown Guild edge %s", name)
}

// GuildAdminConfigMutation represents an operation that mutates the GuildAdminConfig nodes in the graph.
type GuildAdminConfigMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	create_time             *time.Time
	update_time             *time.Time
	enabled                 *bool
	default_max_channels    *int
	adddefault_max_channels *int
	default_max_clones      *int
	adddefault_max_clones   *int
	comment                 *string
	clearedFields           map[string]struct{}
	guild                   *int
	clearedguild            bool
	done                    bool
	oldValue                func(context.Context) (*GuildAdminConfig, error)
	predicates              []predicate.GuildAdminConfig
}

var _ ent.Mutation = (*GuildAdminConfigMutation)(nil)

// guildadminconfigOption allows management of the mutation configuration using functional options.
type guildadminconfigOption func(*GuildAdminConfigMutation)

// newGuildAdminConfigMutation creates new mutation for the GuildAdminConfig entity.
func newGuildAdminConfigMutation(c config, op Op, opts ...guildadminconfigOption) *GuildAdminConfigMutation {
	m := &GuildAdminConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeGuildAdminConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuildAdminConfigID sets the ID field of the mutation.
func withGuildAdminConfigID(id int) guildadminconfigOption {
	return func(m *GuildAdminConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *GuildAdminConfig
		)
		m.oldValue = func(ctx context.Context) (*GuildAdminConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuildAdminConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuildAdminConfig sets the old GuildAdminConfig of the mutation.
func withGuildAdminConfig(node *GuildAdminConfig) guildadminconfigOption {
	return func(m *GuildAdminConfigMutation) {
		m.oldValue = func(context.Context) (*GuildAdminConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildAdminConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildAdminConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuildAdminConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuildAdminConfigMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GuildAdminConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GuildAdminConfigMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GuildAdminConfigMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the GuildAdminConfig entity.
// If the GuildAdminConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildAdminConfigMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GuildAdminConfigMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GuildAdminConfigMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GuildAdminConfigMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the GuildAdminConfig entity.
// If the GuildAdminConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildAdminConfigMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GuildAdminConfigMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetEnabled sets the "enabled" field.
func (m *GuildAdminConfigMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *GuildAdminConfigMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the GuildAdminConfig entity.
// If the GuildAdminConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildAdminConfigMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ClearEnabled clears the value of the "enabled" field.
func (m *GuildAdminConfigMutation) ClearEnabled() {
	m.enabled = nil
	m.clearedFields[guildadminconfig.FieldEnabled] = struct{}{}
}

// EnabledCleared returns if the "enabled" field was cleared in this mutation.
func (m *GuildAdminConfigMutation) EnabledCleared() bool {
	_, ok := m.clearedFields[guildadminconfig.FieldEnabled]
	return ok
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *GuildAdminConfigMutation) ResetEnabled() {
	m.enabled = nil
	delete(m.clearedFields, guildadminconfig.FieldEnabled)
}

// SetDefaultMaxChannels sets the "default_max_channels" field.
func (m *GuildAdminConfigMutation) SetDefaultMaxChannels(i int) {
	m.default_max_channels = &i
	m.adddefault_max_channels = nil
}

// DefaultMaxChannels returns the value of the "default_max_channels" field in the mutation.
func (m *GuildAdminConfigMutation) DefaultMaxChannels() (r int, exists bool) {
	v := m.default_max_channels
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultMaxChannels returns the old "default_max_channels" field's value of the GuildAdminConfig entity.
// If the GuildAdminConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildAdminConfigMutation) OldDefaultMaxChannels(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultMaxChannels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultMaxChannels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultMaxChannels: %w", err)
	}
	return oldValue.DefaultMaxChannels, nil
}

// AddDefaultMaxChannels adds i to the "default_max_channels" field.
func (m *GuildAdminConfigMutation) AddDefaultMaxChannels(i int) {
	if m.adddefault_max_channels != nil {
		*m.adddefault_max_channels += i
	} else {
		m.adddefault_max_channels = &i
	}
}

// AddedDefaultMaxChannels returns the value that was added to the "default_max_channels" field in this mutation.
func (m *GuildAdminConfigMutation) AddedDefaultMaxChannels() (r int, exists bool) {
	v := m.adddefault_max_channels
	if v == nil {
		return
	}
	return *v, true
}

// ClearDefaultMaxChannels clears the value of the "default_max_channels" field.
func (m *GuildAdminConfigMutation) ClearDefaultMaxChannels() {
	m.default_max_channels = nil
	m.adddefault_max_channels = nil
	m.clearedFields[guildadminconfig.FieldDefaultMaxChannels] = struct{}{}
}

// DefaultMaxChannelsCleared returns if the "default_max_channels" field was cleared in this mutation.
func (m *GuildAdminConfigMutation) DefaultMaxChannelsCleared() bool {
	_, ok := m.clearedFields[guildadminconfig.FieldDefaultMaxChannels]
	return ok
}

// ResetDefaultMaxChannels resets all changes to the "default_max_channels" field.
func (m *GuildAdminConfigMutation) ResetDefaultMaxChannels() {
	m.default_max_channels = nil
	m.adddefault_max_channels = nil
	delete(m.clearedFields, guildadminconfig.FieldDefaultMaxChannels)
}

// SetDefaultMaxClones sets the "default_max_clones" field.
func (m *GuildAdminConfigMutation) SetDefaultMaxClones(i int) {
	m.default_max_clones = &i
	m.adddefault_max_clones = nil
}

// DefaultMaxClones returns the value of the "default_max_clones" field in the mutation.
func (m *GuildAdminConfigMutation) DefaultMaxClones() (r int, exists bool) {
	v := m.default_max_clones
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultMaxClones returns the old "default_max_clones" field's value of the GuildAdminConfig entity.
// If the GuildAdminConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildAdminConfigMutation) OldDefaultMaxClones(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultMaxClones is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultMaxClones requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultMaxClones: %w", err)
	}
	return oldValue.DefaultMaxClones, nil
}

// AddDefaultMaxClones adds i to the "default_max_clones" field.
func (m *GuildAdminConfigMutation) AddDefaultMaxClones(i int) {
	if m.adddefault_max_clones != nil {
		*m.adddefault_max_clones += i
	} else {
		m.adddefault_max_clones = &i
	}
}

// AddedDefaultMaxClones returns the value that was added to the "default_max_clones" field in this mutation.
func (m *GuildAdminConfigMutation) AddedDefaultMaxClones() (r int, exists bool) {
	v := m.adddefault_max_clones
	if v == nil {
		return
	}
	return *v, true
}

// ClearDefaultMaxClones clears the value of the "default_max_clones" field.
func (m *GuildAdminConfigMutation) ClearDefaultMaxClones() {
	m.default_max_clones = nil
	m.adddefault_max_clones = nil
	m.clearedFields[guildadminconfig.FieldDefaultMaxClones] = struct{}{}
}

// DefaultMaxClonesCleared returns if the "default_max_clones" field was cleared in this mutation.
func (m *GuildAdminConfigMutation) DefaultMaxClonesCleared() bool {
	_, ok := m.clearedFields[guildadminconfig.FieldDefaultMaxClones]
	return ok
}

// ResetDefaultMaxClones resets all changes to the "default_max_clones" field.
func (m *GuildAdminConfigMutation) ResetDefaultMaxClones() {
	m.default_max_clones = nil
	m.adddefault_max_clones = nil
	delete(m.clearedFields, guildadminconfig.FieldDefaultMaxClones)
}

// SetComment sets the "comment" field.
func (m *GuildAdminConfigMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *GuildAdminConfigMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the GuildAdminConfig entity.
// If the GuildAdminConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildAdminConfigMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *GuildAdminConfigMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[guildadminconfig.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *GuildAdminConfigMutation) CommentCleared() bool {
	_, ok := m.clearedFields[guildadminconfig.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *GuildAdminConfigMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, guildadminconfig.FieldComment)
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *GuildAdminConfigMutation) SetGuildID(id int) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *GuildAdminConfigMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared reports if the "guild" edge to the Guild entity was cleared.
func (m *GuildAdminConfigMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *GuildAdminConfigMutation) GuildID() (id int, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *GuildAdminConfigMutation) GuildIDs() (ids []int) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *GuildAdminConfigMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// Where appends a list predicates to the GuildAdminConfigMutation builder.
func (m *GuildAdminConfigMutation) Where(ps ...predicate.GuildAdminConfig) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GuildAdminConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GuildAdminConfig).
func (m *GuildAdminConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuildAdminConfigMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, guildadminconfig.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, guildadminconfig.FieldUpdateTime)
	}
	if m.enabled != nil {
		fields = append(fields, guildadminconfig.FieldEnabled)
	}
	if m.default_max_channels != nil {
		fields = append(fields, guildadminconfig.FieldDefaultMaxChannels)
	}
	if m.default_max_clones != nil {
		fields = append(fields, guildadminconfig.FieldDefaultMaxClones)
	}
	if m.comment != nil {
		fields = append(fields, guildadminconfig.FieldComment)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuildAdminConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guildadminconfig.FieldCreateTime:
		return m.CreateTime()
	case guildadminconfig.FieldUpdateTime:
		return m.UpdateTime()
	case guildadminconfig.FieldEnabled:
		return m.Enabled()
	case guildadminconfig.FieldDefaultMaxChannels:
		return m.DefaultMaxChannels()
	case guildadminconfig.FieldDefaultMaxClones:
		return m.DefaultMaxClones()
	case guildadminconfig.FieldComment:
		return m.Comment()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuildAdminConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guildadminconfig.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case guildadminconfig.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case guildadminconfig.FieldEnabled:
		return m.OldEnabled(ctx)
	case guildadminconfig.FieldDefaultMaxChannels:
		return m.OldDefaultMaxChannels(ctx)
	case guildadminconfig.FieldDefaultMaxClones:
		return m.OldDefaultMaxClones(ctx)
	case guildadminconfig.FieldComment:
		return m.OldComment(ctx)
	}
	return nil, fmt.Errorf("unknown GuildAdminConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildAdminConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guildadminconfig.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case guildadminconfig.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case guildadminconfig.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case guildadminconfig.FieldDefaultMaxChannels:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultMaxChannels(v)
		return nil
	case guildadminconfig.FieldDefaultMaxClones:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultMaxClones(v)
		return nil
	case guildadminconfig.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	}
	return fmt.Errorf("unknown GuildAdminConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuildAdminConfigMutation) AddedFields() []string {
	var fields []string
	if m.adddefault_max_channels != nil {
		fields = append(fields, guildadminconfig.FieldDefaultMaxChannels)
	}
	if m.adddefault_max_clones != nil {
		fields = append(fields, guildadminconfig.FieldDefaultMaxClones)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuildAdminConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case guildadminconfig.FieldDefaultMaxChannels:
		return m.AddedDefaultMaxChannels()
	case guildadminconfig.FieldDefaultMaxClones:
		return m.AddedDefaultMaxClones()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildAdminConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case guildadminconfig.FieldDefaultMaxChannels:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDefaultMaxChannels(v)
		return nil
	case guildadminconfig.FieldDefaultMaxClones:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDefaultMaxClones(v)
		return nil
	}
	return fmt.Errorf("unknown GuildAdminConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuildAdminConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(guildadminconfig.FieldEnabled) {
		fields = append(fields, guildadminconfig.FieldEnabled)
	}
	if m.FieldCleared(guildadminconfig.FieldDefaultMaxChannels) {
		fields = append(fields, guildadminconfig.FieldDefaultMaxChannels)
	}
	if m.FieldCleared(guildadminconfig.FieldDefaultMaxClones) {
		fields = append(fields, guildadminconfig.FieldDefaultMaxClones)
	}
	if m.FieldCleared(guildadminconfig.FieldComment) {
		fields = append(fields, guildadminconfig.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuildAdminConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildAdminConfigMutation) ClearField(name string) error {
	switch name {
	case guildadminconfig.FieldEnabled:
		m.ClearEnabled()
		return nil
	case guildadminconfig.FieldDefaultMaxChannels:
		m.ClearDefaultMaxChannels()
		return nil
	case guildadminconfig.FieldDefaultMaxClones:
		m.ClearDefaultMaxClones()
		return nil
	case guildadminconfig.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown GuildAdminConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuildAdminConfigMutation) ResetField(name string) error {
	switch name {
	case guildadminconfig.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case guildadminconfig.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case guildadminconfig.FieldEnabled:
		m.ResetEnabled()
		return nil
	case guildadminconfig.FieldDefaultMaxChannels:
		m.ResetDefaultMaxChannels()
		return nil
	case guildadminconfig.FieldDefaultMaxClones:
		m.ResetDefaultMaxClones()
		return nil
	case guildadminconfig.FieldComment:
		m.ResetComment()
		return nil
	}
	return fmt.Errorf("unknown GuildAdminConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuildAdminConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.guild != nil {
		edges = append(edges, guildadminconfig.EdgeGuild)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuildAdminConfigMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guildadminconfig.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuildAdminConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuildAdminConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuildAdminConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedguild {
		edges = append(edges, guildadminconfig.EdgeGuild)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuildAdminConfigMutation) EdgeCleared(name string) bool {
	switch name {
	case guildadminconfig.EdgeGuild:
		return m.clearedguild
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuildAdminConfigMutation) ClearEdge(name string) error {
	switch name {
	case guildadminconfig.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown GuildAdminConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuildAdminConfigMutation) ResetEdge(name string) error {
	switch name {
	case guildadminconfig.EdgeGuild:
		m.ResetGuild()
		return nil
	}
	return fmt.Errorf("unknown GuildAdminConfig edge %s", name)
}

// GuildConfigMutation represents an operation that mutates the GuildConfig nodes in the graph.
type GuildConfigMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	create_time           *time.Time
	update_time           *time.Time
	enabled               *bool
	default_max_clones    *int
	adddefault_max_clones *int
	regex_match           *string
	contact_email         *string
	clearedFields         map[string]struct{}
	guild                 *int
	clearedguild          bool
	done                  bool
	oldValue              func(context.Context) (*GuildConfig, error)
	predicates            []predicate.GuildConfig
}

var _ ent.Mutation = (*GuildConfigMutation)(nil)

// guildconfigOption allows management of the mutation configuration using functional options.
type guildconfigOption func(*GuildConfigMutation)

// newGuildConfigMutation creates new mutation for the GuildConfig entity.
func newGuildConfigMutation(c config, op Op, opts ...guildconfigOption) *GuildConfigMutation {
	m := &GuildConfigMutation{
		config:        c,
		op:            op,
		typ:           TypeGuildConfig,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuildConfigID sets the ID field of the mutation.
func withGuildConfigID(id int) guildconfigOption {
	return func(m *GuildConfigMutation) {
		var (
			err   error
			once  sync.Once
			value *GuildConfig
		)
		m.oldValue = func(ctx context.Context) (*GuildConfig, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuildConfig.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuildConfig sets the old GuildConfig of the mutation.
func withGuildConfig(node *GuildConfig) guildconfigOption {
	return func(m *GuildConfigMutation) {
		m.oldValue = func(context.Context) (*GuildConfig, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildConfigMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildConfigMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuildConfigMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuildConfigMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GuildConfig.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GuildConfigMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GuildConfigMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the GuildConfig entity.
// If the GuildConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildConfigMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GuildConfigMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GuildConfigMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GuildConfigMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the GuildConfig entity.
// If the GuildConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildConfigMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GuildConfigMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetEnabled sets the "enabled" field.
func (m *GuildConfigMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *GuildConfigMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the GuildConfig entity.
// If the GuildConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildConfigMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ClearEnabled clears the value of the "enabled" field.
func (m *GuildConfigMutation) ClearEnabled() {
	m.enabled = nil
	m.clearedFields[guildconfig.FieldEnabled] = struct{}{}
}

// EnabledCleared returns if the "enabled" field was cleared in this mutation.
func (m *GuildConfigMutation) EnabledCleared() bool {
	_, ok := m.clearedFields[guildconfig.FieldEnabled]
	return ok
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *GuildConfigMutation) ResetEnabled() {
	m.enabled = nil
	delete(m.clearedFields, guildconfig.FieldEnabled)
}

// SetDefaultMaxClones sets the "default_max_clones" field.
func (m *GuildConfigMutation) SetDefaultMaxClones(i int) {
	m.default_max_clones = &i
	m.adddefault_max_clones = nil
}

// DefaultMaxClones returns the value of the "default_max_clones" field in the mutation.
func (m *GuildConfigMutation) DefaultMaxClones() (r int, exists bool) {
	v := m.default_max_clones
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultMaxClones returns the old "default_max_clones" field's value of the GuildConfig entity.
// If the GuildConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildConfigMutation) OldDefaultMaxClones(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultMaxClones is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultMaxClones requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultMaxClones: %w", err)
	}
	return oldValue.DefaultMaxClones, nil
}

// AddDefaultMaxClones adds i to the "default_max_clones" field.
func (m *GuildConfigMutation) AddDefaultMaxClones(i int) {
	if m.adddefault_max_clones != nil {
		*m.adddefault_max_clones += i
	} else {
		m.adddefault_max_clones = &i
	}
}

// AddedDefaultMaxClones returns the value that was added to the "default_max_clones" field in this mutation.
func (m *GuildConfigMutation) AddedDefaultMaxClones() (r int, exists bool) {
	v := m.adddefault_max_clones
	if v == nil {
		return
	}
	return *v, true
}

// ClearDefaultMaxClones clears the value of the "default_max_clones" field.
func (m *GuildConfigMutation) ClearDefaultMaxClones() {
	m.default_max_clones = nil
	m.adddefault_max_clones = nil
	m.clearedFields[guildconfig.FieldDefaultMaxClones] = struct{}{}
}

// DefaultMaxClonesCleared returns if the "default_max_clones" field was cleared in this mutation.
func (m *GuildConfigMutation) DefaultMaxClonesCleared() bool {
	_, ok := m.clearedFields[guildconfig.FieldDefaultMaxClones]
	return ok
}

// ResetDefaultMaxClones resets all changes to the "default_max_clones" field.
func (m *GuildConfigMutation) ResetDefaultMaxClones() {
	m.default_max_clones = nil
	m.adddefault_max_clones = nil
	delete(m.clearedFields, guildconfig.FieldDefaultMaxClones)
}

// SetRegexMatch sets the "regex_match" field.
func (m *GuildConfigMutation) SetRegexMatch(s string) {
	m.regex_match = &s
}

// RegexMatch returns the value of the "regex_match" field in the mutation.
func (m *GuildConfigMutation) RegexMatch() (r string, exists bool) {
	v := m.regex_match
	if v == nil {
		return
	}
	return *v, true
}

// OldRegexMatch returns the old "regex_match" field's value of the GuildConfig entity.
// If the GuildConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildConfigMutation) OldRegexMatch(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegexMatch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegexMatch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegexMatch: %w", err)
	}
	return oldValue.RegexMatch, nil
}

// ClearRegexMatch clears the value of the "regex_match" field.
func (m *GuildConfigMutation) ClearRegexMatch() {
	m.regex_match = nil
	m.clearedFields[guildconfig.FieldRegexMatch] = struct{}{}
}

// RegexMatchCleared returns if the "regex_match" field was cleared in this mutation.
func (m *GuildConfigMutation) RegexMatchCleared() bool {
	_, ok := m.clearedFields[guildconfig.FieldRegexMatch]
	return ok
}

// ResetRegexMatch resets all changes to the "regex_match" field.
func (m *GuildConfigMutation) ResetRegexMatch() {
	m.regex_match = nil
	delete(m.clearedFields, guildconfig.FieldRegexMatch)
}

// SetContactEmail sets the "contact_email" field.
func (m *GuildConfigMutation) SetContactEmail(s string) {
	m.contact_email = &s
}

// ContactEmail returns the value of the "contact_email" field in the mutation.
func (m *GuildConfigMutation) ContactEmail() (r string, exists bool) {
	v := m.contact_email
	if v == nil {
		return
	}
	return *v, true
}

// OldContactEmail returns the old "contact_email" field's value of the GuildConfig entity.
// If the GuildConfig object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildConfigMutation) OldContactEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactEmail: %w", err)
	}
	return oldValue.ContactEmail, nil
}

// ClearContactEmail clears the value of the "contact_email" field.
func (m *GuildConfigMutation) ClearContactEmail() {
	m.contact_email = nil
	m.clearedFields[guildconfig.FieldContactEmail] = struct{}{}
}

// ContactEmailCleared returns if the "contact_email" field was cleared in this mutation.
func (m *GuildConfigMutation) ContactEmailCleared() bool {
	_, ok := m.clearedFields[guildconfig.FieldContactEmail]
	return ok
}

// ResetContactEmail resets all changes to the "contact_email" field.
func (m *GuildConfigMutation) ResetContactEmail() {
	m.contact_email = nil
	delete(m.clearedFields, guildconfig.FieldContactEmail)
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *GuildConfigMutation) SetGuildID(id int) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *GuildConfigMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared reports if the "guild" edge to the Guild entity was cleared.
func (m *GuildConfigMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *GuildConfigMutation) GuildID() (id int, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *GuildConfigMutation) GuildIDs() (ids []int) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *GuildConfigMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// Where appends a list predicates to the GuildConfigMutation builder.
func (m *GuildConfigMutation) Where(ps ...predicate.GuildConfig) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GuildConfigMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GuildConfig).
func (m *GuildConfigMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuildConfigMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, guildconfig.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, guildconfig.FieldUpdateTime)
	}
	if m.enabled != nil {
		fields = append(fields, guildconfig.FieldEnabled)
	}
	if m.default_max_clones != nil {
		fields = append(fields, guildconfig.FieldDefaultMaxClones)
	}
	if m.regex_match != nil {
		fields = append(fields, guildconfig.FieldRegexMatch)
	}
	if m.contact_email != nil {
		fields = append(fields, guildconfig.FieldContactEmail)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuildConfigMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guildconfig.FieldCreateTime:
		return m.CreateTime()
	case guildconfig.FieldUpdateTime:
		return m.UpdateTime()
	case guildconfig.FieldEnabled:
		return m.Enabled()
	case guildconfig.FieldDefaultMaxClones:
		return m.DefaultMaxClones()
	case guildconfig.FieldRegexMatch:
		return m.RegexMatch()
	case guildconfig.FieldContactEmail:
		return m.ContactEmail()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuildConfigMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guildconfig.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case guildconfig.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case guildconfig.FieldEnabled:
		return m.OldEnabled(ctx)
	case guildconfig.FieldDefaultMaxClones:
		return m.OldDefaultMaxClones(ctx)
	case guildconfig.FieldRegexMatch:
		return m.OldRegexMatch(ctx)
	case guildconfig.FieldContactEmail:
		return m.OldContactEmail(ctx)
	}
	return nil, fmt.Errorf("unknown GuildConfig field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildConfigMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guildconfig.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case guildconfig.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case guildconfig.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case guildconfig.FieldDefaultMaxClones:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultMaxClones(v)
		return nil
	case guildconfig.FieldRegexMatch:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegexMatch(v)
		return nil
	case guildconfig.FieldContactEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactEmail(v)
		return nil
	}
	return fmt.Errorf("unknown GuildConfig field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuildConfigMutation) AddedFields() []string {
	var fields []string
	if m.adddefault_max_clones != nil {
		fields = append(fields, guildconfig.FieldDefaultMaxClones)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuildConfigMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case guildconfig.FieldDefaultMaxClones:
		return m.AddedDefaultMaxClones()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildConfigMutation) AddField(name string, value ent.Value) error {
	switch name {
	case guildconfig.FieldDefaultMaxClones:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDefaultMaxClones(v)
		return nil
	}
	return fmt.Errorf("unknown GuildConfig numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuildConfigMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(guildconfig.FieldEnabled) {
		fields = append(fields, guildconfig.FieldEnabled)
	}
	if m.FieldCleared(guildconfig.FieldDefaultMaxClones) {
		fields = append(fields, guildconfig.FieldDefaultMaxClones)
	}
	if m.FieldCleared(guildconfig.FieldRegexMatch) {
		fields = append(fields, guildconfig.FieldRegexMatch)
	}
	if m.FieldCleared(guildconfig.FieldContactEmail) {
		fields = append(fields, guildconfig.FieldContactEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuildConfigMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildConfigMutation) ClearField(name string) error {
	switch name {
	case guildconfig.FieldEnabled:
		m.ClearEnabled()
		return nil
	case guildconfig.FieldDefaultMaxClones:
		m.ClearDefaultMaxClones()
		return nil
	case guildconfig.FieldRegexMatch:
		m.ClearRegexMatch()
		return nil
	case guildconfig.FieldContactEmail:
		m.ClearContactEmail()
		return nil
	}
	return fmt.Errorf("unknown GuildConfig nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuildConfigMutation) ResetField(name string) error {
	switch name {
	case guildconfig.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case guildconfig.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case guildconfig.FieldEnabled:
		m.ResetEnabled()
		return nil
	case guildconfig.FieldDefaultMaxClones:
		m.ResetDefaultMaxClones()
		return nil
	case guildconfig.FieldRegexMatch:
		m.ResetRegexMatch()
		return nil
	case guildconfig.FieldContactEmail:
		m.ResetContactEmail()
		return nil
	}
	return fmt.Errorf("unknown GuildConfig field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuildConfigMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.guild != nil {
		edges = append(edges, guildconfig.EdgeGuild)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuildConfigMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guildconfig.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuildConfigMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuildConfigMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuildConfigMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedguild {
		edges = append(edges, guildconfig.EdgeGuild)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuildConfigMutation) EdgeCleared(name string) bool {
	switch name {
	case guildconfig.EdgeGuild:
		return m.clearedguild
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuildConfigMutation) ClearEdge(name string) error {
	switch name {
	case guildconfig.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown GuildConfig unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuildConfigMutation) ResetEdge(name string) error {
	switch name {
	case guildconfig.EdgeGuild:
		m.ResetGuild()
		return nil
	}
	return fmt.Errorf("unknown GuildConfig edge %s", name)
}

// GuildEventMutation represents an operation that mutates the GuildEvent nodes in the graph.
type GuildEventMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	_type         *guildevent.Type
	message       *string
	metadata      *map[string]interface{}
	clearedFields map[string]struct{}
	guild         *int
	clearedguild  bool
	done          bool
	oldValue      func(context.Context) (*GuildEvent, error)
	predicates    []predicate.GuildEvent
}

var _ ent.Mutation = (*GuildEventMutation)(nil)

// guildeventOption allows management of the mutation configuration using functional options.
type guildeventOption func(*GuildEventMutation)

// newGuildEventMutation creates new mutation for the GuildEvent entity.
func newGuildEventMutation(c config, op Op, opts ...guildeventOption) *GuildEventMutation {
	m := &GuildEventMutation{
		config:        c,
		op:            op,
		typ:           TypeGuildEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuildEventID sets the ID field of the mutation.
func withGuildEventID(id int) guildeventOption {
	return func(m *GuildEventMutation) {
		var (
			err   error
			once  sync.Once
			value *GuildEvent
		)
		m.oldValue = func(ctx context.Context) (*GuildEvent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuildEvent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuildEvent sets the old GuildEvent of the mutation.
func withGuildEvent(node *GuildEvent) guildeventOption {
	return func(m *GuildEventMutation) {
		m.oldValue = func(context.Context) (*GuildEvent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildEventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildEventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuildEventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuildEventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GuildEvent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *GuildEventMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *GuildEventMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the GuildEvent entity.
// If the GuildEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildEventMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *GuildEventMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *GuildEventMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *GuildEventMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the GuildEvent entity.
// If the GuildEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildEventMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *GuildEventMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetType sets the "type" field.
func (m *GuildEventMutation) SetType(gu guildevent.Type) {
	m._type = &gu
}

// GetType returns the value of the "type" field in the mutation.
func (m *GuildEventMutation) GetType() (r guildevent.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the GuildEvent entity.
// If the GuildEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildEventMutation) OldType(ctx context.Context) (v guildevent.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *GuildEventMutation) ResetType() {
	m._type = nil
}

// SetMessage sets the "message" field.
func (m *GuildEventMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *GuildEventMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the GuildEvent entity.
// If the GuildEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildEventMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *GuildEventMutation) ResetMessage() {
	m.message = nil
}

// SetMetadata sets the "metadata" field.
func (m *GuildEventMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *GuildEventMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the GuildEvent entity.
// If the GuildEvent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuildEventMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *GuildEventMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[guildevent.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *GuildEventMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[guildevent.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *GuildEventMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, guildevent.FieldMetadata)
}

// SetGuildID sets the "guild" edge to the Guild entity by id.
func (m *GuildEventMutation) SetGuildID(id int) {
	m.guild = &id
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (m *GuildEventMutation) ClearGuild() {
	m.clearedguild = true
}

// GuildCleared reports if the "guild" edge to the Guild entity was cleared.
func (m *GuildEventMutation) GuildCleared() bool {
	return m.clearedguild
}

// GuildID returns the "guild" edge ID in the mutation.
func (m *GuildEventMutation) GuildID() (id int, exists bool) {
	if m.guild != nil {
		return *m.guild, true
	}
	return
}

// GuildIDs returns the "guild" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuildID instead. It exists only for internal usage by the builders.
func (m *GuildEventMutation) GuildIDs() (ids []int) {
	if id := m.guild; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuild resets all changes to the "guild" edge.
func (m *GuildEventMutation) ResetGuild() {
	m.guild = nil
	m.clearedguild = false
}

// Where appends a list predicates to the GuildEventMutation builder.
func (m *GuildEventMutation) Where(ps ...predicate.GuildEvent) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GuildEventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GuildEvent).
func (m *GuildEventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuildEventMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.create_time != nil {
		fields = append(fields, guildevent.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, guildevent.FieldUpdateTime)
	}
	if m._type != nil {
		fields = append(fields, guildevent.FieldType)
	}
	if m.message != nil {
		fields = append(fields, guildevent.FieldMessage)
	}
	if m.metadata != nil {
		fields = append(fields, guildevent.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuildEventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guildevent.FieldCreateTime:
		return m.CreateTime()
	case guildevent.FieldUpdateTime:
		return m.UpdateTime()
	case guildevent.FieldType:
		return m.GetType()
	case guildevent.FieldMessage:
		return m.Message()
	case guildevent.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuildEventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guildevent.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case guildevent.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case guildevent.FieldType:
		return m.OldType(ctx)
	case guildevent.FieldMessage:
		return m.OldMessage(ctx)
	case guildevent.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown GuildEvent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildEventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guildevent.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case guildevent.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case guildevent.FieldType:
		v, ok := value.(guildevent.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case guildevent.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case guildevent.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown GuildEvent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuildEventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuildEventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuildEventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GuildEvent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuildEventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(guildevent.FieldMetadata) {
		fields = append(fields, guildevent.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuildEventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildEventMutation) ClearField(name string) error {
	switch name {
	case guildevent.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown GuildEvent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuildEventMutation) ResetField(name string) error {
	switch name {
	case guildevent.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case guildevent.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case guildevent.FieldType:
		m.ResetType()
		return nil
	case guildevent.FieldMessage:
		m.ResetMessage()
		return nil
	case guildevent.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown GuildEvent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuildEventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.guild != nil {
		edges = append(edges, guildevent.EdgeGuild)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuildEventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guildevent.EdgeGuild:
		if id := m.guild; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuildEventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuildEventMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuildEventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedguild {
		edges = append(edges, guildevent.EdgeGuild)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuildEventMutation) EdgeCleared(name string) bool {
	switch name {
	case guildevent.EdgeGuild:
		return m.clearedguild
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuildEventMutation) ClearEdge(name string) error {
	switch name {
	case guildevent.EdgeGuild:
		m.ClearGuild()
		return nil
	}
	return fmt.Errorf("unknown GuildEvent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuildEventMutation) ResetEdge(name string) error {
	switch name {
	case guildevent.EdgeGuild:
		m.ResetGuild()
		return nil
	}
	return fmt.Errorf("unknown GuildEvent edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	create_time        *time.Time
	update_time        *time.Time
	user_id            *string
	admin              *bool
	username           *string
	discriminator      *string
	email              *string
	avatar_hash        *string
	avatar_url         *string
	locale             *string
	bot                *bool
	system             *bool
	mfa_enabled        *bool
	verified           *bool
	flags              *uint64
	addflags           *int64
	premium_type       *int
	addpremium_type    *int
	public_flags       *uint64
	addpublic_flags    *int64
	clearedFields      map[string]struct{}
	user_guilds        map[int]struct{}
	removeduser_guilds map[int]struct{}
	cleareduser_guilds bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetUserID sets the "user_id" field.
func (m *UserMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMutation) ResetUserID() {
	m.user_id = nil
}

// SetAdmin sets the "admin" field.
func (m *UserMutation) SetAdmin(b bool) {
	m.admin = &b
}

// Admin returns the value of the "admin" field in the mutation.
func (m *UserMutation) Admin() (r bool, exists bool) {
	v := m.admin
	if v == nil {
		return
	}
	return *v, true
}

// OldAdmin returns the old "admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdmin: %w", err)
	}
	return oldValue.Admin, nil
}

// ClearAdmin clears the value of the "admin" field.
func (m *UserMutation) ClearAdmin() {
	m.admin = nil
	m.clearedFields[user.FieldAdmin] = struct{}{}
}

// AdminCleared returns if the "admin" field was cleared in this mutation.
func (m *UserMutation) AdminCleared() bool {
	_, ok := m.clearedFields[user.FieldAdmin]
	return ok
}

// ResetAdmin resets all changes to the "admin" field.
func (m *UserMutation) ResetAdmin() {
	m.admin = nil
	delete(m.clearedFields, user.FieldAdmin)
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetDiscriminator sets the "discriminator" field.
func (m *UserMutation) SetDiscriminator(s string) {
	m.discriminator = &s
}

// Discriminator returns the value of the "discriminator" field in the mutation.
func (m *UserMutation) Discriminator() (r string, exists bool) {
	v := m.discriminator
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscriminator returns the old "discriminator" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDiscriminator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscriminator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscriminator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscriminator: %w", err)
	}
	return oldValue.Discriminator, nil
}

// ResetDiscriminator resets all changes to the "discriminator" field.
func (m *UserMutation) ResetDiscriminator() {
	m.discriminator = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetAvatarHash sets the "avatar_hash" field.
func (m *UserMutation) SetAvatarHash(s string) {
	m.avatar_hash = &s
}

// AvatarHash returns the value of the "avatar_hash" field in the mutation.
func (m *UserMutation) AvatarHash() (r string, exists bool) {
	v := m.avatar_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarHash returns the old "avatar_hash" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarHash: %w", err)
	}
	return oldValue.AvatarHash, nil
}

// ClearAvatarHash clears the value of the "avatar_hash" field.
func (m *UserMutation) ClearAvatarHash() {
	m.avatar_hash = nil
	m.clearedFields[user.FieldAvatarHash] = struct{}{}
}

// AvatarHashCleared returns if the "avatar_hash" field was cleared in this mutation.
func (m *UserMutation) AvatarHashCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarHash]
	return ok
}

// ResetAvatarHash resets all changes to the "avatar_hash" field.
func (m *UserMutation) ResetAvatarHash() {
	m.avatar_hash = nil
	delete(m.clearedFields, user.FieldAvatarHash)
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
}

// SetLocale sets the "locale" field.
func (m *UserMutation) SetLocale(s string) {
	m.locale = &s
}

// Locale returns the value of the "locale" field in the mutation.
func (m *UserMutation) Locale() (r string, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLocale(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ClearLocale clears the value of the "locale" field.
func (m *UserMutation) ClearLocale() {
	m.locale = nil
	m.clearedFields[user.FieldLocale] = struct{}{}
}

// LocaleCleared returns if the "locale" field was cleared in this mutation.
func (m *UserMutation) LocaleCleared() bool {
	_, ok := m.clearedFields[user.FieldLocale]
	return ok
}

// ResetLocale resets all changes to the "locale" field.
func (m *UserMutation) ResetLocale() {
	m.locale = nil
	delete(m.clearedFields, user.FieldLocale)
}

// SetBot sets the "bot" field.
func (m *UserMutation) SetBot(b bool) {
	m.bot = &b
}

// Bot returns the value of the "bot" field in the mutation.
func (m *UserMutation) Bot() (r bool, exists bool) {
	v := m.bot
	if v == nil {
		return
	}
	return *v, true
}

// OldBot returns the old "bot" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBot(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBot: %w", err)
	}
	return oldValue.Bot, nil
}

// ClearBot clears the value of the "bot" field.
func (m *UserMutation) ClearBot() {
	m.bot = nil
	m.clearedFields[user.FieldBot] = struct{}{}
}

// BotCleared returns if the "bot" field was cleared in this mutation.
func (m *UserMutation) BotCleared() bool {
	_, ok := m.clearedFields[user.FieldBot]
	return ok
}

// ResetBot resets all changes to the "bot" field.
func (m *UserMutation) ResetBot() {
	m.bot = nil
	delete(m.clearedFields, user.FieldBot)
}

// SetSystem sets the "system" field.
func (m *UserMutation) SetSystem(b bool) {
	m.system = &b
}

// System returns the value of the "system" field in the mutation.
func (m *UserMutation) System() (r bool, exists bool) {
	v := m.system
	if v == nil {
		return
	}
	return *v, true
}

// OldSystem returns the old "system" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSystem(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSystem is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSystem requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSystem: %w", err)
	}
	return oldValue.System, nil
}

// ClearSystem clears the value of the "system" field.
func (m *UserMutation) ClearSystem() {
	m.system = nil
	m.clearedFields[user.FieldSystem] = struct{}{}
}

// SystemCleared returns if the "system" field was cleared in this mutation.
func (m *UserMutation) SystemCleared() bool {
	_, ok := m.clearedFields[user.FieldSystem]
	return ok
}

// ResetSystem resets all changes to the "system" field.
func (m *UserMutation) ResetSystem() {
	m.system = nil
	delete(m.clearedFields, user.FieldSystem)
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (m *UserMutation) SetMfaEnabled(b bool) {
	m.mfa_enabled = &b
}

// MfaEnabled returns the value of the "mfa_enabled" field in the mutation.
func (m *UserMutation) MfaEnabled() (r bool, exists bool) {
	v := m.mfa_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldMfaEnabled returns the old "mfa_enabled" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMfaEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMfaEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMfaEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMfaEnabled: %w", err)
	}
	return oldValue.MfaEnabled, nil
}

// ClearMfaEnabled clears the value of the "mfa_enabled" field.
func (m *UserMutation) ClearMfaEnabled() {
	m.mfa_enabled = nil
	m.clearedFields[user.FieldMfaEnabled] = struct{}{}
}

// MfaEnabledCleared returns if the "mfa_enabled" field was cleared in this mutation.
func (m *UserMutation) MfaEnabledCleared() bool {
	_, ok := m.clearedFields[user.FieldMfaEnabled]
	return ok
}

// ResetMfaEnabled resets all changes to the "mfa_enabled" field.
func (m *UserMutation) ResetMfaEnabled() {
	m.mfa_enabled = nil
	delete(m.clearedFields, user.FieldMfaEnabled)
}

// SetVerified sets the "verified" field.
func (m *UserMutation) SetVerified(b bool) {
	m.verified = &b
}

// Verified returns the value of the "verified" field in the mutation.
func (m *UserMutation) Verified() (r bool, exists bool) {
	v := m.verified
	if v == nil {
		return
	}
	return *v, true
}

// OldVerified returns the old "verified" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerified: %w", err)
	}
	return oldValue.Verified, nil
}

// ClearVerified clears the value of the "verified" field.
func (m *UserMutation) ClearVerified() {
	m.verified = nil
	m.clearedFields[user.FieldVerified] = struct{}{}
}

// VerifiedCleared returns if the "verified" field was cleared in this mutation.
func (m *UserMutation) VerifiedCleared() bool {
	_, ok := m.clearedFields[user.FieldVerified]
	return ok
}

// ResetVerified resets all changes to the "verified" field.
func (m *UserMutation) ResetVerified() {
	m.verified = nil
	delete(m.clearedFields, user.FieldVerified)
}

// SetFlags sets the "flags" field.
func (m *UserMutation) SetFlags(u uint64) {
	m.flags = &u
	m.addflags = nil
}

// Flags returns the value of the "flags" field in the mutation.
func (m *UserMutation) Flags() (r uint64, exists bool) {
	v := m.flags
	if v == nil {
		return
	}
	return *v, true
}

// OldFlags returns the old "flags" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFlags(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlags: %w", err)
	}
	return oldValue.Flags, nil
}

// AddFlags adds u to the "flags" field.
func (m *UserMutation) AddFlags(u int64) {
	if m.addflags != nil {
		*m.addflags += u
	} else {
		m.addflags = &u
	}
}

// AddedFlags returns the value that was added to the "flags" field in this mutation.
func (m *UserMutation) AddedFlags() (r int64, exists bool) {
	v := m.addflags
	if v == nil {
		return
	}
	return *v, true
}

// ClearFlags clears the value of the "flags" field.
func (m *UserMutation) ClearFlags() {
	m.flags = nil
	m.addflags = nil
	m.clearedFields[user.FieldFlags] = struct{}{}
}

// FlagsCleared returns if the "flags" field was cleared in this mutation.
func (m *UserMutation) FlagsCleared() bool {
	_, ok := m.clearedFields[user.FieldFlags]
	return ok
}

// ResetFlags resets all changes to the "flags" field.
func (m *UserMutation) ResetFlags() {
	m.flags = nil
	m.addflags = nil
	delete(m.clearedFields, user.FieldFlags)
}

// SetPremiumType sets the "premium_type" field.
func (m *UserMutation) SetPremiumType(i int) {
	m.premium_type = &i
	m.addpremium_type = nil
}

// PremiumType returns the value of the "premium_type" field in the mutation.
func (m *UserMutation) PremiumType() (r int, exists bool) {
	v := m.premium_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPremiumType returns the old "premium_type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPremiumType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPremiumType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPremiumType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPremiumType: %w", err)
	}
	return oldValue.PremiumType, nil
}

// AddPremiumType adds i to the "premium_type" field.
func (m *UserMutation) AddPremiumType(i int) {
	if m.addpremium_type != nil {
		*m.addpremium_type += i
	} else {
		m.addpremium_type = &i
	}
}

// AddedPremiumType returns the value that was added to the "premium_type" field in this mutation.
func (m *UserMutation) AddedPremiumType() (r int, exists bool) {
	v := m.addpremium_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearPremiumType clears the value of the "premium_type" field.
func (m *UserMutation) ClearPremiumType() {
	m.premium_type = nil
	m.addpremium_type = nil
	m.clearedFields[user.FieldPremiumType] = struct{}{}
}

// PremiumTypeCleared returns if the "premium_type" field was cleared in this mutation.
func (m *UserMutation) PremiumTypeCleared() bool {
	_, ok := m.clearedFields[user.FieldPremiumType]
	return ok
}

// ResetPremiumType resets all changes to the "premium_type" field.
func (m *UserMutation) ResetPremiumType() {
	m.premium_type = nil
	m.addpremium_type = nil
	delete(m.clearedFields, user.FieldPremiumType)
}

// SetPublicFlags sets the "public_flags" field.
func (m *UserMutation) SetPublicFlags(u uint64) {
	m.public_flags = &u
	m.addpublic_flags = nil
}

// PublicFlags returns the value of the "public_flags" field in the mutation.
func (m *UserMutation) PublicFlags() (r uint64, exists bool) {
	v := m.public_flags
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicFlags returns the old "public_flags" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPublicFlags(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicFlags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicFlags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicFlags: %w", err)
	}
	return oldValue.PublicFlags, nil
}

// AddPublicFlags adds u to the "public_flags" field.
func (m *UserMutation) AddPublicFlags(u int64) {
	if m.addpublic_flags != nil {
		*m.addpublic_flags += u
	} else {
		m.addpublic_flags = &u
	}
}

// AddedPublicFlags returns the value that was added to the "public_flags" field in this mutation.
func (m *UserMutation) AddedPublicFlags() (r int64, exists bool) {
	v := m.addpublic_flags
	if v == nil {
		return
	}
	return *v, true
}

// ClearPublicFlags clears the value of the "public_flags" field.
func (m *UserMutation) ClearPublicFlags() {
	m.public_flags = nil
	m.addpublic_flags = nil
	m.clearedFields[user.FieldPublicFlags] = struct{}{}
}

// PublicFlagsCleared returns if the "public_flags" field was cleared in this mutation.
func (m *UserMutation) PublicFlagsCleared() bool {
	_, ok := m.clearedFields[user.FieldPublicFlags]
	return ok
}

// ResetPublicFlags resets all changes to the "public_flags" field.
func (m *UserMutation) ResetPublicFlags() {
	m.public_flags = nil
	m.addpublic_flags = nil
	delete(m.clearedFields, user.FieldPublicFlags)
}

// AddUserGuildIDs adds the "user_guilds" edge to the Guild entity by ids.
func (m *UserMutation) AddUserGuildIDs(ids ...int) {
	if m.user_guilds == nil {
		m.user_guilds = make(map[int]struct{})
	}
	for i := range ids {
		m.user_guilds[ids[i]] = struct{}{}
	}
}

// ClearUserGuilds clears the "user_guilds" edge to the Guild entity.
func (m *UserMutation) ClearUserGuilds() {
	m.cleareduser_guilds = true
}

// UserGuildsCleared reports if the "user_guilds" edge to the Guild entity was cleared.
func (m *UserMutation) UserGuildsCleared() bool {
	return m.cleareduser_guilds
}

// RemoveUserGuildIDs removes the "user_guilds" edge to the Guild entity by IDs.
func (m *UserMutation) RemoveUserGuildIDs(ids ...int) {
	if m.removeduser_guilds == nil {
		m.removeduser_guilds = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_guilds, ids[i])
		m.removeduser_guilds[ids[i]] = struct{}{}
	}
}

// RemovedUserGuilds returns the removed IDs of the "user_guilds" edge to the Guild entity.
func (m *UserMutation) RemovedUserGuildsIDs() (ids []int) {
	for id := range m.removeduser_guilds {
		ids = append(ids, id)
	}
	return
}

// UserGuildsIDs returns the "user_guilds" edge IDs in the mutation.
func (m *UserMutation) UserGuildsIDs() (ids []int) {
	for id := range m.user_guilds {
		ids = append(ids, id)
	}
	return
}

// ResetUserGuilds resets all changes to the "user_guilds" edge.
func (m *UserMutation) ResetUserGuilds() {
	m.user_guilds = nil
	m.cleareduser_guilds = false
	m.removeduser_guilds = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.user_id != nil {
		fields = append(fields, user.FieldUserID)
	}
	if m.admin != nil {
		fields = append(fields, user.FieldAdmin)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.discriminator != nil {
		fields = append(fields, user.FieldDiscriminator)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.avatar_hash != nil {
		fields = append(fields, user.FieldAvatarHash)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	if m.locale != nil {
		fields = append(fields, user.FieldLocale)
	}
	if m.bot != nil {
		fields = append(fields, user.FieldBot)
	}
	if m.system != nil {
		fields = append(fields, user.FieldSystem)
	}
	if m.mfa_enabled != nil {
		fields = append(fields, user.FieldMfaEnabled)
	}
	if m.verified != nil {
		fields = append(fields, user.FieldVerified)
	}
	if m.flags != nil {
		fields = append(fields, user.FieldFlags)
	}
	if m.premium_type != nil {
		fields = append(fields, user.FieldPremiumType)
	}
	if m.public_flags != nil {
		fields = append(fields, user.FieldPublicFlags)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldUserID:
		return m.UserID()
	case user.FieldAdmin:
		return m.Admin()
	case user.FieldUsername:
		return m.Username()
	case user.FieldDiscriminator:
		return m.Discriminator()
	case user.FieldEmail:
		return m.Email()
	case user.FieldAvatarHash:
		return m.AvatarHash()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	case user.FieldLocale:
		return m.Locale()
	case user.FieldBot:
		return m.Bot()
	case user.FieldSystem:
		return m.System()
	case user.FieldMfaEnabled:
		return m.MfaEnabled()
	case user.FieldVerified:
		return m.Verified()
	case user.FieldFlags:
		return m.Flags()
	case user.FieldPremiumType:
		return m.PremiumType()
	case user.FieldPublicFlags:
		return m.PublicFlags()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldUserID:
		return m.OldUserID(ctx)
	case user.FieldAdmin:
		return m.OldAdmin(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldDiscriminator:
		return m.OldDiscriminator(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldAvatarHash:
		return m.OldAvatarHash(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	case user.FieldLocale:
		return m.OldLocale(ctx)
	case user.FieldBot:
		return m.OldBot(ctx)
	case user.FieldSystem:
		return m.OldSystem(ctx)
	case user.FieldMfaEnabled:
		return m.OldMfaEnabled(ctx)
	case user.FieldVerified:
		return m.OldVerified(ctx)
	case user.FieldFlags:
		return m.OldFlags(ctx)
	case user.FieldPremiumType:
		return m.OldPremiumType(ctx)
	case user.FieldPublicFlags:
		return m.OldPublicFlags(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case user.FieldAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdmin(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldDiscriminator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscriminator(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldAvatarHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarHash(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	case user.FieldLocale:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	case user.FieldBot:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBot(v)
		return nil
	case user.FieldSystem:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSystem(v)
		return nil
	case user.FieldMfaEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMfaEnabled(v)
		return nil
	case user.FieldVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerified(v)
		return nil
	case user.FieldFlags:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlags(v)
		return nil
	case user.FieldPremiumType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPremiumType(v)
		return nil
	case user.FieldPublicFlags:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicFlags(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addflags != nil {
		fields = append(fields, user.FieldFlags)
	}
	if m.addpremium_type != nil {
		fields = append(fields, user.FieldPremiumType)
	}
	if m.addpublic_flags != nil {
		fields = append(fields, user.FieldPublicFlags)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFlags:
		return m.AddedFlags()
	case user.FieldPremiumType:
		return m.AddedPremiumType()
	case user.FieldPublicFlags:
		return m.AddedPublicFlags()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldFlags:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFlags(v)
		return nil
	case user.FieldPremiumType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPremiumType(v)
		return nil
	case user.FieldPublicFlags:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPublicFlags(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldAdmin) {
		fields = append(fields, user.FieldAdmin)
	}
	if m.FieldCleared(user.FieldAvatarHash) {
		fields = append(fields, user.FieldAvatarHash)
	}
	if m.FieldCleared(user.FieldLocale) {
		fields = append(fields, user.FieldLocale)
	}
	if m.FieldCleared(user.FieldBot) {
		fields = append(fields, user.FieldBot)
	}
	if m.FieldCleared(user.FieldSystem) {
		fields = append(fields, user.FieldSystem)
	}
	if m.FieldCleared(user.FieldMfaEnabled) {
		fields = append(fields, user.FieldMfaEnabled)
	}
	if m.FieldCleared(user.FieldVerified) {
		fields = append(fields, user.FieldVerified)
	}
	if m.FieldCleared(user.FieldFlags) {
		fields = append(fields, user.FieldFlags)
	}
	if m.FieldCleared(user.FieldPremiumType) {
		fields = append(fields, user.FieldPremiumType)
	}
	if m.FieldCleared(user.FieldPublicFlags) {
		fields = append(fields, user.FieldPublicFlags)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldAdmin:
		m.ClearAdmin()
		return nil
	case user.FieldAvatarHash:
		m.ClearAvatarHash()
		return nil
	case user.FieldLocale:
		m.ClearLocale()
		return nil
	case user.FieldBot:
		m.ClearBot()
		return nil
	case user.FieldSystem:
		m.ClearSystem()
		return nil
	case user.FieldMfaEnabled:
		m.ClearMfaEnabled()
		return nil
	case user.FieldVerified:
		m.ClearVerified()
		return nil
	case user.FieldFlags:
		m.ClearFlags()
		return nil
	case user.FieldPremiumType:
		m.ClearPremiumType()
		return nil
	case user.FieldPublicFlags:
		m.ClearPublicFlags()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	case user.FieldAdmin:
		m.ResetAdmin()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldDiscriminator:
		m.ResetDiscriminator()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldAvatarHash:
		m.ResetAvatarHash()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	case user.FieldLocale:
		m.ResetLocale()
		return nil
	case user.FieldBot:
		m.ResetBot()
		return nil
	case user.FieldSystem:
		m.ResetSystem()
		return nil
	case user.FieldMfaEnabled:
		m.ResetMfaEnabled()
		return nil
	case user.FieldVerified:
		m.ResetVerified()
		return nil
	case user.FieldFlags:
		m.ResetFlags()
		return nil
	case user.FieldPremiumType:
		m.ResetPremiumType()
		return nil
	case user.FieldPublicFlags:
		m.ResetPublicFlags()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_guilds != nil {
		edges = append(edges, user.EdgeUserGuilds)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserGuilds:
		ids := make([]ent.Value, 0, len(m.user_guilds))
		for id := range m.user_guilds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeduser_guilds != nil {
		edges = append(edges, user.EdgeUserGuilds)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserGuilds:
		ids := make([]ent.Value, 0, len(m.removeduser_guilds))
		for id := range m.removeduser_guilds {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_guilds {
		edges = append(edges, user.EdgeUserGuilds)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserGuilds:
		return m.cleareduser_guilds
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserGuilds:
		m.ResetUserGuilds()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
