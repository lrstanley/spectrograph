// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/lrstanley/spectrograph/internal/ent/migrate"

	"github.com/lrstanley/spectrograph/internal/ent/guild"
	"github.com/lrstanley/spectrograph/internal/ent/guildadminconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildconfig"
	"github.com/lrstanley/spectrograph/internal/ent/guildevent"
	"github.com/lrstanley/spectrograph/internal/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Guild is the client for interacting with the Guild builders.
	Guild *GuildClient
	// GuildAdminConfig is the client for interacting with the GuildAdminConfig builders.
	GuildAdminConfig *GuildAdminConfigClient
	// GuildConfig is the client for interacting with the GuildConfig builders.
	GuildConfig *GuildConfigClient
	// GuildEvent is the client for interacting with the GuildEvent builders.
	GuildEvent *GuildEventClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Guild = NewGuildClient(c.config)
	c.GuildAdminConfig = NewGuildAdminConfigClient(c.config)
	c.GuildConfig = NewGuildConfigClient(c.config)
	c.GuildEvent = NewGuildEventClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Guild:            NewGuildClient(cfg),
		GuildAdminConfig: NewGuildAdminConfigClient(cfg),
		GuildConfig:      NewGuildConfigClient(cfg),
		GuildEvent:       NewGuildEventClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Guild:            NewGuildClient(cfg),
		GuildAdminConfig: NewGuildAdminConfigClient(cfg),
		GuildConfig:      NewGuildConfigClient(cfg),
		GuildEvent:       NewGuildEventClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Guild.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Guild.Use(hooks...)
	c.GuildAdminConfig.Use(hooks...)
	c.GuildConfig.Use(hooks...)
	c.GuildEvent.Use(hooks...)
	c.User.Use(hooks...)
}

// GuildClient is a client for the Guild schema.
type GuildClient struct {
	config
}

// NewGuildClient returns a client for the Guild from the given config.
func NewGuildClient(c config) *GuildClient {
	return &GuildClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guild.Hooks(f(g(h())))`.
func (c *GuildClient) Use(hooks ...Hook) {
	c.hooks.Guild = append(c.hooks.Guild, hooks...)
}

// Create returns a builder for creating a Guild entity.
func (c *GuildClient) Create() *GuildCreate {
	mutation := newGuildMutation(c.config, OpCreate)
	return &GuildCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Guild entities.
func (c *GuildClient) CreateBulk(builders ...*GuildCreate) *GuildCreateBulk {
	return &GuildCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Guild.
func (c *GuildClient) Update() *GuildUpdate {
	mutation := newGuildMutation(c.config, OpUpdate)
	return &GuildUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildClient) UpdateOne(gu *Guild) *GuildUpdateOne {
	mutation := newGuildMutation(c.config, OpUpdateOne, withGuild(gu))
	return &GuildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildClient) UpdateOneID(id int) *GuildUpdateOne {
	mutation := newGuildMutation(c.config, OpUpdateOne, withGuildID(id))
	return &GuildUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Guild.
func (c *GuildClient) Delete() *GuildDelete {
	mutation := newGuildMutation(c.config, OpDelete)
	return &GuildDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuildClient) DeleteOne(gu *Guild) *GuildDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GuildClient) DeleteOneID(id int) *GuildDeleteOne {
	builder := c.Delete().Where(guild.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuildDeleteOne{builder}
}

// Query returns a query builder for Guild.
func (c *GuildClient) Query() *GuildQuery {
	return &GuildQuery{
		config: c.config,
	}
}

// Get returns a Guild entity by its id.
func (c *GuildClient) Get(ctx context.Context, id int) (*Guild, error) {
	return c.Query().Where(guild.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildClient) GetX(ctx context.Context, id int) *Guild {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuildConfig queries the guild_config edge of a Guild.
func (c *GuildClient) QueryGuildConfig(gu *Guild) *GuildConfigQuery {
	query := &GuildConfigQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(guildconfig.Table, guildconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, guild.GuildConfigTable, guild.GuildConfigColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuildAdminConfig queries the guild_admin_config edge of a Guild.
func (c *GuildClient) QueryGuildAdminConfig(gu *Guild) *GuildAdminConfigQuery {
	query := &GuildAdminConfigQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(guildadminconfig.Table, guildadminconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, guild.GuildAdminConfigTable, guild.GuildAdminConfigColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuildEvents queries the guild_events edge of a Guild.
func (c *GuildClient) QueryGuildEvents(gu *Guild) *GuildEventQuery {
	query := &GuildEventQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(guildevent.Table, guildevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guild.GuildEventsTable, guild.GuildEventsColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmins queries the admins edge of a Guild.
func (c *GuildClient) QueryAdmins(gu *Guild) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guild.Table, guild.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, guild.AdminsTable, guild.AdminsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuildClient) Hooks() []Hook {
	hooks := c.hooks.Guild
	return append(hooks[:len(hooks):len(hooks)], guild.Hooks[:]...)
}

// GuildAdminConfigClient is a client for the GuildAdminConfig schema.
type GuildAdminConfigClient struct {
	config
}

// NewGuildAdminConfigClient returns a client for the GuildAdminConfig from the given config.
func NewGuildAdminConfigClient(c config) *GuildAdminConfigClient {
	return &GuildAdminConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guildadminconfig.Hooks(f(g(h())))`.
func (c *GuildAdminConfigClient) Use(hooks ...Hook) {
	c.hooks.GuildAdminConfig = append(c.hooks.GuildAdminConfig, hooks...)
}

// Create returns a builder for creating a GuildAdminConfig entity.
func (c *GuildAdminConfigClient) Create() *GuildAdminConfigCreate {
	mutation := newGuildAdminConfigMutation(c.config, OpCreate)
	return &GuildAdminConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuildAdminConfig entities.
func (c *GuildAdminConfigClient) CreateBulk(builders ...*GuildAdminConfigCreate) *GuildAdminConfigCreateBulk {
	return &GuildAdminConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuildAdminConfig.
func (c *GuildAdminConfigClient) Update() *GuildAdminConfigUpdate {
	mutation := newGuildAdminConfigMutation(c.config, OpUpdate)
	return &GuildAdminConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildAdminConfigClient) UpdateOne(gac *GuildAdminConfig) *GuildAdminConfigUpdateOne {
	mutation := newGuildAdminConfigMutation(c.config, OpUpdateOne, withGuildAdminConfig(gac))
	return &GuildAdminConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildAdminConfigClient) UpdateOneID(id int) *GuildAdminConfigUpdateOne {
	mutation := newGuildAdminConfigMutation(c.config, OpUpdateOne, withGuildAdminConfigID(id))
	return &GuildAdminConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuildAdminConfig.
func (c *GuildAdminConfigClient) Delete() *GuildAdminConfigDelete {
	mutation := newGuildAdminConfigMutation(c.config, OpDelete)
	return &GuildAdminConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuildAdminConfigClient) DeleteOne(gac *GuildAdminConfig) *GuildAdminConfigDeleteOne {
	return c.DeleteOneID(gac.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GuildAdminConfigClient) DeleteOneID(id int) *GuildAdminConfigDeleteOne {
	builder := c.Delete().Where(guildadminconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuildAdminConfigDeleteOne{builder}
}

// Query returns a query builder for GuildAdminConfig.
func (c *GuildAdminConfigClient) Query() *GuildAdminConfigQuery {
	return &GuildAdminConfigQuery{
		config: c.config,
	}
}

// Get returns a GuildAdminConfig entity by its id.
func (c *GuildAdminConfigClient) Get(ctx context.Context, id int) (*GuildAdminConfig, error) {
	return c.Query().Where(guildadminconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildAdminConfigClient) GetX(ctx context.Context, id int) *GuildAdminConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuild queries the guild edge of a GuildAdminConfig.
func (c *GuildAdminConfigClient) QueryGuild(gac *GuildAdminConfig) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guildadminconfig.Table, guildadminconfig.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, guildadminconfig.GuildTable, guildadminconfig.GuildColumn),
		)
		fromV = sqlgraph.Neighbors(gac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuildAdminConfigClient) Hooks() []Hook {
	hooks := c.hooks.GuildAdminConfig
	return append(hooks[:len(hooks):len(hooks)], guildadminconfig.Hooks[:]...)
}

// GuildConfigClient is a client for the GuildConfig schema.
type GuildConfigClient struct {
	config
}

// NewGuildConfigClient returns a client for the GuildConfig from the given config.
func NewGuildConfigClient(c config) *GuildConfigClient {
	return &GuildConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guildconfig.Hooks(f(g(h())))`.
func (c *GuildConfigClient) Use(hooks ...Hook) {
	c.hooks.GuildConfig = append(c.hooks.GuildConfig, hooks...)
}

// Create returns a builder for creating a GuildConfig entity.
func (c *GuildConfigClient) Create() *GuildConfigCreate {
	mutation := newGuildConfigMutation(c.config, OpCreate)
	return &GuildConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuildConfig entities.
func (c *GuildConfigClient) CreateBulk(builders ...*GuildConfigCreate) *GuildConfigCreateBulk {
	return &GuildConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuildConfig.
func (c *GuildConfigClient) Update() *GuildConfigUpdate {
	mutation := newGuildConfigMutation(c.config, OpUpdate)
	return &GuildConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildConfigClient) UpdateOne(gc *GuildConfig) *GuildConfigUpdateOne {
	mutation := newGuildConfigMutation(c.config, OpUpdateOne, withGuildConfig(gc))
	return &GuildConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildConfigClient) UpdateOneID(id int) *GuildConfigUpdateOne {
	mutation := newGuildConfigMutation(c.config, OpUpdateOne, withGuildConfigID(id))
	return &GuildConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuildConfig.
func (c *GuildConfigClient) Delete() *GuildConfigDelete {
	mutation := newGuildConfigMutation(c.config, OpDelete)
	return &GuildConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuildConfigClient) DeleteOne(gc *GuildConfig) *GuildConfigDeleteOne {
	return c.DeleteOneID(gc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GuildConfigClient) DeleteOneID(id int) *GuildConfigDeleteOne {
	builder := c.Delete().Where(guildconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuildConfigDeleteOne{builder}
}

// Query returns a query builder for GuildConfig.
func (c *GuildConfigClient) Query() *GuildConfigQuery {
	return &GuildConfigQuery{
		config: c.config,
	}
}

// Get returns a GuildConfig entity by its id.
func (c *GuildConfigClient) Get(ctx context.Context, id int) (*GuildConfig, error) {
	return c.Query().Where(guildconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildConfigClient) GetX(ctx context.Context, id int) *GuildConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuild queries the guild edge of a GuildConfig.
func (c *GuildConfigClient) QueryGuild(gc *GuildConfig) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guildconfig.Table, guildconfig.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, guildconfig.GuildTable, guildconfig.GuildColumn),
		)
		fromV = sqlgraph.Neighbors(gc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuildConfigClient) Hooks() []Hook {
	hooks := c.hooks.GuildConfig
	return append(hooks[:len(hooks):len(hooks)], guildconfig.Hooks[:]...)
}

// GuildEventClient is a client for the GuildEvent schema.
type GuildEventClient struct {
	config
}

// NewGuildEventClient returns a client for the GuildEvent from the given config.
func NewGuildEventClient(c config) *GuildEventClient {
	return &GuildEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guildevent.Hooks(f(g(h())))`.
func (c *GuildEventClient) Use(hooks ...Hook) {
	c.hooks.GuildEvent = append(c.hooks.GuildEvent, hooks...)
}

// Create returns a builder for creating a GuildEvent entity.
func (c *GuildEventClient) Create() *GuildEventCreate {
	mutation := newGuildEventMutation(c.config, OpCreate)
	return &GuildEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuildEvent entities.
func (c *GuildEventClient) CreateBulk(builders ...*GuildEventCreate) *GuildEventCreateBulk {
	return &GuildEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuildEvent.
func (c *GuildEventClient) Update() *GuildEventUpdate {
	mutation := newGuildEventMutation(c.config, OpUpdate)
	return &GuildEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildEventClient) UpdateOne(ge *GuildEvent) *GuildEventUpdateOne {
	mutation := newGuildEventMutation(c.config, OpUpdateOne, withGuildEvent(ge))
	return &GuildEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildEventClient) UpdateOneID(id int) *GuildEventUpdateOne {
	mutation := newGuildEventMutation(c.config, OpUpdateOne, withGuildEventID(id))
	return &GuildEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuildEvent.
func (c *GuildEventClient) Delete() *GuildEventDelete {
	mutation := newGuildEventMutation(c.config, OpDelete)
	return &GuildEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuildEventClient) DeleteOne(ge *GuildEvent) *GuildEventDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GuildEventClient) DeleteOneID(id int) *GuildEventDeleteOne {
	builder := c.Delete().Where(guildevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuildEventDeleteOne{builder}
}

// Query returns a query builder for GuildEvent.
func (c *GuildEventClient) Query() *GuildEventQuery {
	return &GuildEventQuery{
		config: c.config,
	}
}

// Get returns a GuildEvent entity by its id.
func (c *GuildEventClient) Get(ctx context.Context, id int) (*GuildEvent, error) {
	return c.Query().Where(guildevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildEventClient) GetX(ctx context.Context, id int) *GuildEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuild queries the guild edge of a GuildEvent.
func (c *GuildEventClient) QueryGuild(ge *GuildEvent) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guildevent.Table, guildevent.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guildevent.GuildTable, guildevent.GuildColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuildEventClient) Hooks() []Hook {
	hooks := c.hooks.GuildEvent
	return append(hooks[:len(hooks):len(hooks)], guildevent.Hooks[:]...)
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserGuilds queries the user_guilds edge of a User.
func (c *UserClient) QueryUserGuilds(u *User) *GuildQuery {
	query := &GuildQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.UserGuildsTable, user.UserGuildsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBannedUsers queries the banned_users edge of a User.
func (c *UserClient) QueryBannedUsers(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.BannedUsersTable, user.BannedUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBannedBy queries the banned_by edge of a User.
func (c *UserClient) QueryBannedBy(u *User) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.BannedByTable, user.BannedByColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}
