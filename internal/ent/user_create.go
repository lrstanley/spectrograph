// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/spectrograph/internal/ent/guild"
	"github.com/lrstanley/spectrograph/internal/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (uc *UserCreate) SetCreateTime(t time.Time) *UserCreate {
	uc.mutation.SetCreateTime(t)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreateTime(*t)
	}
	return uc
}

// SetUpdateTime sets the "update_time" field.
func (uc *UserCreate) SetUpdateTime(t time.Time) *UserCreate {
	uc.mutation.SetUpdateTime(t)
	return uc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdateTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdateTime(*t)
	}
	return uc
}

// SetUserID sets the "user_id" field.
func (uc *UserCreate) SetUserID(s string) *UserCreate {
	uc.mutation.SetUserID(s)
	return uc
}

// SetAdmin sets the "admin" field.
func (uc *UserCreate) SetAdmin(b bool) *UserCreate {
	uc.mutation.SetAdmin(b)
	return uc
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uc *UserCreate) SetNillableAdmin(b *bool) *UserCreate {
	if b != nil {
		uc.SetAdmin(*b)
	}
	return uc
}

// SetBanned sets the "banned" field.
func (uc *UserCreate) SetBanned(b bool) *UserCreate {
	uc.mutation.SetBanned(b)
	return uc
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uc *UserCreate) SetNillableBanned(b *bool) *UserCreate {
	if b != nil {
		uc.SetBanned(*b)
	}
	return uc
}

// SetBanReason sets the "ban_reason" field.
func (uc *UserCreate) SetBanReason(s string) *UserCreate {
	uc.mutation.SetBanReason(s)
	return uc
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uc *UserCreate) SetNillableBanReason(s *string) *UserCreate {
	if s != nil {
		uc.SetBanReason(*s)
	}
	return uc
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetDiscriminator sets the "discriminator" field.
func (uc *UserCreate) SetDiscriminator(s string) *UserCreate {
	uc.mutation.SetDiscriminator(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetAvatarHash sets the "avatar_hash" field.
func (uc *UserCreate) SetAvatarHash(s string) *UserCreate {
	uc.mutation.SetAvatarHash(s)
	return uc
}

// SetNillableAvatarHash sets the "avatar_hash" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatarHash(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatarHash(*s)
	}
	return uc
}

// SetAvatarURL sets the "avatar_url" field.
func (uc *UserCreate) SetAvatarURL(s string) *UserCreate {
	uc.mutation.SetAvatarURL(s)
	return uc
}

// SetLocale sets the "locale" field.
func (uc *UserCreate) SetLocale(s string) *UserCreate {
	uc.mutation.SetLocale(s)
	return uc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uc *UserCreate) SetNillableLocale(s *string) *UserCreate {
	if s != nil {
		uc.SetLocale(*s)
	}
	return uc
}

// SetBot sets the "bot" field.
func (uc *UserCreate) SetBot(b bool) *UserCreate {
	uc.mutation.SetBot(b)
	return uc
}

// SetNillableBot sets the "bot" field if the given value is not nil.
func (uc *UserCreate) SetNillableBot(b *bool) *UserCreate {
	if b != nil {
		uc.SetBot(*b)
	}
	return uc
}

// SetSystem sets the "system" field.
func (uc *UserCreate) SetSystem(b bool) *UserCreate {
	uc.mutation.SetSystem(b)
	return uc
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (uc *UserCreate) SetNillableSystem(b *bool) *UserCreate {
	if b != nil {
		uc.SetSystem(*b)
	}
	return uc
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (uc *UserCreate) SetMfaEnabled(b bool) *UserCreate {
	uc.mutation.SetMfaEnabled(b)
	return uc
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (uc *UserCreate) SetNillableMfaEnabled(b *bool) *UserCreate {
	if b != nil {
		uc.SetMfaEnabled(*b)
	}
	return uc
}

// SetVerified sets the "verified" field.
func (uc *UserCreate) SetVerified(b bool) *UserCreate {
	uc.mutation.SetVerified(b)
	return uc
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetVerified(*b)
	}
	return uc
}

// SetFlags sets the "flags" field.
func (uc *UserCreate) SetFlags(u uint64) *UserCreate {
	uc.mutation.SetFlags(u)
	return uc
}

// SetNillableFlags sets the "flags" field if the given value is not nil.
func (uc *UserCreate) SetNillableFlags(u *uint64) *UserCreate {
	if u != nil {
		uc.SetFlags(*u)
	}
	return uc
}

// SetPremiumType sets the "premium_type" field.
func (uc *UserCreate) SetPremiumType(i int) *UserCreate {
	uc.mutation.SetPremiumType(i)
	return uc
}

// SetNillablePremiumType sets the "premium_type" field if the given value is not nil.
func (uc *UserCreate) SetNillablePremiumType(i *int) *UserCreate {
	if i != nil {
		uc.SetPremiumType(*i)
	}
	return uc
}

// SetPublicFlags sets the "public_flags" field.
func (uc *UserCreate) SetPublicFlags(u uint64) *UserCreate {
	uc.mutation.SetPublicFlags(u)
	return uc
}

// SetNillablePublicFlags sets the "public_flags" field if the given value is not nil.
func (uc *UserCreate) SetNillablePublicFlags(u *uint64) *UserCreate {
	if u != nil {
		uc.SetPublicFlags(*u)
	}
	return uc
}

// AddUserGuildIDs adds the "user_guilds" edge to the Guild entity by IDs.
func (uc *UserCreate) AddUserGuildIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserGuildIDs(ids...)
	return uc
}

// AddUserGuilds adds the "user_guilds" edges to the Guild entity.
func (uc *UserCreate) AddUserGuilds(g ...*Guild) *UserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddUserGuildIDs(ids...)
}

// AddBannedUserIDs adds the "banned_users" edge to the User entity by IDs.
func (uc *UserCreate) AddBannedUserIDs(ids ...int) *UserCreate {
	uc.mutation.AddBannedUserIDs(ids...)
	return uc
}

// AddBannedUsers adds the "banned_users" edges to the User entity.
func (uc *UserCreate) AddBannedUsers(u ...*User) *UserCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddBannedUserIDs(ids...)
}

// SetBannedByID sets the "banned_by" edge to the User entity by ID.
func (uc *UserCreate) SetBannedByID(id int) *UserCreate {
	uc.mutation.SetBannedByID(id)
	return uc
}

// SetNillableBannedByID sets the "banned_by" edge to the User entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableBannedByID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetBannedByID(*id)
	}
	return uc
}

// SetBannedBy sets the "banned_by" edge to the User entity.
func (uc *UserCreate) SetBannedBy(u *User) *UserCreate {
	return uc.SetBannedByID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if err := uc.defaults(); err != nil {
		return nil, err
	}
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		if user.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := user.DefaultCreateTime()
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		if user.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.DefaultUpdateTime()
		uc.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "User.create_time"`)}
	}
	if _, ok := uc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "User.update_time"`)}
	}
	if _, ok := uc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "User.user_id"`)}
	}
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := uc.mutation.Discriminator(); !ok {
		return &ValidationError{Name: "discriminator", err: errors.New(`ent: missing required field "User.discriminator"`)}
	}
	if v, ok := uc.mutation.Discriminator(); ok {
		if err := user.DiscriminatorValidator(v); err != nil {
			return &ValidationError{Name: "discriminator", err: fmt.Errorf(`ent: validator failed for field "User.discriminator": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uc.mutation.AvatarHash(); ok {
		if err := user.AvatarHashValidator(v); err != nil {
			return &ValidationError{Name: "avatar_hash", err: fmt.Errorf(`ent: validator failed for field "User.avatar_hash": %w`, err)}
		}
	}
	if _, ok := uc.mutation.AvatarURL(); !ok {
		return &ValidationError{Name: "avatar_url", err: errors.New(`ent: missing required field "User.avatar_url"`)}
	}
	if v, ok := uc.mutation.AvatarURL(); ok {
		if err := user.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "User.avatar_url": %w`, err)}
		}
	}
	if v, ok := uc.mutation.Locale(); ok {
		if err := user.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "User.locale": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	_spec.OnConflict = uc.conflict
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := uc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := uc.mutation.Admin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldAdmin,
		})
		_node.Admin = value
	}
	if value, ok := uc.mutation.Banned(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldBanned,
		})
		_node.Banned = value
	}
	if value, ok := uc.mutation.BanReason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldBanReason,
		})
		_node.BanReason = value
	}
	if value, ok := uc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := uc.mutation.Discriminator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldDiscriminator,
		})
		_node.Discriminator = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uc.mutation.AvatarHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatarHash,
		})
		_node.AvatarHash = value
	}
	if value, ok := uc.mutation.AvatarURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatarURL,
		})
		_node.AvatarURL = value
	}
	if value, ok := uc.mutation.Locale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLocale,
		})
		_node.Locale = value
	}
	if value, ok := uc.mutation.Bot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldBot,
		})
		_node.Bot = value
	}
	if value, ok := uc.mutation.System(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldSystem,
		})
		_node.System = value
	}
	if value, ok := uc.mutation.MfaEnabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldMfaEnabled,
		})
		_node.MfaEnabled = value
	}
	if value, ok := uc.mutation.Verified(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldVerified,
		})
		_node.Verified = value
	}
	if value, ok := uc.mutation.Flags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: user.FieldFlags,
		})
		_node.Flags = value
	}
	if value, ok := uc.mutation.PremiumType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPremiumType,
		})
		_node.PremiumType = value
	}
	if value, ok := uc.mutation.PublicFlags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: user.FieldPublicFlags,
		})
		_node.PublicFlags = value
	}
	if nodes := uc.mutation.UserGuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserGuildsTable,
			Columns: user.UserGuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: guild.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BannedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BannedUsersTable,
			Columns: []string{user.BannedUsersColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.BannedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BannedByTable,
			Columns: []string{user.BannedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_banned_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsert) SetUpdateTime(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdateTime() *UserUpsert {
	u.SetExcluded(user.FieldUpdateTime)
	return u
}

// SetAdmin sets the "admin" field.
func (u *UserUpsert) SetAdmin(v bool) *UserUpsert {
	u.Set(user.FieldAdmin, v)
	return u
}

// UpdateAdmin sets the "admin" field to the value that was provided on create.
func (u *UserUpsert) UpdateAdmin() *UserUpsert {
	u.SetExcluded(user.FieldAdmin)
	return u
}

// ClearAdmin clears the value of the "admin" field.
func (u *UserUpsert) ClearAdmin() *UserUpsert {
	u.SetNull(user.FieldAdmin)
	return u
}

// SetBanned sets the "banned" field.
func (u *UserUpsert) SetBanned(v bool) *UserUpsert {
	u.Set(user.FieldBanned, v)
	return u
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *UserUpsert) UpdateBanned() *UserUpsert {
	u.SetExcluded(user.FieldBanned)
	return u
}

// ClearBanned clears the value of the "banned" field.
func (u *UserUpsert) ClearBanned() *UserUpsert {
	u.SetNull(user.FieldBanned)
	return u
}

// SetBanReason sets the "ban_reason" field.
func (u *UserUpsert) SetBanReason(v string) *UserUpsert {
	u.Set(user.FieldBanReason, v)
	return u
}

// UpdateBanReason sets the "ban_reason" field to the value that was provided on create.
func (u *UserUpsert) UpdateBanReason() *UserUpsert {
	u.SetExcluded(user.FieldBanReason)
	return u
}

// ClearBanReason clears the value of the "ban_reason" field.
func (u *UserUpsert) ClearBanReason() *UserUpsert {
	u.SetNull(user.FieldBanReason)
	return u
}

// SetUsername sets the "username" field.
func (u *UserUpsert) SetUsername(v string) *UserUpsert {
	u.Set(user.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsert) UpdateUsername() *UserUpsert {
	u.SetExcluded(user.FieldUsername)
	return u
}

// SetDiscriminator sets the "discriminator" field.
func (u *UserUpsert) SetDiscriminator(v string) *UserUpsert {
	u.Set(user.FieldDiscriminator, v)
	return u
}

// UpdateDiscriminator sets the "discriminator" field to the value that was provided on create.
func (u *UserUpsert) UpdateDiscriminator() *UserUpsert {
	u.SetExcluded(user.FieldDiscriminator)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetAvatarHash sets the "avatar_hash" field.
func (u *UserUpsert) SetAvatarHash(v string) *UserUpsert {
	u.Set(user.FieldAvatarHash, v)
	return u
}

// UpdateAvatarHash sets the "avatar_hash" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatarHash() *UserUpsert {
	u.SetExcluded(user.FieldAvatarHash)
	return u
}

// ClearAvatarHash clears the value of the "avatar_hash" field.
func (u *UserUpsert) ClearAvatarHash() *UserUpsert {
	u.SetNull(user.FieldAvatarHash)
	return u
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsert) SetAvatarURL(v string) *UserUpsert {
	u.Set(user.FieldAvatarURL, v)
	return u
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatarURL() *UserUpsert {
	u.SetExcluded(user.FieldAvatarURL)
	return u
}

// SetLocale sets the "locale" field.
func (u *UserUpsert) SetLocale(v string) *UserUpsert {
	u.Set(user.FieldLocale, v)
	return u
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *UserUpsert) UpdateLocale() *UserUpsert {
	u.SetExcluded(user.FieldLocale)
	return u
}

// ClearLocale clears the value of the "locale" field.
func (u *UserUpsert) ClearLocale() *UserUpsert {
	u.SetNull(user.FieldLocale)
	return u
}

// SetBot sets the "bot" field.
func (u *UserUpsert) SetBot(v bool) *UserUpsert {
	u.Set(user.FieldBot, v)
	return u
}

// UpdateBot sets the "bot" field to the value that was provided on create.
func (u *UserUpsert) UpdateBot() *UserUpsert {
	u.SetExcluded(user.FieldBot)
	return u
}

// ClearBot clears the value of the "bot" field.
func (u *UserUpsert) ClearBot() *UserUpsert {
	u.SetNull(user.FieldBot)
	return u
}

// SetSystem sets the "system" field.
func (u *UserUpsert) SetSystem(v bool) *UserUpsert {
	u.Set(user.FieldSystem, v)
	return u
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *UserUpsert) UpdateSystem() *UserUpsert {
	u.SetExcluded(user.FieldSystem)
	return u
}

// ClearSystem clears the value of the "system" field.
func (u *UserUpsert) ClearSystem() *UserUpsert {
	u.SetNull(user.FieldSystem)
	return u
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (u *UserUpsert) SetMfaEnabled(v bool) *UserUpsert {
	u.Set(user.FieldMfaEnabled, v)
	return u
}

// UpdateMfaEnabled sets the "mfa_enabled" field to the value that was provided on create.
func (u *UserUpsert) UpdateMfaEnabled() *UserUpsert {
	u.SetExcluded(user.FieldMfaEnabled)
	return u
}

// ClearMfaEnabled clears the value of the "mfa_enabled" field.
func (u *UserUpsert) ClearMfaEnabled() *UserUpsert {
	u.SetNull(user.FieldMfaEnabled)
	return u
}

// SetVerified sets the "verified" field.
func (u *UserUpsert) SetVerified(v bool) *UserUpsert {
	u.Set(user.FieldVerified, v)
	return u
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *UserUpsert) UpdateVerified() *UserUpsert {
	u.SetExcluded(user.FieldVerified)
	return u
}

// ClearVerified clears the value of the "verified" field.
func (u *UserUpsert) ClearVerified() *UserUpsert {
	u.SetNull(user.FieldVerified)
	return u
}

// SetFlags sets the "flags" field.
func (u *UserUpsert) SetFlags(v uint64) *UserUpsert {
	u.Set(user.FieldFlags, v)
	return u
}

// UpdateFlags sets the "flags" field to the value that was provided on create.
func (u *UserUpsert) UpdateFlags() *UserUpsert {
	u.SetExcluded(user.FieldFlags)
	return u
}

// AddFlags adds v to the "flags" field.
func (u *UserUpsert) AddFlags(v uint64) *UserUpsert {
	u.Add(user.FieldFlags, v)
	return u
}

// ClearFlags clears the value of the "flags" field.
func (u *UserUpsert) ClearFlags() *UserUpsert {
	u.SetNull(user.FieldFlags)
	return u
}

// SetPremiumType sets the "premium_type" field.
func (u *UserUpsert) SetPremiumType(v int) *UserUpsert {
	u.Set(user.FieldPremiumType, v)
	return u
}

// UpdatePremiumType sets the "premium_type" field to the value that was provided on create.
func (u *UserUpsert) UpdatePremiumType() *UserUpsert {
	u.SetExcluded(user.FieldPremiumType)
	return u
}

// AddPremiumType adds v to the "premium_type" field.
func (u *UserUpsert) AddPremiumType(v int) *UserUpsert {
	u.Add(user.FieldPremiumType, v)
	return u
}

// ClearPremiumType clears the value of the "premium_type" field.
func (u *UserUpsert) ClearPremiumType() *UserUpsert {
	u.SetNull(user.FieldPremiumType)
	return u
}

// SetPublicFlags sets the "public_flags" field.
func (u *UserUpsert) SetPublicFlags(v uint64) *UserUpsert {
	u.Set(user.FieldPublicFlags, v)
	return u
}

// UpdatePublicFlags sets the "public_flags" field to the value that was provided on create.
func (u *UserUpsert) UpdatePublicFlags() *UserUpsert {
	u.SetExcluded(user.FieldPublicFlags)
	return u
}

// AddPublicFlags adds v to the "public_flags" field.
func (u *UserUpsert) AddPublicFlags(v uint64) *UserUpsert {
	u.Add(user.FieldPublicFlags, v)
	return u
}

// ClearPublicFlags clears the value of the "public_flags" field.
func (u *UserUpsert) ClearPublicFlags() *UserUpsert {
	u.SetNull(user.FieldPublicFlags)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(user.FieldCreateTime)
		}
		if _, exists := u.create.mutation.UserID(); exists {
			s.SetIgnore(user.FieldUserID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertOne) SetUpdateTime(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdateTime() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAdmin sets the "admin" field.
func (u *UserUpsertOne) SetAdmin(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAdmin(v)
	})
}

// UpdateAdmin sets the "admin" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAdmin()
	})
}

// ClearAdmin clears the value of the "admin" field.
func (u *UserUpsertOne) ClearAdmin() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAdmin()
	})
}

// SetBanned sets the "banned" field.
func (u *UserUpsertOne) SetBanned(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBanned(v)
	})
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBanned() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBanned()
	})
}

// ClearBanned clears the value of the "banned" field.
func (u *UserUpsertOne) ClearBanned() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBanned()
	})
}

// SetBanReason sets the "ban_reason" field.
func (u *UserUpsertOne) SetBanReason(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBanReason(v)
	})
}

// UpdateBanReason sets the "ban_reason" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBanReason() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBanReason()
	})
}

// ClearBanReason clears the value of the "ban_reason" field.
func (u *UserUpsertOne) ClearBanReason() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBanReason()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertOne) SetUsername(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUsername() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetDiscriminator sets the "discriminator" field.
func (u *UserUpsertOne) SetDiscriminator(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetDiscriminator(v)
	})
}

// UpdateDiscriminator sets the "discriminator" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateDiscriminator() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDiscriminator()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetAvatarHash sets the "avatar_hash" field.
func (u *UserUpsertOne) SetAvatarHash(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarHash(v)
	})
}

// UpdateAvatarHash sets the "avatar_hash" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatarHash() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarHash()
	})
}

// ClearAvatarHash clears the value of the "avatar_hash" field.
func (u *UserUpsertOne) ClearAvatarHash() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarHash()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsertOne) SetAvatarURL(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatarURL() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarURL()
	})
}

// SetLocale sets the "locale" field.
func (u *UserUpsertOne) SetLocale(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLocale() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocale()
	})
}

// ClearLocale clears the value of the "locale" field.
func (u *UserUpsertOne) ClearLocale() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLocale()
	})
}

// SetBot sets the "bot" field.
func (u *UserUpsertOne) SetBot(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetBot(v)
	})
}

// UpdateBot sets the "bot" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateBot() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBot()
	})
}

// ClearBot clears the value of the "bot" field.
func (u *UserUpsertOne) ClearBot() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearBot()
	})
}

// SetSystem sets the "system" field.
func (u *UserUpsertOne) SetSystem(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateSystem() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSystem()
	})
}

// ClearSystem clears the value of the "system" field.
func (u *UserUpsertOne) ClearSystem() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearSystem()
	})
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (u *UserUpsertOne) SetMfaEnabled(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetMfaEnabled(v)
	})
}

// UpdateMfaEnabled sets the "mfa_enabled" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateMfaEnabled() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMfaEnabled()
	})
}

// ClearMfaEnabled clears the value of the "mfa_enabled" field.
func (u *UserUpsertOne) ClearMfaEnabled() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearMfaEnabled()
	})
}

// SetVerified sets the "verified" field.
func (u *UserUpsertOne) SetVerified(v bool) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetVerified(v)
	})
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateVerified()
	})
}

// ClearVerified clears the value of the "verified" field.
func (u *UserUpsertOne) ClearVerified() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearVerified()
	})
}

// SetFlags sets the "flags" field.
func (u *UserUpsertOne) SetFlags(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetFlags(v)
	})
}

// AddFlags adds v to the "flags" field.
func (u *UserUpsertOne) AddFlags(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddFlags(v)
	})
}

// UpdateFlags sets the "flags" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateFlags() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFlags()
	})
}

// ClearFlags clears the value of the "flags" field.
func (u *UserUpsertOne) ClearFlags() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearFlags()
	})
}

// SetPremiumType sets the "premium_type" field.
func (u *UserUpsertOne) SetPremiumType(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPremiumType(v)
	})
}

// AddPremiumType adds v to the "premium_type" field.
func (u *UserUpsertOne) AddPremiumType(v int) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddPremiumType(v)
	})
}

// UpdatePremiumType sets the "premium_type" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePremiumType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePremiumType()
	})
}

// ClearPremiumType clears the value of the "premium_type" field.
func (u *UserUpsertOne) ClearPremiumType() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPremiumType()
	})
}

// SetPublicFlags sets the "public_flags" field.
func (u *UserUpsertOne) SetPublicFlags(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicFlags(v)
	})
}

// AddPublicFlags adds v to the "public_flags" field.
func (u *UserUpsertOne) AddPublicFlags(v uint64) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.AddPublicFlags(v)
	})
}

// UpdatePublicFlags sets the "public_flags" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePublicFlags() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicFlags()
	})
}

// ClearPublicFlags clears the value of the "public_flags" field.
func (u *UserUpsertOne) ClearPublicFlags() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPublicFlags()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(user.FieldCreateTime)
			}
			if _, exists := b.mutation.UserID(); exists {
				s.SetIgnore(user.FieldUserID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *UserUpsertBulk) SetUpdateTime(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdateTime() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetAdmin sets the "admin" field.
func (u *UserUpsertBulk) SetAdmin(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAdmin(v)
	})
}

// UpdateAdmin sets the "admin" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAdmin()
	})
}

// ClearAdmin clears the value of the "admin" field.
func (u *UserUpsertBulk) ClearAdmin() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAdmin()
	})
}

// SetBanned sets the "banned" field.
func (u *UserUpsertBulk) SetBanned(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBanned(v)
	})
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBanned() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBanned()
	})
}

// ClearBanned clears the value of the "banned" field.
func (u *UserUpsertBulk) ClearBanned() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBanned()
	})
}

// SetBanReason sets the "ban_reason" field.
func (u *UserUpsertBulk) SetBanReason(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBanReason(v)
	})
}

// UpdateBanReason sets the "ban_reason" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBanReason() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBanReason()
	})
}

// ClearBanReason clears the value of the "ban_reason" field.
func (u *UserUpsertBulk) ClearBanReason() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBanReason()
	})
}

// SetUsername sets the "username" field.
func (u *UserUpsertBulk) SetUsername(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUsername() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUsername()
	})
}

// SetDiscriminator sets the "discriminator" field.
func (u *UserUpsertBulk) SetDiscriminator(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetDiscriminator(v)
	})
}

// UpdateDiscriminator sets the "discriminator" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateDiscriminator() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateDiscriminator()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetAvatarHash sets the "avatar_hash" field.
func (u *UserUpsertBulk) SetAvatarHash(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarHash(v)
	})
}

// UpdateAvatarHash sets the "avatar_hash" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatarHash() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarHash()
	})
}

// ClearAvatarHash clears the value of the "avatar_hash" field.
func (u *UserUpsertBulk) ClearAvatarHash() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearAvatarHash()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *UserUpsertBulk) SetAvatarURL(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatarURL() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatarURL()
	})
}

// SetLocale sets the "locale" field.
func (u *UserUpsertBulk) SetLocale(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLocale() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLocale()
	})
}

// ClearLocale clears the value of the "locale" field.
func (u *UserUpsertBulk) ClearLocale() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLocale()
	})
}

// SetBot sets the "bot" field.
func (u *UserUpsertBulk) SetBot(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetBot(v)
	})
}

// UpdateBot sets the "bot" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateBot() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateBot()
	})
}

// ClearBot clears the value of the "bot" field.
func (u *UserUpsertBulk) ClearBot() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearBot()
	})
}

// SetSystem sets the "system" field.
func (u *UserUpsertBulk) SetSystem(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetSystem(v)
	})
}

// UpdateSystem sets the "system" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateSystem() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateSystem()
	})
}

// ClearSystem clears the value of the "system" field.
func (u *UserUpsertBulk) ClearSystem() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearSystem()
	})
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (u *UserUpsertBulk) SetMfaEnabled(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetMfaEnabled(v)
	})
}

// UpdateMfaEnabled sets the "mfa_enabled" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateMfaEnabled() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateMfaEnabled()
	})
}

// ClearMfaEnabled clears the value of the "mfa_enabled" field.
func (u *UserUpsertBulk) ClearMfaEnabled() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearMfaEnabled()
	})
}

// SetVerified sets the "verified" field.
func (u *UserUpsertBulk) SetVerified(v bool) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetVerified(v)
	})
}

// UpdateVerified sets the "verified" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateVerified()
	})
}

// ClearVerified clears the value of the "verified" field.
func (u *UserUpsertBulk) ClearVerified() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearVerified()
	})
}

// SetFlags sets the "flags" field.
func (u *UserUpsertBulk) SetFlags(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetFlags(v)
	})
}

// AddFlags adds v to the "flags" field.
func (u *UserUpsertBulk) AddFlags(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddFlags(v)
	})
}

// UpdateFlags sets the "flags" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateFlags() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateFlags()
	})
}

// ClearFlags clears the value of the "flags" field.
func (u *UserUpsertBulk) ClearFlags() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearFlags()
	})
}

// SetPremiumType sets the "premium_type" field.
func (u *UserUpsertBulk) SetPremiumType(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPremiumType(v)
	})
}

// AddPremiumType adds v to the "premium_type" field.
func (u *UserUpsertBulk) AddPremiumType(v int) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddPremiumType(v)
	})
}

// UpdatePremiumType sets the "premium_type" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePremiumType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePremiumType()
	})
}

// ClearPremiumType clears the value of the "premium_type" field.
func (u *UserUpsertBulk) ClearPremiumType() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPremiumType()
	})
}

// SetPublicFlags sets the "public_flags" field.
func (u *UserUpsertBulk) SetPublicFlags(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPublicFlags(v)
	})
}

// AddPublicFlags adds v to the "public_flags" field.
func (u *UserUpsertBulk) AddPublicFlags(v uint64) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.AddPublicFlags(v)
	})
}

// UpdatePublicFlags sets the "public_flags" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePublicFlags() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePublicFlags()
	})
}

// ClearPublicFlags clears the value of the "public_flags" field.
func (u *UserUpsertBulk) ClearPublicFlags() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPublicFlags()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
