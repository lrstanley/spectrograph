// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package guild

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// GuildID applies equality check predicate on the "guild_id" field. It's identical to GuildIDEQ.
func GuildID(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGuildID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// IconHash applies equality check predicate on the "icon_hash" field. It's identical to IconHashEQ.
func IconHash(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIconHash), v))
	})
}

// IconURL applies equality check predicate on the "icon_url" field. It's identical to IconURLEQ.
func IconURL(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIconURL), v))
	})
}

// JoinedAt applies equality check predicate on the "joined_at" field. It's identical to JoinedAtEQ.
func JoinedAt(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedAt), v))
	})
}

// Large applies equality check predicate on the "large" field. It's identical to LargeEQ.
func Large(v bool) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLarge), v))
	})
}

// MemberCount applies equality check predicate on the "member_count" field. It's identical to MemberCountEQ.
func MemberCount(v int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberCount), v))
	})
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// Permissions applies equality check predicate on the "permissions" field. It's identical to PermissionsEQ.
func Permissions(v uint64) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissions), v))
	})
}

// SystemChannelFlags applies equality check predicate on the "system_channel_flags" field. It's identical to SystemChannelFlagsEQ.
func SystemChannelFlags(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemChannelFlags), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// GuildIDEQ applies the EQ predicate on the "guild_id" field.
func GuildIDEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGuildID), v))
	})
}

// GuildIDNEQ applies the NEQ predicate on the "guild_id" field.
func GuildIDNEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGuildID), v))
	})
}

// GuildIDIn applies the In predicate on the "guild_id" field.
func GuildIDIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGuildID), v...))
	})
}

// GuildIDNotIn applies the NotIn predicate on the "guild_id" field.
func GuildIDNotIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGuildID), v...))
	})
}

// GuildIDGT applies the GT predicate on the "guild_id" field.
func GuildIDGT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGuildID), v))
	})
}

// GuildIDGTE applies the GTE predicate on the "guild_id" field.
func GuildIDGTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGuildID), v))
	})
}

// GuildIDLT applies the LT predicate on the "guild_id" field.
func GuildIDLT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGuildID), v))
	})
}

// GuildIDLTE applies the LTE predicate on the "guild_id" field.
func GuildIDLTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGuildID), v))
	})
}

// GuildIDContains applies the Contains predicate on the "guild_id" field.
func GuildIDContains(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGuildID), v))
	})
}

// GuildIDHasPrefix applies the HasPrefix predicate on the "guild_id" field.
func GuildIDHasPrefix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGuildID), v))
	})
}

// GuildIDHasSuffix applies the HasSuffix predicate on the "guild_id" field.
func GuildIDHasSuffix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGuildID), v))
	})
}

// GuildIDEqualFold applies the EqualFold predicate on the "guild_id" field.
func GuildIDEqualFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGuildID), v))
	})
}

// GuildIDContainsFold applies the ContainsFold predicate on the "guild_id" field.
func GuildIDContainsFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGuildID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// FeaturesIsNil applies the IsNil predicate on the "features" field.
func FeaturesIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeatures)))
	})
}

// FeaturesNotNil applies the NotNil predicate on the "features" field.
func FeaturesNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeatures)))
	})
}

// IconHashEQ applies the EQ predicate on the "icon_hash" field.
func IconHashEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIconHash), v))
	})
}

// IconHashNEQ applies the NEQ predicate on the "icon_hash" field.
func IconHashNEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIconHash), v))
	})
}

// IconHashIn applies the In predicate on the "icon_hash" field.
func IconHashIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIconHash), v...))
	})
}

// IconHashNotIn applies the NotIn predicate on the "icon_hash" field.
func IconHashNotIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIconHash), v...))
	})
}

// IconHashGT applies the GT predicate on the "icon_hash" field.
func IconHashGT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIconHash), v))
	})
}

// IconHashGTE applies the GTE predicate on the "icon_hash" field.
func IconHashGTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIconHash), v))
	})
}

// IconHashLT applies the LT predicate on the "icon_hash" field.
func IconHashLT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIconHash), v))
	})
}

// IconHashLTE applies the LTE predicate on the "icon_hash" field.
func IconHashLTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIconHash), v))
	})
}

// IconHashContains applies the Contains predicate on the "icon_hash" field.
func IconHashContains(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIconHash), v))
	})
}

// IconHashHasPrefix applies the HasPrefix predicate on the "icon_hash" field.
func IconHashHasPrefix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIconHash), v))
	})
}

// IconHashHasSuffix applies the HasSuffix predicate on the "icon_hash" field.
func IconHashHasSuffix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIconHash), v))
	})
}

// IconHashIsNil applies the IsNil predicate on the "icon_hash" field.
func IconHashIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIconHash)))
	})
}

// IconHashNotNil applies the NotNil predicate on the "icon_hash" field.
func IconHashNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIconHash)))
	})
}

// IconHashEqualFold applies the EqualFold predicate on the "icon_hash" field.
func IconHashEqualFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIconHash), v))
	})
}

// IconHashContainsFold applies the ContainsFold predicate on the "icon_hash" field.
func IconHashContainsFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIconHash), v))
	})
}

// IconURLEQ applies the EQ predicate on the "icon_url" field.
func IconURLEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIconURL), v))
	})
}

// IconURLNEQ applies the NEQ predicate on the "icon_url" field.
func IconURLNEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIconURL), v))
	})
}

// IconURLIn applies the In predicate on the "icon_url" field.
func IconURLIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIconURL), v...))
	})
}

// IconURLNotIn applies the NotIn predicate on the "icon_url" field.
func IconURLNotIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIconURL), v...))
	})
}

// IconURLGT applies the GT predicate on the "icon_url" field.
func IconURLGT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIconURL), v))
	})
}

// IconURLGTE applies the GTE predicate on the "icon_url" field.
func IconURLGTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIconURL), v))
	})
}

// IconURLLT applies the LT predicate on the "icon_url" field.
func IconURLLT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIconURL), v))
	})
}

// IconURLLTE applies the LTE predicate on the "icon_url" field.
func IconURLLTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIconURL), v))
	})
}

// IconURLContains applies the Contains predicate on the "icon_url" field.
func IconURLContains(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIconURL), v))
	})
}

// IconURLHasPrefix applies the HasPrefix predicate on the "icon_url" field.
func IconURLHasPrefix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIconURL), v))
	})
}

// IconURLHasSuffix applies the HasSuffix predicate on the "icon_url" field.
func IconURLHasSuffix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIconURL), v))
	})
}

// IconURLEqualFold applies the EqualFold predicate on the "icon_url" field.
func IconURLEqualFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIconURL), v))
	})
}

// IconURLContainsFold applies the ContainsFold predicate on the "icon_url" field.
func IconURLContainsFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIconURL), v))
	})
}

// JoinedAtEQ applies the EQ predicate on the "joined_at" field.
func JoinedAtEQ(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtNEQ applies the NEQ predicate on the "joined_at" field.
func JoinedAtNEQ(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtIn applies the In predicate on the "joined_at" field.
func JoinedAtIn(vs ...time.Time) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJoinedAt), v...))
	})
}

// JoinedAtNotIn applies the NotIn predicate on the "joined_at" field.
func JoinedAtNotIn(vs ...time.Time) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJoinedAt), v...))
	})
}

// JoinedAtGT applies the GT predicate on the "joined_at" field.
func JoinedAtGT(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtGTE applies the GTE predicate on the "joined_at" field.
func JoinedAtGTE(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtLT applies the LT predicate on the "joined_at" field.
func JoinedAtLT(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtLTE applies the LTE predicate on the "joined_at" field.
func JoinedAtLTE(v time.Time) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJoinedAt), v))
	})
}

// JoinedAtIsNil applies the IsNil predicate on the "joined_at" field.
func JoinedAtIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJoinedAt)))
	})
}

// JoinedAtNotNil applies the NotNil predicate on the "joined_at" field.
func JoinedAtNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJoinedAt)))
	})
}

// LargeEQ applies the EQ predicate on the "large" field.
func LargeEQ(v bool) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLarge), v))
	})
}

// LargeNEQ applies the NEQ predicate on the "large" field.
func LargeNEQ(v bool) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLarge), v))
	})
}

// LargeIsNil applies the IsNil predicate on the "large" field.
func LargeIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLarge)))
	})
}

// LargeNotNil applies the NotNil predicate on the "large" field.
func LargeNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLarge)))
	})
}

// MemberCountEQ applies the EQ predicate on the "member_count" field.
func MemberCountEQ(v int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemberCount), v))
	})
}

// MemberCountNEQ applies the NEQ predicate on the "member_count" field.
func MemberCountNEQ(v int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemberCount), v))
	})
}

// MemberCountIn applies the In predicate on the "member_count" field.
func MemberCountIn(vs ...int) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMemberCount), v...))
	})
}

// MemberCountNotIn applies the NotIn predicate on the "member_count" field.
func MemberCountNotIn(vs ...int) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMemberCount), v...))
	})
}

// MemberCountGT applies the GT predicate on the "member_count" field.
func MemberCountGT(v int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemberCount), v))
	})
}

// MemberCountGTE applies the GTE predicate on the "member_count" field.
func MemberCountGTE(v int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemberCount), v))
	})
}

// MemberCountLT applies the LT predicate on the "member_count" field.
func MemberCountLT(v int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemberCount), v))
	})
}

// MemberCountLTE applies the LTE predicate on the "member_count" field.
func MemberCountLTE(v int) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemberCount), v))
	})
}

// MemberCountIsNil applies the IsNil predicate on the "member_count" field.
func MemberCountIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMemberCount)))
	})
}

// MemberCountNotNil applies the NotNil predicate on the "member_count" field.
func MemberCountNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMemberCount)))
	})
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerID), v))
	})
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerID), v))
	})
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOwnerID)))
	})
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOwnerID)))
	})
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerID), v))
	})
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerID), v))
	})
}

// PermissionsEQ applies the EQ predicate on the "permissions" field.
func PermissionsEQ(v uint64) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPermissions), v))
	})
}

// PermissionsNEQ applies the NEQ predicate on the "permissions" field.
func PermissionsNEQ(v uint64) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPermissions), v))
	})
}

// PermissionsIn applies the In predicate on the "permissions" field.
func PermissionsIn(vs ...uint64) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPermissions), v...))
	})
}

// PermissionsNotIn applies the NotIn predicate on the "permissions" field.
func PermissionsNotIn(vs ...uint64) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPermissions), v...))
	})
}

// PermissionsGT applies the GT predicate on the "permissions" field.
func PermissionsGT(v uint64) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPermissions), v))
	})
}

// PermissionsGTE applies the GTE predicate on the "permissions" field.
func PermissionsGTE(v uint64) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPermissions), v))
	})
}

// PermissionsLT applies the LT predicate on the "permissions" field.
func PermissionsLT(v uint64) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPermissions), v))
	})
}

// PermissionsLTE applies the LTE predicate on the "permissions" field.
func PermissionsLTE(v uint64) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPermissions), v))
	})
}

// PermissionsIsNil applies the IsNil predicate on the "permissions" field.
func PermissionsIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPermissions)))
	})
}

// PermissionsNotNil applies the NotNil predicate on the "permissions" field.
func PermissionsNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPermissions)))
	})
}

// SystemChannelFlagsEQ applies the EQ predicate on the "system_channel_flags" field.
func SystemChannelFlagsEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsNEQ applies the NEQ predicate on the "system_channel_flags" field.
func SystemChannelFlagsNEQ(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsIn applies the In predicate on the "system_channel_flags" field.
func SystemChannelFlagsIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSystemChannelFlags), v...))
	})
}

// SystemChannelFlagsNotIn applies the NotIn predicate on the "system_channel_flags" field.
func SystemChannelFlagsNotIn(vs ...string) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSystemChannelFlags), v...))
	})
}

// SystemChannelFlagsGT applies the GT predicate on the "system_channel_flags" field.
func SystemChannelFlagsGT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsGTE applies the GTE predicate on the "system_channel_flags" field.
func SystemChannelFlagsGTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsLT applies the LT predicate on the "system_channel_flags" field.
func SystemChannelFlagsLT(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsLTE applies the LTE predicate on the "system_channel_flags" field.
func SystemChannelFlagsLTE(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsContains applies the Contains predicate on the "system_channel_flags" field.
func SystemChannelFlagsContains(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsHasPrefix applies the HasPrefix predicate on the "system_channel_flags" field.
func SystemChannelFlagsHasPrefix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsHasSuffix applies the HasSuffix predicate on the "system_channel_flags" field.
func SystemChannelFlagsHasSuffix(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsIsNil applies the IsNil predicate on the "system_channel_flags" field.
func SystemChannelFlagsIsNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSystemChannelFlags)))
	})
}

// SystemChannelFlagsNotNil applies the NotNil predicate on the "system_channel_flags" field.
func SystemChannelFlagsNotNil() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSystemChannelFlags)))
	})
}

// SystemChannelFlagsEqualFold applies the EqualFold predicate on the "system_channel_flags" field.
func SystemChannelFlagsEqualFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSystemChannelFlags), v))
	})
}

// SystemChannelFlagsContainsFold applies the ContainsFold predicate on the "system_channel_flags" field.
func SystemChannelFlagsContainsFold(v string) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSystemChannelFlags), v))
	})
}

// HasGuildConfig applies the HasEdge predicate on the "guild_config" edge.
func HasGuildConfig() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildConfigTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GuildConfigTable, GuildConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildConfigWith applies the HasEdge predicate on the "guild_config" edge with a given conditions (other predicates).
func HasGuildConfigWith(preds ...predicate.GuildConfig) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildConfigInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GuildConfigTable, GuildConfigColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGuildAdminConfig applies the HasEdge predicate on the "guild_admin_config" edge.
func HasGuildAdminConfig() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildAdminConfigTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GuildAdminConfigTable, GuildAdminConfigColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildAdminConfigWith applies the HasEdge predicate on the "guild_admin_config" edge with a given conditions (other predicates).
func HasGuildAdminConfigWith(preds ...predicate.GuildAdminConfig) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildAdminConfigInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, GuildAdminConfigTable, GuildAdminConfigColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGuildEvents applies the HasEdge predicate on the "guild_events" edge.
func HasGuildEvents() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildEventsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GuildEventsTable, GuildEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildEventsWith applies the HasEdge predicate on the "guild_events" edge with a given conditions (other predicates).
func HasGuildEventsWith(preds ...predicate.GuildEvent) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GuildEventsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GuildEventsTable, GuildEventsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmins applies the HasEdge predicate on the "admins" edge.
func HasAdmins() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AdminsTable, AdminsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminsWith applies the HasEdge predicate on the "admins" edge with a given conditions (other predicates).
func HasAdminsWith(preds ...predicate.User) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, AdminsTable, AdminsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Guild) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Guild) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Guild) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		p(s.Not())
	})
}
