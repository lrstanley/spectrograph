// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package guild

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the guild type in the database.
	Label = "guild"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldGuildID holds the string denoting the guild_id field in the database.
	FieldGuildID = "guild_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldFeatures holds the string denoting the features field in the database.
	FieldFeatures = "features"
	// FieldIconHash holds the string denoting the icon_hash field in the database.
	FieldIconHash = "icon_hash"
	// FieldIconURL holds the string denoting the icon_url field in the database.
	FieldIconURL = "icon_url"
	// FieldJoinedAt holds the string denoting the joined_at field in the database.
	FieldJoinedAt = "joined_at"
	// FieldLarge holds the string denoting the large field in the database.
	FieldLarge = "large"
	// FieldMemberCount holds the string denoting the member_count field in the database.
	FieldMemberCount = "member_count"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldPermissions holds the string denoting the permissions field in the database.
	FieldPermissions = "permissions"
	// FieldSystemChannelFlags holds the string denoting the system_channel_flags field in the database.
	FieldSystemChannelFlags = "system_channel_flags"
	// EdgeGuildConfig holds the string denoting the guild_config edge name in mutations.
	EdgeGuildConfig = "guild_config"
	// EdgeGuildAdminConfig holds the string denoting the guild_admin_config edge name in mutations.
	EdgeGuildAdminConfig = "guild_admin_config"
	// EdgeGuildEvents holds the string denoting the guild_events edge name in mutations.
	EdgeGuildEvents = "guild_events"
	// EdgeAdmins holds the string denoting the admins edge name in mutations.
	EdgeAdmins = "admins"
	// Table holds the table name of the guild in the database.
	Table = "guilds"
	// GuildConfigTable is the table that holds the guild_config relation/edge.
	GuildConfigTable = "guild_configs"
	// GuildConfigInverseTable is the table name for the GuildConfig entity.
	// It exists in this package in order to avoid circular dependency with the "guildconfig" package.
	GuildConfigInverseTable = "guild_configs"
	// GuildConfigColumn is the table column denoting the guild_config relation/edge.
	GuildConfigColumn = "guild_guild_config"
	// GuildAdminConfigTable is the table that holds the guild_admin_config relation/edge.
	GuildAdminConfigTable = "guild_admin_configs"
	// GuildAdminConfigInverseTable is the table name for the GuildAdminConfig entity.
	// It exists in this package in order to avoid circular dependency with the "guildadminconfig" package.
	GuildAdminConfigInverseTable = "guild_admin_configs"
	// GuildAdminConfigColumn is the table column denoting the guild_admin_config relation/edge.
	GuildAdminConfigColumn = "guild_guild_admin_config"
	// GuildEventsTable is the table that holds the guild_events relation/edge.
	GuildEventsTable = "guild_events"
	// GuildEventsInverseTable is the table name for the GuildEvent entity.
	// It exists in this package in order to avoid circular dependency with the "guildevent" package.
	GuildEventsInverseTable = "guild_events"
	// GuildEventsColumn is the table column denoting the guild_events relation/edge.
	GuildEventsColumn = "guild_guild_events"
	// AdminsTable is the table that holds the admins relation/edge. The primary key declared below.
	AdminsTable = "user_user_guilds"
	// AdminsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AdminsInverseTable = "users"
)

// Columns holds all SQL columns for guild fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldGuildID,
	FieldName,
	FieldFeatures,
	FieldIconHash,
	FieldIconURL,
	FieldJoinedAt,
	FieldLarge,
	FieldMemberCount,
	FieldOwnerID,
	FieldPermissions,
	FieldSystemChannelFlags,
}

var (
	// AdminsPrimaryKey and AdminsColumn2 are the table columns denoting the
	// primary key for the admins relation (M2M).
	AdminsPrimaryKey = []string{"user_id", "guild_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/lrstanley/spectrograph/internal/ent/runtime"
var (
	Hooks  [1]ent.Hook
	Policy ent.Policy
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultFeatures holds the default value on creation for the "features" field.
	DefaultFeatures []string
	// IconHashValidator is a validator for the "icon_hash" field. It is called by the builders before save.
	IconHashValidator func(string) error
	// IconURLValidator is a validator for the "icon_url" field. It is called by the builders before save.
	IconURLValidator func(string) error
	// DefaultLarge holds the default value on creation for the "large" field.
	DefaultLarge bool
	// DefaultMemberCount holds the default value on creation for the "member_count" field.
	DefaultMemberCount int
	// DefaultPermissions holds the default value on creation for the "permissions" field.
	DefaultPermissions uint64
	// SystemChannelFlagsValidator is a validator for the "system_channel_flags" field. It is called by the builders before save.
	SystemChannelFlagsValidator func(string) error
)
