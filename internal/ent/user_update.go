// Copyright (c) Liam Stanley <me@liamstanley.io>. All rights reserved. Use
// of this source code is governed by the MIT license that can be found in
// the LICENSE file.
//
// DO NOT EDIT, CODE GENERATED BY entc.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/spectrograph/internal/ent/guild"
	"github.com/lrstanley/spectrograph/internal/ent/predicate"
	"github.com/lrstanley/spectrograph/internal/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdateTime sets the "update_time" field.
func (uu *UserUpdate) SetUpdateTime(t time.Time) *UserUpdate {
	uu.mutation.SetUpdateTime(t)
	return uu
}

// SetAdmin sets the "admin" field.
func (uu *UserUpdate) SetAdmin(b bool) *UserUpdate {
	uu.mutation.SetAdmin(b)
	return uu
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAdmin(*b)
	}
	return uu
}

// ClearAdmin clears the value of the "admin" field.
func (uu *UserUpdate) ClearAdmin() *UserUpdate {
	uu.mutation.ClearAdmin()
	return uu
}

// SetBanned sets the "banned" field.
func (uu *UserUpdate) SetBanned(b bool) *UserUpdate {
	uu.mutation.SetBanned(b)
	return uu
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanned(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBanned(*b)
	}
	return uu
}

// ClearBanned clears the value of the "banned" field.
func (uu *UserUpdate) ClearBanned() *UserUpdate {
	uu.mutation.ClearBanned()
	return uu
}

// SetBanReason sets the "ban_reason" field.
func (uu *UserUpdate) SetBanReason(s string) *UserUpdate {
	uu.mutation.SetBanReason(s)
	return uu
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBanReason(s *string) *UserUpdate {
	if s != nil {
		uu.SetBanReason(*s)
	}
	return uu
}

// ClearBanReason clears the value of the "ban_reason" field.
func (uu *UserUpdate) ClearBanReason() *UserUpdate {
	uu.mutation.ClearBanReason()
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetDiscriminator sets the "discriminator" field.
func (uu *UserUpdate) SetDiscriminator(s string) *UserUpdate {
	uu.mutation.SetDiscriminator(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetAvatarHash sets the "avatar_hash" field.
func (uu *UserUpdate) SetAvatarHash(s string) *UserUpdate {
	uu.mutation.SetAvatarHash(s)
	return uu
}

// SetNillableAvatarHash sets the "avatar_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarHash(*s)
	}
	return uu
}

// ClearAvatarHash clears the value of the "avatar_hash" field.
func (uu *UserUpdate) ClearAvatarHash() *UserUpdate {
	uu.mutation.ClearAvatarHash()
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetLocale sets the "locale" field.
func (uu *UserUpdate) SetLocale(s string) *UserUpdate {
	uu.mutation.SetLocale(s)
	return uu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocale(s *string) *UserUpdate {
	if s != nil {
		uu.SetLocale(*s)
	}
	return uu
}

// ClearLocale clears the value of the "locale" field.
func (uu *UserUpdate) ClearLocale() *UserUpdate {
	uu.mutation.ClearLocale()
	return uu
}

// SetBot sets the "bot" field.
func (uu *UserUpdate) SetBot(b bool) *UserUpdate {
	uu.mutation.SetBot(b)
	return uu
}

// SetNillableBot sets the "bot" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBot(b *bool) *UserUpdate {
	if b != nil {
		uu.SetBot(*b)
	}
	return uu
}

// ClearBot clears the value of the "bot" field.
func (uu *UserUpdate) ClearBot() *UserUpdate {
	uu.mutation.ClearBot()
	return uu
}

// SetSystem sets the "system" field.
func (uu *UserUpdate) SetSystem(b bool) *UserUpdate {
	uu.mutation.SetSystem(b)
	return uu
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSystem(b *bool) *UserUpdate {
	if b != nil {
		uu.SetSystem(*b)
	}
	return uu
}

// ClearSystem clears the value of the "system" field.
func (uu *UserUpdate) ClearSystem() *UserUpdate {
	uu.mutation.ClearSystem()
	return uu
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (uu *UserUpdate) SetMfaEnabled(b bool) *UserUpdate {
	uu.mutation.SetMfaEnabled(b)
	return uu
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableMfaEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetMfaEnabled(*b)
	}
	return uu
}

// ClearMfaEnabled clears the value of the "mfa_enabled" field.
func (uu *UserUpdate) ClearMfaEnabled() *UserUpdate {
	uu.mutation.ClearMfaEnabled()
	return uu
}

// SetVerified sets the "verified" field.
func (uu *UserUpdate) SetVerified(b bool) *UserUpdate {
	uu.mutation.SetVerified(b)
	return uu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetVerified(*b)
	}
	return uu
}

// ClearVerified clears the value of the "verified" field.
func (uu *UserUpdate) ClearVerified() *UserUpdate {
	uu.mutation.ClearVerified()
	return uu
}

// SetFlags sets the "flags" field.
func (uu *UserUpdate) SetFlags(u uint64) *UserUpdate {
	uu.mutation.ResetFlags()
	uu.mutation.SetFlags(u)
	return uu
}

// SetNillableFlags sets the "flags" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFlags(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetFlags(*u)
	}
	return uu
}

// AddFlags adds u to the "flags" field.
func (uu *UserUpdate) AddFlags(u int64) *UserUpdate {
	uu.mutation.AddFlags(u)
	return uu
}

// ClearFlags clears the value of the "flags" field.
func (uu *UserUpdate) ClearFlags() *UserUpdate {
	uu.mutation.ClearFlags()
	return uu
}

// SetPremiumType sets the "premium_type" field.
func (uu *UserUpdate) SetPremiumType(i int) *UserUpdate {
	uu.mutation.ResetPremiumType()
	uu.mutation.SetPremiumType(i)
	return uu
}

// SetNillablePremiumType sets the "premium_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePremiumType(i *int) *UserUpdate {
	if i != nil {
		uu.SetPremiumType(*i)
	}
	return uu
}

// AddPremiumType adds i to the "premium_type" field.
func (uu *UserUpdate) AddPremiumType(i int) *UserUpdate {
	uu.mutation.AddPremiumType(i)
	return uu
}

// ClearPremiumType clears the value of the "premium_type" field.
func (uu *UserUpdate) ClearPremiumType() *UserUpdate {
	uu.mutation.ClearPremiumType()
	return uu
}

// SetPublicFlags sets the "public_flags" field.
func (uu *UserUpdate) SetPublicFlags(u uint64) *UserUpdate {
	uu.mutation.ResetPublicFlags()
	uu.mutation.SetPublicFlags(u)
	return uu
}

// SetNillablePublicFlags sets the "public_flags" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePublicFlags(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetPublicFlags(*u)
	}
	return uu
}

// AddPublicFlags adds u to the "public_flags" field.
func (uu *UserUpdate) AddPublicFlags(u int64) *UserUpdate {
	uu.mutation.AddPublicFlags(u)
	return uu
}

// ClearPublicFlags clears the value of the "public_flags" field.
func (uu *UserUpdate) ClearPublicFlags() *UserUpdate {
	uu.mutation.ClearPublicFlags()
	return uu
}

// AddUserGuildIDs adds the "user_guilds" edge to the Guild entity by IDs.
func (uu *UserUpdate) AddUserGuildIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserGuildIDs(ids...)
	return uu
}

// AddUserGuilds adds the "user_guilds" edges to the Guild entity.
func (uu *UserUpdate) AddUserGuilds(g ...*Guild) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddUserGuildIDs(ids...)
}

// AddBannedUserIDs adds the "banned_users" edge to the User entity by IDs.
func (uu *UserUpdate) AddBannedUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddBannedUserIDs(ids...)
	return uu
}

// AddBannedUsers adds the "banned_users" edges to the User entity.
func (uu *UserUpdate) AddBannedUsers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddBannedUserIDs(ids...)
}

// SetBannedByID sets the "banned_by" edge to the User entity by ID.
func (uu *UserUpdate) SetBannedByID(id int) *UserUpdate {
	uu.mutation.SetBannedByID(id)
	return uu
}

// SetNillableBannedByID sets the "banned_by" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableBannedByID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetBannedByID(*id)
	}
	return uu
}

// SetBannedBy sets the "banned_by" edge to the User entity.
func (uu *UserUpdate) SetBannedBy(u *User) *UserUpdate {
	return uu.SetBannedByID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUserGuilds clears all "user_guilds" edges to the Guild entity.
func (uu *UserUpdate) ClearUserGuilds() *UserUpdate {
	uu.mutation.ClearUserGuilds()
	return uu
}

// RemoveUserGuildIDs removes the "user_guilds" edge to Guild entities by IDs.
func (uu *UserUpdate) RemoveUserGuildIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserGuildIDs(ids...)
	return uu
}

// RemoveUserGuilds removes "user_guilds" edges to Guild entities.
func (uu *UserUpdate) RemoveUserGuilds(g ...*Guild) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveUserGuildIDs(ids...)
}

// ClearBannedUsers clears all "banned_users" edges to the User entity.
func (uu *UserUpdate) ClearBannedUsers() *UserUpdate {
	uu.mutation.ClearBannedUsers()
	return uu
}

// RemoveBannedUserIDs removes the "banned_users" edge to User entities by IDs.
func (uu *UserUpdate) RemoveBannedUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveBannedUserIDs(ids...)
	return uu
}

// RemoveBannedUsers removes "banned_users" edges to User entities.
func (uu *UserUpdate) RemoveBannedUsers(u ...*User) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveBannedUserIDs(ids...)
}

// ClearBannedBy clears the "banned_by" edge to the User entity.
func (uu *UserUpdate) ClearBannedBy() *UserUpdate {
	uu.mutation.ClearBannedBy()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Discriminator(); ok {
		if err := user.DiscriminatorValidator(v); err != nil {
			return &ValidationError{Name: "discriminator", err: fmt.Errorf(`ent: validator failed for field "User.discriminator": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.AvatarHash(); ok {
		if err := user.AvatarHashValidator(v); err != nil {
			return &ValidationError{Name: "avatar_hash", err: fmt.Errorf(`ent: validator failed for field "User.avatar_hash": %w`, err)}
		}
	}
	if v, ok := uu.mutation.AvatarURL(); ok {
		if err := user.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "User.avatar_url": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Locale(); ok {
		if err := user.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "User.locale": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Admin(); ok {
		_spec.SetField(user.FieldAdmin, field.TypeBool, value)
	}
	if uu.mutation.AdminCleared() {
		_spec.ClearField(user.FieldAdmin, field.TypeBool)
	}
	if value, ok := uu.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if uu.mutation.BannedCleared() {
		_spec.ClearField(user.FieldBanned, field.TypeBool)
	}
	if value, ok := uu.mutation.BanReason(); ok {
		_spec.SetField(user.FieldBanReason, field.TypeString, value)
	}
	if uu.mutation.BanReasonCleared() {
		_spec.ClearField(user.FieldBanReason, field.TypeString)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Discriminator(); ok {
		_spec.SetField(user.FieldDiscriminator, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.AvatarHash(); ok {
		_spec.SetField(user.FieldAvatarHash, field.TypeString, value)
	}
	if uu.mutation.AvatarHashCleared() {
		_spec.ClearField(user.FieldAvatarHash, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if uu.mutation.LocaleCleared() {
		_spec.ClearField(user.FieldLocale, field.TypeString)
	}
	if value, ok := uu.mutation.Bot(); ok {
		_spec.SetField(user.FieldBot, field.TypeBool, value)
	}
	if uu.mutation.BotCleared() {
		_spec.ClearField(user.FieldBot, field.TypeBool)
	}
	if value, ok := uu.mutation.System(); ok {
		_spec.SetField(user.FieldSystem, field.TypeBool, value)
	}
	if uu.mutation.SystemCleared() {
		_spec.ClearField(user.FieldSystem, field.TypeBool)
	}
	if value, ok := uu.mutation.MfaEnabled(); ok {
		_spec.SetField(user.FieldMfaEnabled, field.TypeBool, value)
	}
	if uu.mutation.MfaEnabledCleared() {
		_spec.ClearField(user.FieldMfaEnabled, field.TypeBool)
	}
	if value, ok := uu.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if uu.mutation.VerifiedCleared() {
		_spec.ClearField(user.FieldVerified, field.TypeBool)
	}
	if value, ok := uu.mutation.Flags(); ok {
		_spec.SetField(user.FieldFlags, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.AddedFlags(); ok {
		_spec.AddField(user.FieldFlags, field.TypeUint64, value)
	}
	if uu.mutation.FlagsCleared() {
		_spec.ClearField(user.FieldFlags, field.TypeUint64)
	}
	if value, ok := uu.mutation.PremiumType(); ok {
		_spec.SetField(user.FieldPremiumType, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedPremiumType(); ok {
		_spec.AddField(user.FieldPremiumType, field.TypeInt, value)
	}
	if uu.mutation.PremiumTypeCleared() {
		_spec.ClearField(user.FieldPremiumType, field.TypeInt)
	}
	if value, ok := uu.mutation.PublicFlags(); ok {
		_spec.SetField(user.FieldPublicFlags, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.AddedPublicFlags(); ok {
		_spec.AddField(user.FieldPublicFlags, field.TypeUint64, value)
	}
	if uu.mutation.PublicFlagsCleared() {
		_spec.ClearField(user.FieldPublicFlags, field.TypeUint64)
	}
	if uu.mutation.UserGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserGuildsTable,
			Columns: user.UserGuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserGuildsIDs(); len(nodes) > 0 && !uu.mutation.UserGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserGuildsTable,
			Columns: user.UserGuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserGuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserGuildsTable,
			Columns: user.UserGuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BannedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BannedUsersTable,
			Columns: []string{user.BannedUsersColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedBannedUsersIDs(); len(nodes) > 0 && !uu.mutation.BannedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BannedUsersTable,
			Columns: []string{user.BannedUsersColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BannedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BannedUsersTable,
			Columns: []string{user.BannedUsersColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.BannedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BannedByTable,
			Columns: []string{user.BannedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.BannedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BannedByTable,
			Columns: []string{user.BannedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdateTime sets the "update_time" field.
func (uuo *UserUpdateOne) SetUpdateTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdateTime(t)
	return uuo
}

// SetAdmin sets the "admin" field.
func (uuo *UserUpdateOne) SetAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetAdmin(b)
	return uuo
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAdmin(*b)
	}
	return uuo
}

// ClearAdmin clears the value of the "admin" field.
func (uuo *UserUpdateOne) ClearAdmin() *UserUpdateOne {
	uuo.mutation.ClearAdmin()
	return uuo
}

// SetBanned sets the "banned" field.
func (uuo *UserUpdateOne) SetBanned(b bool) *UserUpdateOne {
	uuo.mutation.SetBanned(b)
	return uuo
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanned(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBanned(*b)
	}
	return uuo
}

// ClearBanned clears the value of the "banned" field.
func (uuo *UserUpdateOne) ClearBanned() *UserUpdateOne {
	uuo.mutation.ClearBanned()
	return uuo
}

// SetBanReason sets the "ban_reason" field.
func (uuo *UserUpdateOne) SetBanReason(s string) *UserUpdateOne {
	uuo.mutation.SetBanReason(s)
	return uuo
}

// SetNillableBanReason sets the "ban_reason" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBanReason(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBanReason(*s)
	}
	return uuo
}

// ClearBanReason clears the value of the "ban_reason" field.
func (uuo *UserUpdateOne) ClearBanReason() *UserUpdateOne {
	uuo.mutation.ClearBanReason()
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetDiscriminator sets the "discriminator" field.
func (uuo *UserUpdateOne) SetDiscriminator(s string) *UserUpdateOne {
	uuo.mutation.SetDiscriminator(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetAvatarHash sets the "avatar_hash" field.
func (uuo *UserUpdateOne) SetAvatarHash(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarHash(s)
	return uuo
}

// SetNillableAvatarHash sets the "avatar_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarHash(*s)
	}
	return uuo
}

// ClearAvatarHash clears the value of the "avatar_hash" field.
func (uuo *UserUpdateOne) ClearAvatarHash() *UserUpdateOne {
	uuo.mutation.ClearAvatarHash()
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetLocale sets the "locale" field.
func (uuo *UserUpdateOne) SetLocale(s string) *UserUpdateOne {
	uuo.mutation.SetLocale(s)
	return uuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocale(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLocale(*s)
	}
	return uuo
}

// ClearLocale clears the value of the "locale" field.
func (uuo *UserUpdateOne) ClearLocale() *UserUpdateOne {
	uuo.mutation.ClearLocale()
	return uuo
}

// SetBot sets the "bot" field.
func (uuo *UserUpdateOne) SetBot(b bool) *UserUpdateOne {
	uuo.mutation.SetBot(b)
	return uuo
}

// SetNillableBot sets the "bot" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBot(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetBot(*b)
	}
	return uuo
}

// ClearBot clears the value of the "bot" field.
func (uuo *UserUpdateOne) ClearBot() *UserUpdateOne {
	uuo.mutation.ClearBot()
	return uuo
}

// SetSystem sets the "system" field.
func (uuo *UserUpdateOne) SetSystem(b bool) *UserUpdateOne {
	uuo.mutation.SetSystem(b)
	return uuo
}

// SetNillableSystem sets the "system" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSystem(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetSystem(*b)
	}
	return uuo
}

// ClearSystem clears the value of the "system" field.
func (uuo *UserUpdateOne) ClearSystem() *UserUpdateOne {
	uuo.mutation.ClearSystem()
	return uuo
}

// SetMfaEnabled sets the "mfa_enabled" field.
func (uuo *UserUpdateOne) SetMfaEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetMfaEnabled(b)
	return uuo
}

// SetNillableMfaEnabled sets the "mfa_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMfaEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetMfaEnabled(*b)
	}
	return uuo
}

// ClearMfaEnabled clears the value of the "mfa_enabled" field.
func (uuo *UserUpdateOne) ClearMfaEnabled() *UserUpdateOne {
	uuo.mutation.ClearMfaEnabled()
	return uuo
}

// SetVerified sets the "verified" field.
func (uuo *UserUpdateOne) SetVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetVerified(b)
	return uuo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetVerified(*b)
	}
	return uuo
}

// ClearVerified clears the value of the "verified" field.
func (uuo *UserUpdateOne) ClearVerified() *UserUpdateOne {
	uuo.mutation.ClearVerified()
	return uuo
}

// SetFlags sets the "flags" field.
func (uuo *UserUpdateOne) SetFlags(u uint64) *UserUpdateOne {
	uuo.mutation.ResetFlags()
	uuo.mutation.SetFlags(u)
	return uuo
}

// SetNillableFlags sets the "flags" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFlags(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetFlags(*u)
	}
	return uuo
}

// AddFlags adds u to the "flags" field.
func (uuo *UserUpdateOne) AddFlags(u int64) *UserUpdateOne {
	uuo.mutation.AddFlags(u)
	return uuo
}

// ClearFlags clears the value of the "flags" field.
func (uuo *UserUpdateOne) ClearFlags() *UserUpdateOne {
	uuo.mutation.ClearFlags()
	return uuo
}

// SetPremiumType sets the "premium_type" field.
func (uuo *UserUpdateOne) SetPremiumType(i int) *UserUpdateOne {
	uuo.mutation.ResetPremiumType()
	uuo.mutation.SetPremiumType(i)
	return uuo
}

// SetNillablePremiumType sets the "premium_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePremiumType(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetPremiumType(*i)
	}
	return uuo
}

// AddPremiumType adds i to the "premium_type" field.
func (uuo *UserUpdateOne) AddPremiumType(i int) *UserUpdateOne {
	uuo.mutation.AddPremiumType(i)
	return uuo
}

// ClearPremiumType clears the value of the "premium_type" field.
func (uuo *UserUpdateOne) ClearPremiumType() *UserUpdateOne {
	uuo.mutation.ClearPremiumType()
	return uuo
}

// SetPublicFlags sets the "public_flags" field.
func (uuo *UserUpdateOne) SetPublicFlags(u uint64) *UserUpdateOne {
	uuo.mutation.ResetPublicFlags()
	uuo.mutation.SetPublicFlags(u)
	return uuo
}

// SetNillablePublicFlags sets the "public_flags" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePublicFlags(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetPublicFlags(*u)
	}
	return uuo
}

// AddPublicFlags adds u to the "public_flags" field.
func (uuo *UserUpdateOne) AddPublicFlags(u int64) *UserUpdateOne {
	uuo.mutation.AddPublicFlags(u)
	return uuo
}

// ClearPublicFlags clears the value of the "public_flags" field.
func (uuo *UserUpdateOne) ClearPublicFlags() *UserUpdateOne {
	uuo.mutation.ClearPublicFlags()
	return uuo
}

// AddUserGuildIDs adds the "user_guilds" edge to the Guild entity by IDs.
func (uuo *UserUpdateOne) AddUserGuildIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserGuildIDs(ids...)
	return uuo
}

// AddUserGuilds adds the "user_guilds" edges to the Guild entity.
func (uuo *UserUpdateOne) AddUserGuilds(g ...*Guild) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddUserGuildIDs(ids...)
}

// AddBannedUserIDs adds the "banned_users" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddBannedUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddBannedUserIDs(ids...)
	return uuo
}

// AddBannedUsers adds the "banned_users" edges to the User entity.
func (uuo *UserUpdateOne) AddBannedUsers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddBannedUserIDs(ids...)
}

// SetBannedByID sets the "banned_by" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetBannedByID(id int) *UserUpdateOne {
	uuo.mutation.SetBannedByID(id)
	return uuo
}

// SetNillableBannedByID sets the "banned_by" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBannedByID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetBannedByID(*id)
	}
	return uuo
}

// SetBannedBy sets the "banned_by" edge to the User entity.
func (uuo *UserUpdateOne) SetBannedBy(u *User) *UserUpdateOne {
	return uuo.SetBannedByID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUserGuilds clears all "user_guilds" edges to the Guild entity.
func (uuo *UserUpdateOne) ClearUserGuilds() *UserUpdateOne {
	uuo.mutation.ClearUserGuilds()
	return uuo
}

// RemoveUserGuildIDs removes the "user_guilds" edge to Guild entities by IDs.
func (uuo *UserUpdateOne) RemoveUserGuildIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserGuildIDs(ids...)
	return uuo
}

// RemoveUserGuilds removes "user_guilds" edges to Guild entities.
func (uuo *UserUpdateOne) RemoveUserGuilds(g ...*Guild) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveUserGuildIDs(ids...)
}

// ClearBannedUsers clears all "banned_users" edges to the User entity.
func (uuo *UserUpdateOne) ClearBannedUsers() *UserUpdateOne {
	uuo.mutation.ClearBannedUsers()
	return uuo
}

// RemoveBannedUserIDs removes the "banned_users" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveBannedUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveBannedUserIDs(ids...)
	return uuo
}

// RemoveBannedUsers removes "banned_users" edges to User entities.
func (uuo *UserUpdateOne) RemoveBannedUsers(u ...*User) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveBannedUserIDs(ids...)
}

// ClearBannedBy clears the "banned_by" edge to the User entity.
func (uuo *UserUpdateOne) ClearBannedBy() *UserUpdateOne {
	uuo.mutation.ClearBannedBy()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdateTime(); !ok {
		if user.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized user.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := user.UpdateDefaultUpdateTime()
		uuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Discriminator(); ok {
		if err := user.DiscriminatorValidator(v); err != nil {
			return &ValidationError{Name: "discriminator", err: fmt.Errorf(`ent: validator failed for field "User.discriminator": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.AvatarHash(); ok {
		if err := user.AvatarHashValidator(v); err != nil {
			return &ValidationError{Name: "avatar_hash", err: fmt.Errorf(`ent: validator failed for field "User.avatar_hash": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.AvatarURL(); ok {
		if err := user.AvatarURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_url", err: fmt.Errorf(`ent: validator failed for field "User.avatar_url": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Locale(); ok {
		if err := user.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "User.locale": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Admin(); ok {
		_spec.SetField(user.FieldAdmin, field.TypeBool, value)
	}
	if uuo.mutation.AdminCleared() {
		_spec.ClearField(user.FieldAdmin, field.TypeBool)
	}
	if value, ok := uuo.mutation.Banned(); ok {
		_spec.SetField(user.FieldBanned, field.TypeBool, value)
	}
	if uuo.mutation.BannedCleared() {
		_spec.ClearField(user.FieldBanned, field.TypeBool)
	}
	if value, ok := uuo.mutation.BanReason(); ok {
		_spec.SetField(user.FieldBanReason, field.TypeString, value)
	}
	if uuo.mutation.BanReasonCleared() {
		_spec.ClearField(user.FieldBanReason, field.TypeString)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Discriminator(); ok {
		_spec.SetField(user.FieldDiscriminator, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AvatarHash(); ok {
		_spec.SetField(user.FieldAvatarHash, field.TypeString, value)
	}
	if uuo.mutation.AvatarHashCleared() {
		_spec.ClearField(user.FieldAvatarHash, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if uuo.mutation.LocaleCleared() {
		_spec.ClearField(user.FieldLocale, field.TypeString)
	}
	if value, ok := uuo.mutation.Bot(); ok {
		_spec.SetField(user.FieldBot, field.TypeBool, value)
	}
	if uuo.mutation.BotCleared() {
		_spec.ClearField(user.FieldBot, field.TypeBool)
	}
	if value, ok := uuo.mutation.System(); ok {
		_spec.SetField(user.FieldSystem, field.TypeBool, value)
	}
	if uuo.mutation.SystemCleared() {
		_spec.ClearField(user.FieldSystem, field.TypeBool)
	}
	if value, ok := uuo.mutation.MfaEnabled(); ok {
		_spec.SetField(user.FieldMfaEnabled, field.TypeBool, value)
	}
	if uuo.mutation.MfaEnabledCleared() {
		_spec.ClearField(user.FieldMfaEnabled, field.TypeBool)
	}
	if value, ok := uuo.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if uuo.mutation.VerifiedCleared() {
		_spec.ClearField(user.FieldVerified, field.TypeBool)
	}
	if value, ok := uuo.mutation.Flags(); ok {
		_spec.SetField(user.FieldFlags, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.AddedFlags(); ok {
		_spec.AddField(user.FieldFlags, field.TypeUint64, value)
	}
	if uuo.mutation.FlagsCleared() {
		_spec.ClearField(user.FieldFlags, field.TypeUint64)
	}
	if value, ok := uuo.mutation.PremiumType(); ok {
		_spec.SetField(user.FieldPremiumType, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedPremiumType(); ok {
		_spec.AddField(user.FieldPremiumType, field.TypeInt, value)
	}
	if uuo.mutation.PremiumTypeCleared() {
		_spec.ClearField(user.FieldPremiumType, field.TypeInt)
	}
	if value, ok := uuo.mutation.PublicFlags(); ok {
		_spec.SetField(user.FieldPublicFlags, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.AddedPublicFlags(); ok {
		_spec.AddField(user.FieldPublicFlags, field.TypeUint64, value)
	}
	if uuo.mutation.PublicFlagsCleared() {
		_spec.ClearField(user.FieldPublicFlags, field.TypeUint64)
	}
	if uuo.mutation.UserGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserGuildsTable,
			Columns: user.UserGuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserGuildsIDs(); len(nodes) > 0 && !uuo.mutation.UserGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserGuildsTable,
			Columns: user.UserGuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserGuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserGuildsTable,
			Columns: user.UserGuildsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BannedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BannedUsersTable,
			Columns: []string{user.BannedUsersColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedBannedUsersIDs(); len(nodes) > 0 && !uuo.mutation.BannedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BannedUsersTable,
			Columns: []string{user.BannedUsersColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BannedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.BannedUsersTable,
			Columns: []string{user.BannedUsersColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.BannedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BannedByTable,
			Columns: []string{user.BannedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.BannedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.BannedByTable,
			Columns: []string{user.BannedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
