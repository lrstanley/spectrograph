# http://localhost:8080/-/playground

query base {
    self {
        id
        admin
        username
        discriminator
        avatarURL

        # 200 is the current Discord guild limit.
        userGuilds(first: 200, orderBy: { direction: DESC, field: NAME }) {
            edges {
                node {
                    id
                    guildID
                    name
                    iconURL
                    joinedAt

                    guildConfig {
                        enabled
                    }

                    guildAdminConfig {
                        enabled
                    }
                }
            }
        }
    }
}

query getGuildID($id: ID!) {
    node(id: $id) {
        ... on Guild {
            id
            iconURL
            guildID
            name
        }
    }
}

query getGuild($id: ID!) {
    node(id: $id) {
        ... on Guild {
            id
            iconURL
            guildID
            name
            joinedAt

            guildConfig {
                id
                enabled
                updateTime
                defaultMaxClones
                regexMatch
                contactEmail
            }

            guildAdminConfig {
                id
                enabled
                updateTime
                defaultMaxChannels
                defaultMaxClones
                comment
            }
        }
    }
}

query getAllGuilds(
    $first: Int = null
    $last: Int = null
    $before: Cursor = null
    $after: Cursor = null
    $order: OrderDirection = ASC
    $orderBy: GuildOrderField = NAME
    $where: GuildWhereInput
) {
    guilds(
        first: $first
        last: $last
        before: $before
        after: $after
        where: $where
        orderBy: { direction: $order, field: $orderBy }
    ) {
        edges {
            node {
                id
                iconURL
                guildID
                name
                joinedAt
                memberCount
                large

                guildConfig {
                    enabled
                    defaultMaxClones
                    contactEmail
                }

                guildAdminConfig {
                    enabled
                    defaultMaxChannels
                    defaultMaxClones
                }
            }
        }

        pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
        }
    }
}

query getAllUsers(
    $first: Int = null
    $last: Int = null
    $before: Cursor = null
    $after: Cursor = null
    $order: OrderDirection = ASC
    $orderBy: UserOrderField = USERNAME
    $where: UserWhereInput
) {
    users(
        first: $first
        last: $last
        before: $before
        after: $after
        where: $where
        orderBy: { direction: $order, field: $orderBy }
    ) {
        edges {
            node {
                id
                admin
                avatarURL
                discriminator
                username
                email
                locale
                mfaEnabled
                verified
            }
        }

        pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
        }
    }
}

query getAllGuildEvents(
    $first: Int = null
    $last: Int = null
    $before: Cursor = null
    $after: Cursor = null
    $order: OrderDirection = DESC
    $orderBy: GuildEventOrderField = CREATED_AT
    $where: GuildEventWhereInput
) {
    guildevents(
        first: $first
        last: $last
        before: $before
        after: $after
        where: $where
        orderBy: { direction: $order, field: $orderBy }
    ) {
        edges {
            node {
                id
                createTime
                message
                metadata
                type

                guild {
                    id
                    iconURL
                    guildID
                    name
                }
            }
        }

        pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
        }
    }
}
